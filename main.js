/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ts-md5/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/ts-md5/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Md5 = void 0;
    var Md52 = (
      /** @class */
      function() {
        function Md53() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state = new Int32Array(4);
          this._buffer = new ArrayBuffer(68);
          this._buffer8 = new Uint8Array(this._buffer, 0, 68);
          this._buffer32 = new Uint32Array(this._buffer, 0, 17);
          this.start();
        }
        Md53.hashStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendStr(str).end(raw);
        };
        Md53.hashAsciiStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendAsciiStr(str).end(raw);
        };
        Md53._hex = function(x) {
          var hc = Md53.hexChars;
          var ho = Md53.hexOut;
          var n;
          var offset;
          var j;
          var i;
          for (i = 0; i < 4; i += 1) {
            offset = i * 8;
            n = x[i];
            for (j = 0; j < 8; j += 2) {
              ho[offset + 1 + j] = hc.charAt(n & 15);
              n >>>= 4;
              ho[offset + 0 + j] = hc.charAt(n & 15);
              n >>>= 4;
            }
          }
          return ho.join("");
        };
        Md53._md5cycle = function(x, k) {
          var a = x[0];
          var b = x[1];
          var c = x[2];
          var d = x[3];
          a += (b & c | ~b & d) + k[0] - 680876936 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[1] - 389564586 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[2] + 606105819 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[4] - 176418897 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[7] - 45705983 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[10] - 42063 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[13] - 40341101 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & d | c & ~d) + k[1] - 165796510 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[11] + 643717713 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[0] - 373897302 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[5] - 701558691 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[10] + 38016083 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[15] - 660478335 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[4] - 405537848 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[9] + 568446438 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[3] - 187363961 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[2] - 51403784 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b ^ c ^ d) + k[5] - 378558 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[14] - 35309556 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[7] - 155497632 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[13] + 681279174 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[0] - 358537222 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[3] - 722521979 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[6] + 76029189 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[9] - 640364487 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[12] - 421815835 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[15] + 530742520 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[2] - 995338651 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          x[0] = a + x[0] | 0;
          x[1] = b + x[1] | 0;
          x[2] = c + x[2] | 0;
          x[3] = d + x[3] | 0;
        };
        Md53.prototype.start = function() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state.set(Md53.stateIdentity);
          return this;
        };
        Md53.prototype.appendStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var code;
          var i;
          for (i = 0; i < str.length; i += 1) {
            code = str.charCodeAt(i);
            if (code < 128) {
              buf8[bufLen++] = code;
            } else if (code < 2048) {
              buf8[bufLen++] = (code >>> 6) + 192;
              buf8[bufLen++] = code & 63 | 128;
            } else if (code < 55296 || code > 56319) {
              buf8[bufLen++] = (code >>> 12) + 224;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            } else {
              code = (code - 55296) * 1024 + (str.charCodeAt(++i) - 56320) + 65536;
              if (code > 1114111) {
                throw new Error("Unicode standard supports code points up to U+10FFFF");
              }
              buf8[bufLen++] = (code >>> 18) + 240;
              buf8[bufLen++] = code >>> 12 & 63 | 128;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            }
            if (bufLen >= 64) {
              this._dataLength += 64;
              Md53._md5cycle(this._state, buf32);
              bufLen -= 64;
              buf32[0] = buf32[16];
            }
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendAsciiStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(str.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = str.charCodeAt(j++);
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendByteArray = function(input) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(input.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = input[j++];
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.getState = function() {
          var s = this._state;
          return {
            buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),
            buflen: this._bufferLength,
            length: this._dataLength,
            state: [s[0], s[1], s[2], s[3]]
          };
        };
        Md53.prototype.setState = function(state) {
          var buf = state.buffer;
          var x = state.state;
          var s = this._state;
          var i;
          this._dataLength = state.length;
          this._bufferLength = state.buflen;
          s[0] = x[0];
          s[1] = x[1];
          s[2] = x[2];
          s[3] = x[3];
          for (i = 0; i < buf.length; i += 1) {
            this._buffer8[i] = buf.charCodeAt(i);
          }
        };
        Md53.prototype.end = function(raw) {
          if (raw === void 0) {
            raw = false;
          }
          var bufLen = this._bufferLength;
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var i = (bufLen >> 2) + 1;
          this._dataLength += bufLen;
          var dataBitsLen = this._dataLength * 8;
          buf8[bufLen] = 128;
          buf8[bufLen + 1] = buf8[bufLen + 2] = buf8[bufLen + 3] = 0;
          buf32.set(Md53.buffer32Identity.subarray(i), i);
          if (bufLen > 55) {
            Md53._md5cycle(this._state, buf32);
            buf32.set(Md53.buffer32Identity);
          }
          if (dataBitsLen <= 4294967295) {
            buf32[14] = dataBitsLen;
          } else {
            var matches = dataBitsLen.toString(16).match(/(.*?)(.{0,8})$/);
            if (matches === null) {
              return;
            }
            var lo = parseInt(matches[2], 16);
            var hi = parseInt(matches[1], 16) || 0;
            buf32[14] = lo;
            buf32[15] = hi;
          }
          Md53._md5cycle(this._state, buf32);
          return raw ? this._state : Md53._hex(this._state);
        };
        Md53.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]);
        Md53.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        Md53.hexChars = "0123456789abcdef";
        Md53.hexOut = [];
        Md53.onePassHasher = new Md53();
        return Md53;
      }()
    );
    exports.Md5 = Md52;
    if (Md52.hashStr("hello") !== "5d41402abc4b2a76b9719d911017c592") {
      throw new Error("Md5 self test failed.");
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TradingStrategy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/lang_str.ts
var SETTING_NAME = /* @__PURE__ */ new Map([
  ["ONE_GRID_LIMIT", "\u9996\u7F51\u4E0A\u9650\u503C"],
  ["MAX_SLUMP_PCT", "\u6700\u5927\u56DE\u64A4\u503C"],
  ["TRIGGER_ADD_POINT", "\u89E6\u53D1\u4EF7\u52A0\u70B9"],
  ["TRADING_PRICE_PRECISION", "\u4EA4\u6613\u4EF7\u7CBE\u5EA6"],
  ["MIN_BATCH_COUNT", "\u5355\u624B\u4EFD\u6570\u989D"],
  ["MAX_RISE_PCT", "\u5355\u65E5\u6700\u5927\u6DA8\u5E45"],
  ["SGRID_STEP_PCT", "\u5C0F\u7F51\u6B65\u8FDB\u503C"],
  ["SGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["SGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["MGRID_STEP_PCT", "\u4E2D\u7F51\u6B65\u8FDB\u503C"],
  ["MGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["MGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["LGRID_STEP_PCT", "\u5927\u7F51\u6B65\u8FDB\u503C"],
  ["LGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["LGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["DATA_API_LICENCE", "\u6570\u636E\u63A5\u53E3\u8BC1\u4E66"]
]);
var SGRID_TYPE_NAME_STR = "\u5C0F\u7F51";
var MGRID_TYPE_NAME_STR = "\u4E2D\u7F51";
var LGRID_TYPE_NAME_STR = "\u5927\u7F51";
var PERFIT_TYPE_NAME_STR = "\u5229\u6DA6";

// src/settings.ts
var GRID_COLOR_BUY_MONITOR = "#FFFF00";
var GRID_COLOR_SELL_MONITOR = "#FFFF00";
var GRID_COLOR_BUY_TRIGGERED = "#D3D3D3";
var GRID_COLOR_SELL_TRIGGERED = "#FFFFE0";
var GRID_COLOR_STOCK_OVERVIEW = "#FFFFFF";
var GRID_COLOR_TABLE_TITLE = "#D3D3D3";
var GRID_COLOR_BUY_OVERVIEW = "#FFFF01";
var GRID_COLOR_SELL_OVERVIEW = "#FFFF00";
function PackSettings(settings) {
  let pack_str = "";
  let key;
  for (key in settings) {
    if (SETTING_NAME.has(String(key))) {
      pack_str = pack_str + String(key) + ":" + String(settings[key]) + "\n";
    }
  }
  return pack_str;
}
function UnpackSettings(settings, lines) {
  lines.forEach((line, idx) => {
    const strs = line.split(":");
    if (SETTING_NAME.has(strs[0])) {
      SetSettingValue(settings, strs[0], strs[1]);
    }
  });
}
function GetSettingValue(settings, key) {
  return settings[key];
}
function SetSettingValue(settings, key, value) {
  if (key in settings) {
    settings[key] = value;
  }
}
var PluginBaseSettings = class {
  constructor() {
    this.DATA_API_LICENCE = "112e84656174f0a5";
    this.DATA_API_LICENCE = "b192f53a6d6928033";
  }
};
var GridTradingSettings = class {
  constructor() {
    this.ONE_GRID_LIMIT = 1e4;
    this.MAX_SLUMP_PCT = 0.67;
    this.TRIGGER_ADD_POINT = 5e-3;
    this.TRADING_PRICE_PRECISION = 3;
    this.MIN_BATCH_COUNT = 100;
    this.MAX_RISE_PCT = 0.1;
    this.CLEAR_STEP_PCT = 0.25;
    this.MINIMUM_BUY_PCT = 0.1;
    this.BOTTOM_BUY_PCT = 0.2;
    this.SGRID_STEP_PCT = 0.05;
    this.SGRID_ADD_PCT = 0.05;
    this.SGRID_RETAIN_COUNT = 4;
    this.MGRID_STEP_PCT = 0.22;
    this.MGRID_ADD_PCT = 0.2;
    this.MGRID_RETAIN_COUNT = 2;
    this.LGRID_STEP_PCT = 0.52;
    this.LGRID_ADD_PCT = 0.5;
    this.LGRID_RETAIN_COUNT = 1;
  }
  Clone() {
    const clone = new GridTradingSettings();
    clone.ONE_GRID_LIMIT = this.ONE_GRID_LIMIT;
    clone.MAX_SLUMP_PCT = this.MAX_SLUMP_PCT;
    clone.TRIGGER_ADD_POINT = this.TRIGGER_ADD_POINT;
    clone.TRADING_PRICE_PRECISION = this.TRADING_PRICE_PRECISION;
    clone.MIN_BATCH_COUNT = this.MIN_BATCH_COUNT;
    clone.MAX_RISE_PCT = this.MAX_RISE_PCT;
    clone.CLEAR_STEP_PCT = this.CLEAR_STEP_PCT;
    clone.MINIMUM_BUY_PCT = this.MINIMUM_BUY_PCT;
    clone.BOTTOM_BUY_PCT = this.BOTTOM_BUY_PCT;
    clone.SGRID_STEP_PCT = this.SGRID_STEP_PCT;
    clone.SGRID_ADD_PCT = this.SGRID_ADD_PCT;
    clone.SGRID_RETAIN_COUNT = this.SGRID_RETAIN_COUNT;
    clone.MGRID_STEP_PCT = this.MGRID_STEP_PCT;
    clone.MGRID_ADD_PCT = this.MGRID_ADD_PCT;
    clone.MGRID_RETAIN_COUNT = this.MGRID_RETAIN_COUNT;
    clone.LGRID_STEP_PCT = this.LGRID_STEP_PCT;
    clone.LGRID_ADD_PCT = this.LGRID_ADD_PCT;
    clone.LGRID_RETAIN_COUNT = this.LGRID_RETAIN_COUNT;
    return clone;
  }
  PackBase() {
    const setting = [
      "BASE",
      String(this.ONE_GRID_LIMIT),
      String(this.MAX_SLUMP_PCT),
      String(this.TRIGGER_ADD_POINT),
      String(this.TRADING_PRICE_PRECISION),
      String(this.MIN_BATCH_COUNT),
      String(this.MAX_RISE_PCT),
      String(this.CLEAR_STEP_PCT),
      String(this.MINIMUM_BUY_PCT),
      String(this.BOTTOM_BUY_PCT)
    ];
    return setting.join(",");
  }
  UnpackBase(strs) {
    if (strs.length < 10) {
      return;
    }
    this.ONE_GRID_LIMIT = Number(strs[1]);
    this.MAX_SLUMP_PCT = Number(strs[2]);
    this.TRIGGER_ADD_POINT = Number(strs[3]);
    this.TRADING_PRICE_PRECISION = Number(strs[4]);
    this.MIN_BATCH_COUNT = Number(strs[5]);
    this.MAX_RISE_PCT = Number(strs[6]);
    this.CLEAR_STEP_PCT = Number(strs[7]);
    this.MINIMUM_BUY_PCT = Number(strs[8]);
    this.BOTTOM_BUY_PCT = Number(strs[9]);
  }
  PackStep() {
    const setting = [
      "STEP",
      String(this.SGRID_STEP_PCT),
      String(this.SGRID_ADD_PCT),
      String(this.SGRID_RETAIN_COUNT),
      String(this.MGRID_STEP_PCT),
      String(this.MGRID_ADD_PCT),
      String(this.MGRID_RETAIN_COUNT),
      String(this.LGRID_STEP_PCT),
      String(this.LGRID_ADD_PCT),
      String(this.LGRID_RETAIN_COUNT)
    ];
    return setting.join(",");
  }
  UnpackStep(strs) {
    if (strs.length != 10) {
      return;
    }
    this.SGRID_STEP_PCT = Number(strs[1]);
    this.SGRID_ADD_PCT = Number(strs[2]);
    this.SGRID_RETAIN_COUNT = Number(strs[3]);
    this.MGRID_STEP_PCT = Number(strs[4]);
    this.MGRID_ADD_PCT = Number(strs[5]);
    this.MGRID_RETAIN_COUNT = Number(strs[6]);
    this.LGRID_STEP_PCT = Number(strs[7]);
    this.LGRID_ADD_PCT = Number(strs[8]);
    this.LGRID_RETAIN_COUNT = Number(strs[9]);
  }
  PackQuant() {
    const setting = ["QUANT"];
    return setting.join(",");
  }
  UnpackQuant(strs) {
  }
};

// src/remote_util.ts
var import_obsidian = require("obsidian");
var data_url_prefix = "http://api.biyingapi.com";
async function GetETFCurrentPrice(etf_code, api_licence, retry_count = 3) {
  if (!(etf_code.startsWith("sz") || etf_code.startsWith("sh"))) {
    return -1;
  }
  const data_api = data_url_prefix + "/jj/etfhq/" + etf_code + "/" + api_licence;
  while (retry_count >= 0) {
    try {
      const response = await (0, import_obsidian.requestUrl)(data_api);
      DebugLog("request ", etf_code, "  result ", response.json["zxj"]);
      return response.json["zxj"];
    } catch (e) {
      DebugLog("request ", data_api, "  error ", e.message);
      await sleep(30 * 1e3);
    }
    retry_count = retry_count - 1;
  }
  return -1;
}
async function GetLOFCurrentPrice(lof_code, api_licence, retry_count = 3) {
  if (!(lof_code.startsWith("sz") || lof_code.startsWith("sh"))) {
    return -1;
  }
  const data_api = data_url_prefix + "/jj/lofhq/" + lof_code + "/" + api_licence;
  while (retry_count >= 0) {
    try {
      const response = await (0, import_obsidian.requestUrl)(data_api);
      DebugLog("request ", lof_code, "  result ", response.json["zxj"]);
      return response.json["zxj"];
    } catch (e) {
      DebugLog("request ", data_api, "  error ", e.message);
      await sleep(30 * 1e3);
    }
  }
  return -1;
}
function DebugLog(...args) {
  let log_str = "";
  args.forEach((cell, i) => {
    log_str = log_str + String(cell);
  });
  new import_obsidian.Notice(log_str);
}

// src/grid_view.ts
var import_obsidian2 = require("obsidian");

// src/mymath.ts
function FixedPrice(price, pct, precision) {
  const scale = 10 ** precision;
  return Math.floor(Math.floor(price * scale) * Math.floor(pct * 100) / 100) / scale;
}
function MyFloor(num, single) {
  return Math.floor(num / single) * single;
}
function MyCeil(num, single) {
  return Math.ceil(num / single) * single;
}
function ToPercent(num, count = 0) {
  return (num * 100).toFixed(count) + "%";
}
function ToPercentStr(num, count = 0) {
  return num.toFixed(count) + "%";
}
function ToNumber(percent) {
  return Number(percent.replace("%", "")) / 100;
}
function ToTradingGap(current_price, target_price, count = 0) {
  if (target_price == void 0 || current_price == void 0 || current_price == 0) {
    return "-";
  }
  const gap = Math.abs(target_price - current_price);
  if (target_price > current_price) {
    return "+" + ToPercent(gap / current_price, count);
  } else {
    return "-" + ToPercent(gap / current_price, count);
  }
}
function IsNumeric(str) {
  return !isNaN(Number(str));
}
function TimeDuarion(dateStr1, dateStr2) {
  const date1 = new Date(dateStr1);
  const date2 = new Date(dateStr2);
  if (isNaN(date1.getTime()) || isNaN(date2.getTime())) {
    throw new Error("\u8F93\u5165\u7684\u65E5\u671F\u683C\u5F0F\u4E0D\u6B63\u786E");
  }
  const utc1 = Date.UTC(
    date1.getUTCFullYear(),
    date1.getUTCMonth(),
    date1.getUTCDate()
  );
  const utc2 = Date.UTC(
    date2.getUTCFullYear(),
    date2.getUTCMonth(),
    date2.getUTCDate()
  );
  return Math.abs(Math.floor((utc1 - utc2) / (1e3 * 60 * 60 * 24)));
}
function AveragePriceStr(cost, count, single) {
  if (count == 0) {
    return count.toFixed(single);
  }
  return String((cost / count).toFixed(single));
}
function StringPlus(num1, num2, single) {
  return String(MyFloor(Number(num1) + Number(num2), single));
}
function ProportionPctStr(count, total, single) {
  if (total == 0) {
    return total.toFixed(single) + "%";
  }
  return String((count / total * 100).toFixed(single)) + "%";
}

// src/grid_trading.ts
var import_md5 = __toESM(require_md5());
var GridTrading = class {
  constructor(plugin_env) {
    this.plugin_env = plugin_env;
    this.grid_settings = plugin_env.grid_settings.Clone();
    this.debug_log = [];
    this.data_md5 = "";
    this.is_empty = true;
    this.is_debug = false;
    this.remote_current_price = -1;
  }
  InitGridTrading(data) {
  }
  UpdateRemotePrice(remote_price) {
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  GetTradingTitle() {
    return this.stock_name + "(" + String(this.target_stock) + ")";
  }
  IsStock() {
    if (this.is_empty == false && (this.market_code == "sz" || this.market_code == "sh")) {
      return true;
    } else {
      return false;
    }
  }
  InitTradingOverview() {
    this.stock_overview = [
      GRID_COLOR_STOCK_OVERVIEW,
      String(this.target_stock),
      this.stock_name,
      this.target_price.toFixed(3),
      this.current_price.toFixed(3),
      ToPercent(this.current_price / this.target_price, 1),
      String(this.total_hold),
      String(this.total_cost),
      ToTradingGap(this.total_cost, this.total_hold * this.current_price, 2),
      this.trading_income[5][10]
    ];
    this.stock_buy_overview = [];
    if (this.buy_monitor_rows.length > 0) {
      for (let idx = 0; idx < this.buy_monitor_rows.length; idx++) {
        const row = this.buy_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][3]), 2);
        this.stock_buy_overview.push([
          GRID_COLOR_BUY_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][2],
          this.trading_table[row][3],
          this.trading_table[row][4],
          this.trading_table[row][5],
          trading_gap
        ]);
      }
    }
    this.stock_sell_overview = [];
    if (this.sell_monitor_rows.length > 0) {
      for (let idx = 0; idx < this.sell_monitor_rows.length; idx++) {
        const row = this.sell_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][7]), 2);
        this.stock_sell_overview.push([
          GRID_COLOR_SELL_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][6],
          this.trading_table[row][7],
          this.trading_table[row][8],
          this.trading_table[row][9],
          trading_gap
        ]);
      }
    }
    if (this.stock_active_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_active_filled_record.length; idx++) {
        const row = this.stock_active_filled_record[idx];
        row[8] = String(this.current_price);
        row[9] = ToTradingGap(Number(row[5]), this.current_price);
        row[10] = String(MyCeil(Number(row[7]) / this.current_price, this.grid_settings.MIN_BATCH_COUNT));
        row[11] = String(Number(row[6]) - Number(row[10]));
      }
    }
    if (this.stock_passive_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_passive_filled_record.length; idx++) {
        const row = this.stock_passive_filled_record[idx];
        const grid_row = this.FindTradingGridRow(row[3]);
        if (grid_row.length > 0) {
          row[3] = grid_row[0];
          row[4] = grid_row[1];
          row[5] = grid_row[3];
          row[6] = grid_row[4];
          row[7] = grid_row[5];
          row[8] = String(this.current_price);
          row[9] = ToTradingGap(Number(row[5]), this.current_price);
          row[10] = grid_row[7];
          row[11] = ToTradingGap(this.current_price, Number(row[10]));
        }
      }
    }
  }
  ParseRawData(data) {
    const new_md5 = import_md5.Md5.hashStr(data);
    if (new_md5 === this.data_md5) {
      return false;
    }
    this.data_md5 = new_md5;
    const lines = data.split("\n");
    const strs = lines[0].split(",");
    this.target_stock = Number(strs[1]);
    this.stock_name = strs[2];
    if (this.stock_name == "DEBUGTEST") {
      this.is_debug = true;
    }
    this.market_code = strs[3];
    this.target_price = Number(strs[4]);
    this.current_price = Number(strs[5]);
    this.remote_current_price = this.plugin_env.GetStockRemotePrice(strs[1]);
    if (this.remote_current_price > 0) {
      this.current_price = this.remote_current_price;
    }
    this.grid_settings = this.plugin_env.grid_settings.Clone();
    this.raw_trading_record = [];
    this.buy_grid_record = [];
    this.sgrid_step_table = [];
    this.mgrid_step_table = [];
    this.lgrid_step_table = [];
    this.clear_sell_record = /* @__PURE__ */ new Map();
    for (let idx = 1; idx < lines.length; idx++) {
      const strs2 = lines[idx].split(",");
      if (strs2[0] == "BUY") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.push(strs2[2]);
      }
      if (strs2[0] == "SELL") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.remove(strs2[2]);
      }
      if (strs2[0] == "SHARE") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "BASE") {
        this.grid_settings.UnpackBase(strs2);
      }
      if (strs2[0] == "STEP") {
        this.grid_settings.UnpackStep(strs2);
      }
      if (strs2[0] == "SGRID") {
        this.sgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "MGRID") {
        this.mgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "LGRID") {
        this.lgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
    }
    return true;
  }
  InitStockTable() {
    this.empty_price = FixedPrice(this.target_price, 1 + this.grid_settings.SGRID_STEP_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (Number(this.trading_table[idx][7]) > this.empty_price) {
        this.empty_price = Number(this.trading_table[idx][7]);
      }
    }
    const clear_pct = this.grid_settings.CLEAR_STEP_PCT;
    this.clear_avg_price = Number(((this.CalcClearPrice(clear_pct, 1) + this.CalcClearPrice(clear_pct, 2) + this.CalcClearPrice(clear_pct, 3)) / 3).toFixed(this.grid_settings.TRADING_PRICE_PRECISION));
    this.clear_price = this.CalcClearPrice(clear_pct, 3);
    const mini_price = FixedPrice(this.target_price, this.grid_settings.MINIMUM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    const bottom_price = FixedPrice(this.target_price, this.grid_settings.BOTTOM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    this.stock_table = [
      ["\u6807\u7684\u4EE3\u53F7", String(this.target_stock)],
      ["\u6807\u7684\u540D\u79F0", this.stock_name],
      ["\u7F51\u683C\u6A21\u5F0F", this.mode_type],
      ["\u9996\u7F51\u4EF7\u683C", String(this.target_price)],
      ["\u5F53\u524D\u4EF7\u683C", String(this.current_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.current_price / this.target_price, 1)],
      ["\u56DE\u8C03\u4EF7\u683C", String(bottom_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.BOTTOM_BUY_PCT, 1)],
      ["\u6700\u4F4E\u4EF7\u683C", String(mini_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.MINIMUM_BUY_PCT, 1)],
      ["\u505C\u683C\u8DCC\u5E45", ToTradingGap(this.current_price, mini_price), "\u6E05\u683C\u6DA8\u5E45", ToTradingGap(this.current_price, this.empty_price, 1)]
    ];
  }
  InitGridParam() {
    this.param_table = [
      ["\u9996\u7F51\u76EE\u6807\u91D1\u989D", String(this.grid_settings.ONE_GRID_LIMIT), "\u6700\u5927\u56DE\u64A4\u503C", ToPercent(this.grid_settings.MAX_SLUMP_PCT), "\u6700\u5927\u6DA8\u8DCC\u5E45", ToPercent(this.grid_settings.MAX_RISE_PCT)],
      ["\u89E6\u53D1\u4EF7\u52A0\u70B9", String(this.grid_settings.TRIGGER_ADD_POINT), "\u6BCF\u624B\u4EFD\u6570\u989D", String(this.grid_settings.MIN_BATCH_COUNT), "\u4EA4\u6613\u4EF7\u7CBE\u5EA6", String(this.grid_settings.TRADING_PRICE_PRECISION)],
      ["\u5C0F\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.SGRID_STEP_PCT), "\u4E2D\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.MGRID_STEP_PCT), "\u5927\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.LGRID_STEP_PCT)],
      ["\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.SGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.MGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.LGRID_ADD_PCT)],
      ["\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.SGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.MGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.LGRID_RETAIN_COUNT)]
    ];
  }
  InitTradingAnalysis() {
    const price = this.target_price;
    const rise_pct = this.grid_settings.SGRID_STEP_PCT;
    const table = this.trading_table;
    function Analysis(slump_pct) {
      let total_cost = 0;
      let total_amount = 0;
      let total_sell = 0;
      let total_gain = 0;
      const min_price = price * (1 - slump_pct);
      const max_price = price * (1 + rise_pct);
      table.forEach((row, i) => {
        if (i > 0 && ToNumber(row[1]) >= 1 - slump_pct) {
          total_cost = total_cost + Number(row[5]);
          total_amount = total_amount + Number(row[4]);
          total_gain = total_gain + Number(row[9]);
          total_sell = total_sell + Number(row[8]);
        }
      });
      const cost_price = (total_cost - total_gain) / (total_amount - total_sell);
      const gain_money = Math.floor(max_price * (total_amount - total_sell) - (total_cost - total_gain));
      return [
        ToPercent(slump_pct) + "(" + min_price.toFixed(3) + ")",
        String(total_cost),
        String(total_amount),
        String(Math.ceil(total_amount * min_price)),
        (total_cost / total_amount).toFixed(3),
        String(Math.ceil(total_cost - total_amount * min_price)),
        ((total_cost - total_amount * min_price) / total_cost * 100).toFixed(2) + "%",
        ((total_cost / total_amount - min_price) / min_price * 100).toFixed(2) + "%",
        String(total_amount - total_sell),
        String(Math.floor(max_price * (total_amount - total_sell))),
        String(total_cost - total_gain),
        cost_price.toFixed(3),
        ((max_price - cost_price) / cost_price * 100).toFixed(2) + "%",
        String(gain_money),
        (gain_money / total_cost * 100).toFixed(2) + "%"
      ];
    }
    this.trading_analysis = [
      ["\u4E8F\u635F\u5206\u6790", "\u56DE\u64A4\u6BD4\u4F8B"],
      ["", "\u6295\u5165\u8D44\u91D1"],
      ["", "\u6301\u4ED3\u4EFD\u989D"],
      ["", "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u4E8F\u635F\u91D1\u989D"],
      ["", "\u4E8F\u635F\u6BD4\u4F8B"],
      ["", "\u6240\u9700\u6DA8\u5E45"],
      ["\u53CD\u5F39\u76C8\u5229", "\u6301\u4ED3\u4EFD\u989D"],
      [(price * (1 + rise_pct)).toFixed(3), "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u5360\u7528\u672C\u91D1"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u6D6E\u76C8\u6BD4\u4F8B"],
      ["", "\u7F51\u683C\u76C8\u5229"],
      ["", "\u603B\u6D6E\u76C8\u6BD4"]
    ];
    const slump_pcts = [20, 30, 40, 50, 60, 70, 80];
    for (const pct of slump_pcts) {
      const result = Analysis(pct / 100);
      for (let idx = 0; idx < result.length; idx++) {
        this.trading_analysis[idx].push(result[idx]);
      }
    }
  }
  InitTradingRecord() {
    this.total_retain = 0;
    this.retain_cost = 0;
    this.total_cost = 0;
    this.total_hold = 0;
    this.trading_record = [["\u4EA4\u6613\u65B9\u5411", "\u4EA4\u6613\u65E5\u671F", "\u7F51\u683C\u7C7B\u578B", "\u4EA4\u6613\u4EF7\u683C", "\u4EA4\u6613\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u7D2F\u79EF\u7B79\u7801", "\u6301\u4ED3\u65F6\u957F"]];
    this.stock_passive_filled_record = [];
    this.stock_active_filled_record = [];
    this.holding_record = [];
    let raw_record = [...this.raw_trading_record];
    let cursor = 0;
    let retain_sell = 0;
    while (cursor < raw_record.length) {
      if (raw_record[cursor][0] == "BUY") {
        let scursor = -1;
        for (let idx = cursor; idx < raw_record.length; idx++) {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2] == raw_record[cursor][2]) {
            scursor = idx;
            break;
          }
        }
        if (scursor >= 0) {
          const retain_count = Math.floor(Number(raw_record[cursor][4]) - Number(raw_record[scursor][4]));
          const cost_count = Math.floor(Number(raw_record[cursor][3]) * Number(raw_record[cursor][4]) - Number(raw_record[scursor][3]) * Number(raw_record[scursor][4]));
          const time_d = TimeDuarion(raw_record[cursor][1], raw_record[scursor][1]);
          this.total_retain = this.total_retain + retain_count;
          this.retain_cost = this.retain_cost + cost_count;
          this.trading_record.push([raw_record[cursor][0], raw_record[cursor][1], raw_record[cursor][2], raw_record[cursor][3], raw_record[cursor][4], String(cost_count)]);
          this.trading_record.push([raw_record[scursor][0], raw_record[scursor][1], raw_record[scursor][2], raw_record[scursor][3], raw_record[scursor][4], "--", String(retain_count), String(time_d) + "\u5929"]);
          raw_record.splice(cursor, 1);
          raw_record.splice(scursor - 1, 1);
        } else {
          cursor++;
        }
      } else {
        cursor++;
      }
    }
    for (let idx = 0; idx < raw_record.length; idx++) {
      if (raw_record[idx][0] == "BUY") {
        const cost_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
        this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], String(cost_count)]);
        this.total_cost = this.total_cost + cost_count;
        if (Number(raw_record[idx][3]) > 0) {
          this.total_hold = this.total_hold + Number(raw_record[idx][4]);
          this.holding_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
        if (Number(raw_record[idx][3]) == 0) {
          this.stock_passive_filled_record.push([GRID_COLOR_BUY_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], "", "", "", "", "", "", "", ""]);
        }
        if (raw_record[idx][2].startsWith("\u8865\u4ED3")) {
          this.stock_active_filled_record.push([GRID_COLOR_SELL_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], raw_record[idx][1], raw_record[idx][3], raw_record[idx][4], String(cost_count), "", "", ""]);
        }
      } else {
        if (raw_record[idx][0] == "SHARE") {
          if (raw_record[idx][2] == "\u7EA2\u5229") {
            const gain_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "-" + String(gain_count)]);
            this.retain_cost = this.retain_cost - gain_count;
          }
          if (raw_record[idx][2] == "\u62C6\u80A1") {
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "--", raw_record[idx][4]]);
            this.total_retain = this.total_retain + Number(raw_record[idx][4]);
          }
        } else {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2].startsWith("\u5229\u6DA6")) {
            this.total_retain = this.total_retain - Number(raw_record[idx][4]);
            this.retain_cost = this.retain_cost - Number(raw_record[idx][3]) * Number(raw_record[idx][4]);
            retain_sell = retain_sell + Number(raw_record[idx][4]);
            let sell_count = this.clear_sell_record.get(raw_record[idx][2]);
            if (sell_count == void 0) {
              sell_count = 0;
            }
            this.clear_sell_record.set(raw_record[idx][2], sell_count + Number(raw_record[idx][4]));
          }
          this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
      }
    }
    this.total_hold = this.total_hold + this.total_retain;
    this.total_cost = this.total_cost + this.retain_cost;
    if (this.total_cost != 0) {
      this.trading_record.push(["Cost", "", "", "", "", String(this.total_cost), "", ""]);
    }
    if (this.total_retain <= 0) {
      if (this.total_hold > 0) {
        this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", "0", ""]);
      }
      return;
    }
    this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", String(this.total_retain), ""]);
    const current_pct = MyCeil(this.current_price / this.target_price, 1e-3);
    for (let index = 1; index <= 3; index++) {
      const row = this.GenerateClearRow(PERFIT_TYPE_NAME_STR, index, this.grid_settings.CLEAR_STEP_PCT, MyFloor((this.total_retain + retain_sell) / 3, 100));
      this.trading_table.push(row);
      if (current_pct + this.grid_settings.MAX_RISE_PCT >= ToNumber(row[1])) {
        this.sell_monitor_rows.push(this.trading_table.length - 1);
      }
      this.sell_triggered_rows.push(this.trading_table.length - 1);
    }
  }
  InitTradingIncome() {
    this.trading_income = [];
    this.trading_income.push(["", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5B9E\u9645\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]);
    this.trading_income.push(this.GenerateIncomeRow("\u7D2F\u8BA1\u7B79\u7801", this.total_retain, this.retain_cost, this.current_price, this.retain_cost, 0, 0));
    this.CalcTradingIncome("\u5F53\u524D", this.current_price / this.target_price, this.empty_price, this.clear_avg_price, this.clear_price, false);
    this.CalcTradingIncome("\u56DE\u8C03", this.grid_settings.BOTTOM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price);
    this.CalcTradingIncome("\u6700\u5927", this.grid_settings.MINIMUM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price);
  }
  InitHoldingAnalysis() {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.holding_analysis = [];
    this.holding_analysis.push(["\u7B79\u7801\u7C7B\u578B", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]);
    this.holding_analysis.push(["\u603B\u989D"]);
    this.CalcHoldingPercent("\u5C0F\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u4E2D\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u5927\u7F51", this.empty_price, this.clear_avg_price);
    let grid_total_hold = this.total_retain;
    let grid_total_cost = this.retain_cost;
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    let grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    let grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u7D2F\u79EF",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith("\u8865\u4ED3")) {
        grid_total_hold += Number(this.holding_record[idx][4]);
        grid_total_cost += Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    grid_current_value = Math.floor(grid_total_hold * this.current_price);
    grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u8865\u4ED3",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    grid_current_value = 0;
    grid_empty_income = 0;
    grid_clear_income = 0;
    for (let idx = 2; idx < this.holding_analysis.length; idx++) {
      grid_total_hold += Number(this.holding_analysis[idx][1]);
      grid_total_cost += Number(this.holding_analysis[idx][2]);
      grid_current_value += Number(this.holding_analysis[idx][3]);
      grid_empty_income += Number(this.holding_analysis[idx][7]);
      grid_clear_income += Number(this.holding_analysis[idx][8]);
    }
    this.holding_analysis[1] = [
      "\u603B\u989D",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ];
  }
  CalcHoldingPercent(grid_type, empty_price, clear_avg_price) {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    let grid_total_hold = 0;
    let grid_total_cost = 0;
    let grid_empty_income = 0;
    let grid_clear_income = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith(grid_type)) {
        const grid_hold = Number(this.holding_record[idx][4]);
        const grid_cost = Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
        grid_total_hold += grid_hold;
        grid_total_cost += grid_cost;
        let grid_row = this.FindTradingGridRow(this.holding_record[idx][2]);
        const empty_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * empty_price - grid_cost;
        grid_empty_income += empty_income;
        const clear_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * clear_avg_price - grid_cost;
        grid_clear_income += clear_income;
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    this.holding_analysis.push([
      grid_type,
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
  }
  CalcTradingIncome(title_txt, slump_pct, empty_price, clear_avg_price, clear_price, need_slump = true) {
    let total_cost = this.total_cost;
    let total_count = this.total_hold;
    let empty_cost = this.total_cost;
    let empty_count = this.total_hold;
    let clear_income_max = 0;
    let total_sell_cost = 0;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.trading_table.forEach((row, i) => {
      if (this.trading_table[i][0].startsWith("\u5229\u6DA6")) {
        clear_income_max = clear_income_max + Number(this.trading_table[i][9]);
      } else {
        if (this.buy_grid_record.includes(this.trading_table[i][0])) {
          empty_cost = empty_cost - Number(row[9]);
          empty_count = empty_count - Number(row[8]);
          clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
          total_sell_cost = total_sell_cost + Number(row[9]);
        } else {
          if (i > 0 && ToNumber(row[1]) >= slump_pct && need_slump) {
            total_cost = total_cost + Number(row[5]);
            total_count = total_count + Number(row[4]);
            empty_cost = empty_cost + Number(row[5]) - Number(row[9]);
            empty_count = empty_count + Number(row[4]) - Number(row[8]);
            clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
            total_sell_cost = total_sell_cost + Number(row[9]);
          }
        }
      }
    });
    clear_income_max = Math.floor(clear_income_max - empty_cost);
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6301\u4ED3", total_count, total_cost, this.target_price * slump_pct, total_cost, this.total_cost, 0));
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6E05\u683C", empty_count, empty_cost, empty_price, total_cost, 0, total_sell_cost));
    this.trading_income.push([
      title_txt + "\u6E05\u4ED3",
      "0",
      "0",
      "0",
      "-",
      clear_price.toFixed(precision),
      String(clear_income_max),
      String(total_cost),
      String(total_sell_cost + empty_cost + clear_income_max),
      ToTradingGap(total_cost, total_sell_cost + empty_cost + clear_income_max, 2),
      "-"
    ]);
  }
  GenerateClearRow(grid_name, idx, grid_step_pct, sell_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(grid_step_pct * 100)) ** idx / 100 ** (idx - 1)) / 100;
    const sell_price = FixedPrice(this.target_price, price_step, precision);
    let clear_count = this.clear_sell_record.get(grid_name + String(idx));
    if (clear_count == void 0) {
      clear_count = 0;
    }
    return [
      grid_name + String(idx),
      ToPercent(price_step),
      "",
      "",
      "",
      "",
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count - clear_count),
      String(Math.ceil(sell_price * (sell_count - clear_count))),
      "-",
      "+" + ToPercent(grid_step_pct)
    ];
  }
  GenerateIncomeRow(grid_name, total_count, total_cost, current_price, max_cost, current_cost, sell_value) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const current_value = MyFloor(total_count * current_price, 1);
    const total_income = current_value - total_cost;
    let position = ToPercent(current_cost / max_cost);
    if (current_cost == 0) {
      position = "-";
    }
    return [
      grid_name,
      String(total_count),
      String(total_cost),
      String(current_value),
      (total_cost / Math.max(total_count, 1)).toFixed(precision),
      current_price.toFixed(precision),
      String(total_income),
      String(max_cost),
      String(sell_value + current_value),
      ToTradingGap(max_cost, total_income + max_cost, 2),
      position
    ];
  }
  CalcClearPrice(step_pct, step_idx) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(step_pct * 100)) ** step_idx / 100 ** (step_idx - 1)) / 100;
    return FixedPrice(this.target_price, price_step, precision);
  }
  IsNeedMonitor(table_index, is_sell, current_price, max_rise_pct) {
    if (is_sell) {
      const sell_price = Number(this.trading_table[table_index][7]);
      if (current_price * (1 + max_rise_pct) >= sell_price) {
        return true;
      } else {
        return false;
      }
    } else {
      const buy_price = Number(this.trading_table[table_index][3]);
      if (buy_price < this.target_price * this.grid_settings.MINIMUM_BUY_PCT) {
        return false;
      }
      if (current_price * (1 - max_rise_pct) <= buy_price) {
        return true;
      } else {
        return false;
      }
    }
  }
  IsDisableRow(table_index) {
    const price_pct = ToNumber(this.trading_table[table_index][1]);
    if (price_pct < this.grid_settings.MINIMUM_BUY_PCT) {
      return true;
    } else {
      return false;
    }
  }
  FindTradingGridRow(grid_name) {
    for (let idx = 0; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][0] == grid_name) {
        return this.trading_table[idx];
      }
    }
    return [];
  }
  SortTradingTable() {
    if (this.trading_table.length <= 1) {
      return;
    }
    this.trading_table.push(["\u505C\u6B62\u7EBF", "0%"]);
    let move_idx = 0;
    let move_row = null;
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][1] == "0%") {
        break;
      }
      if (this.IsDisableRow(idx)) {
        move_idx = idx;
        move_row = this.trading_table[move_idx];
        for (let idx2 = move_idx; idx2 < this.trading_table.length - 1; idx2++) {
          this.trading_table[idx2] = this.trading_table[idx2 + 1];
          if (this.buy_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.buy_monitor_rows[this.buy_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.buy_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.buy_triggered_rows[this.buy_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.sell_monitor_rows[this.sell_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.sell_triggered_rows[this.sell_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
        }
        this.trading_table[this.trading_table.length - 1] = move_row;
        idx--;
      }
    }
  }
};

// src/grid_trading_m1.ts
var GridTradingModeOne = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "One";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const scount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.SGRID_STEP_PCT);
    const mcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.MGRID_STEP_PCT);
    const lcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.LGRID_STEP_PCT);
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    for (let idx = 0; idx <= scount; idx++) {
      this.trading_table[idx + 1] = this.GenerateOneRow(
        SGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.SGRID_STEP_PCT,
        this.grid_settings.SGRID_RETAIN_COUNT,
        this.grid_settings.SGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < scount + 1)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    for (let idx = 1; idx <= mcount; idx++) {
      this.trading_table[scount + 1 + idx] = this.GenerateOneRow(
        MGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.MGRID_STEP_PCT,
        this.grid_settings.MGRID_RETAIN_COUNT,
        this.grid_settings.MGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + idx);
        this.sell_triggered_rows.push(scount + 1 + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + idx)) {
        this.disable_rows.push(scount + 1 + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    for (let idx = 1; idx <= lcount; idx++) {
      this.trading_table[scount + 1 + mcount + idx] = this.GenerateOneRow(
        LGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.LGRID_STEP_PCT,
        this.grid_settings.LGRID_RETAIN_COUNT,
        this.grid_settings.LGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + mcount + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + mcount + idx);
        this.sell_triggered_rows.push(scount + 1 + mcount + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + mcount, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + mcount + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + mcount + idx)) {
        this.disable_rows.push(scount + 1 + mcount + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1 + mcount) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, grid_step_pct, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price_step = 100 - idx * Math.floor(grid_step_pct * 100);
    const buy_price = FixedPrice(this.target_price, buy_price_step / 100, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price_step = buy_price_step + Math.floor(grid_step_pct * 100);
    const sell_price = FixedPrice(this.target_price, sell_price_step / 100, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercentStr(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m2.ts
var GridTradingModeTwo = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Two";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const count = Math.floor(Math.log(1 - this.grid_settings.MAX_SLUMP_PCT) / Math.log(1 - this.grid_settings.LGRID_STEP_PCT)) + 1;
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let idx = 0;
    let max_slump_pct = Math.round((1 - this.grid_settings.MAX_SLUMP_PCT) * 100);
    let sell_price_step = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let i = 0; i < count; i++) {
      let ti = 1;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = first_step;
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[idx + 1] = this.GenerateOneRow(
          SGRID_TYPE_NAME_STR,
          idx,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.SGRID_RETAIN_COUNT,
          this.grid_settings.SGRID_ADD_PCT
        );
        if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
          this.buy_triggered_rows.push(idx + 1);
          this.sell_triggered_rows.push(idx + 1);
        }
        if (this.IsDisableRow(idx + 1)) {
          this.disable_rows.push(idx + 1);
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.SGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.trading_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.trading_table.length;
    idx = 0;
    sell_price_step = 1;
    for (let i = 0; i < count; i++) {
      let ti = 2;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = Math.round(first_step * (1 - this.grid_settings.MGRID_STEP_PCT));
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          MGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.MGRID_RETAIN_COUNT,
          this.grid_settings.MGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.MGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.trading_table.length;
    idx = 0;
    for (let i = 0; i < count; i++) {
      sell_price_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i)) / 100;
      const step_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      if (step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          LGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.LGRID_RETAIN_COUNT,
          this.grid_settings.LGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, buy_price_step, sell_price_step, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, buy_price_step, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, sell_price_step, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercent(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m3.ts
var GridTradingModeThree = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Three";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let grid_sell_pct = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let idx = 0; idx < this.sgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.sgrid_step_table[idx][1]);
      this.trading_table[idx + 1] = this.GenerateOneRow(
        this.sgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.sgrid_step_table[idx][2]),
        Number(this.sgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.sgrid_step_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.sgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.MGRID_STEP_PCT;
    for (let idx = 0; idx < this.mgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.mgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.mgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.mgrid_step_table[idx][2]),
        Number(this.mgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.sgrid_step_table.length + this.mgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.LGRID_STEP_PCT;
    for (let idx = 0; idx < this.lgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.lgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.lgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.lgrid_step_table[idx][2]),
        Number(this.lgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, grid_buy_pct, grid_sell_pct, grid_add_pct, grid_retain_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, grid_buy_pct, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, grid_sell_pct, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name,
      ToPercent(grid_buy_pct),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/plugin_env.ts
var FETCH_CURRENT_PRICE = "fetch_current_price";
var PluginEnv = class {
  constructor() {
    this.is_settings_changed = false;
    this.base_settings = new PluginBaseSettings();
    this.grid_settings = new GridTradingSettings();
    this.grid_trading_dict = /* @__PURE__ */ new Map();
    this.stock_remote_price_dict = /* @__PURE__ */ new Map();
    this.event_callback_dict = /* @__PURE__ */ new Map();
    this._event_guid = 0;
  }
  GetAPILisence() {
    return this.base_settings.DATA_API_LICENCE;
  }
  GetStockRemotePrice(stock_no) {
    const price = this.stock_remote_price_dict.get(stock_no);
    if (price != void 0) {
      return price;
    } else {
      return -1;
    }
  }
  GetGridTradingTypeByString(mode) {
    if (mode == "mode_two") {
      return GridTradingModeTwo;
    }
    if (mode == "mode_three") {
      return GridTradingModeThree;
    }
    return GridTradingModeOne;
  }
  GetAndGenGridTrading(grid_name, mode) {
    let grid_trading = this.grid_trading_dict.get(grid_name);
    const trading_mode = this.GetGridTradingTypeByString(mode);
    if (grid_trading instanceof trading_mode) {
      return grid_trading;
    }
    grid_trading = new trading_mode(this);
    this.grid_trading_dict.set(grid_name, grid_trading);
    return grid_trading;
  }
  UnserializedSettings(data) {
    const lines = data.split("\n");
    if (lines.length <= 0) {
      return;
    }
    UnpackSettings(this.base_settings, lines);
    UnpackSettings(this.grid_settings, lines);
  }
  SerializedSettings() {
    return PackSettings(this.base_settings) + PackSettings(this.grid_settings);
  }
  PublishEvent(event_name) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      return;
    }
    for (let [guid, event_cb] of cb_dict) {
      try {
        event_cb();
      } catch (e) {
        ;
      }
    }
  }
  SubscribeEvent(event_name, event_cb) {
    const guid = this.GenGUID();
    let cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      cb_dict = /* @__PURE__ */ new Map();
      this.event_callback_dict.set(event_name, cb_dict);
    }
    cb_dict.set(guid, event_cb);
    return guid;
  }
  UnsubscribeEvent(event_name, event_guid) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0 || !cb_dict.has(event_guid)) {
      return false;
    }
    return cb_dict.delete(event_guid);
  }
  GenGUID() {
    this._event_guid++;
    return this._event_guid;
  }
};

// src/command_util.ts
var GridCommand = class {
  constructor() {
    this.command = "none";
    this.command_type = "grid";
  }
};
function ExcuteGridCommand(cmd_str) {
  const strs = cmd_str.split(" ");
  const command = new GridCommand();
  command.command = strs[0];
  command.raw_command_text = cmd_str;
  if (command.command == "add_record") {
    command.command_param1 = strs[1];
    AddGridRecord(command);
  }
  if (command.command == "del_record") {
    command.command_param1 = strs[1];
    DelGridRecord(command);
  }
  return command;
}
function AddGridRecord(command) {
  const sub_strs = command.command_param1.split(",");
  if (sub_strs.length != 5) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (sub_strs[0] != "BUY" && sub_strs[0] != "SELL" && sub_strs[0] != "SHARE") {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (!sub_strs[2].startsWith("\u5C0F\u7F51") && !sub_strs[2].startsWith("\u4E2D\u7F51") && !sub_strs[2].startsWith("\u5927\u7F51") && !sub_strs[2].startsWith("\u7EA2\u5229") && !sub_strs[2].startsWith("\u5229\u6DA6")) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  command.error_code = 0;
  command.data_result_str = "\n" + command.command_param1;
  return true;
}
function DelGridRecord(command) {
  if (IsNumeric(command.command_param1)) {
    command.error_code = 0;
    command.data_result_num = Number(command.command_param1);
  } else {
    command.error_code = -1;
    command.error_msg = "invalid param";
  }
}

// src/grid_view.ts
var VIEW_TYPE_GTV = "gtv-view";
var GTVView = class extends import_obsidian2.TextFileView {
  constructor(leaf, plugin_env) {
    super(leaf);
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.view_guid = plugin_env.GenGUID();
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTV;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.command_btn_el = div.createEl("button");
    this.command_btn_el.setText("Excute");
    this.command_btn_el.onClickEvent((ev) => {
      this.OnClickAddRecordBtn(ev, this.command_input_el);
    });
    this.command_input_el = div.createEl("input");
    this.command_input_el.empty();
    this.command_input_el.size = 70;
    this.command_input_el.placeholder = "Input your command";
    div = this.contentEl.createEl("div");
    this.stock_tile_el = div.createEl("h1");
    this.stock_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.param_title_el = div.createEl("h1");
    this.param_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.trading_title_el = div.createEl("h1");
    this.trading_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.analysis_title_el = div.createEl("h1");
    this.analysis_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.record_title_el = div.createEl("h1");
    this.record_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  OnClickAddRecordBtn(ev, input_el) {
    try {
      const text = input_el.value;
      const grid_cmd = ExcuteGridCommand(text);
      if (grid_cmd.error_code == 0) {
        if (grid_cmd.command == "add_record") {
          this.data = this.data + grid_cmd.data_result_str;
          this.setViewData(this.data, false);
        }
        if (grid_cmd.command == "del_record") {
          const lines = this.data.split("\n");
          let count = 0;
          let index = 0;
          for (index = 0; index < lines.length; index++) {
            if (lines[index].startsWith("BUY,") || lines[index].startsWith("SELL,")) {
              count++;
            }
            if (count == grid_cmd.data_result_num) {
              break;
            }
          }
          if (index < lines.length) {
            lines.splice(index, 1);
          }
          this.data = lines.join("\n");
          this.setViewData(this.data, false);
        }
      }
    } catch (e) {
      DebugLog("Command has error ", e);
    }
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.stock_tile_el.setText("\u672A\u77E5\u6807\u7684");
    this.stock_table_el.empty();
    this.param_title_el.setText("\u7F51\u683C\u53C2\u6570");
    this.param_table_el.empty();
    this.trading_title_el.setText("\u4EA4\u6613\u7F51\u683C");
    this.trading_table_el.empty();
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.income_title_el.setText("\u6536\u76CA\u5206\u6790");
    this.income_table_el.empty();
    this.analysis_title_el.setText("\u56DE\u64A4\u5206\u6790");
    this.analysis_table_el.empty();
    this.record_title_el.setText("\u4EA4\u6613\u8BB0\u5F55");
    this.record_table_el.empty();
    if (this.file != null) {
      const mode_str = this.data.split("\n")[0].split(",")[0];
      const grid_trading = this.plugin_env.GetAndGenGridTrading(this.file.name, mode_str);
      grid_trading.InitGridTrading(this.data);
      this.stock_tile_el.setText(grid_trading.stock_name);
      this.DisplayTable(grid_trading, this.stock_table_el, grid_trading.stock_table, false);
      this.DisplayTable(grid_trading, this.param_table_el, grid_trading.param_table, false);
      this.DisplayTable(grid_trading, this.trading_table_el, grid_trading.trading_table, true);
      this.DisplayTable(grid_trading, this.holding_table_el, grid_trading.holding_analysis, false);
      this.DisplayTable(grid_trading, this.income_table_el, grid_trading.trading_income, false);
      this.DisplayTable(grid_trading, this.analysis_table_el, grid_trading.trading_analysis, false);
      this.DisplayTable(grid_trading, this.record_table_el, grid_trading.trading_record, false);
    }
  }
  DisplayTable(grid_trading, table_el, table, is_color) {
    try {
      const table_body = table_el.createEl("tbody");
      table.forEach((row, i) => {
        const table_row = table_body.createEl("tr");
        row.forEach((cell, j) => {
          const table_cell = table_row.createEl("td", { text: cell, attr: { "align": "right" } });
          if (is_color && i > 0) {
            if (j <= 5) {
              if (grid_trading.buy_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_TRIGGERED);
              }
              if (grid_trading.buy_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_MONITOR);
              }
            } else {
              if (grid_trading.sell_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_TRIGGERED);
              }
              if (grid_trading.sell_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_MONITOR);
              }
            }
          }
        });
      });
    } catch (error) {
      DebugLog("DisplayTable error: ", error);
    }
  }
};

// src/grid_overview.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_GTO = "gto-view";
var GTOView = class extends import_obsidian3.TextFileView {
  constructor(leaf, vault, plugin_env) {
    super(leaf);
    this.vault = vault;
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.debug_log = [];
    this.stock_overview = [];
    this.custom_stock_overview = [];
    this.income_overview = [];
    this.holding_overview = [];
  }
  ReadCustomStock() {
    this.holding_overview = [["\u7B79\u7801\u7C7B\u578B", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]];
    this.holding_overview.push(["\u603B\u989D", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5C0F\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u4E2D\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5927\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u7D2F\u79EF", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u8865\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview = [["", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]];
    this.income_overview.push(["\u7D2F\u79EF\u7B79\u7801", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u4ED3", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    const stock_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u9996\u7F51\u76EE\u6807\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u4EF7\u683C\u767E\u5206\u4F4D", "\u6301\u4ED3\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u76C8\u4E8F\u6BD4\u7387", "\u56DE\u8C03\u4ED3\u4F4D"]];
    let buy_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let sell_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let passive_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u5F53\u524D\u8DCC\u5E45", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u6DA8\u5E45"]];
    let active_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EA4\u6613\u65E5\u671F", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u6536\u76CA", "\u5356\u51FA\u4EFD\u6570", "\u7D2F\u79EF\u7B79\u7801"]];
    const grid_folder = this.vault.getAbstractFileByPath("GridTrading");
    let grid_file_names = [];
    if (grid_folder instanceof import_obsidian3.TFolder) {
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian3.TFile && grid_file.name.endsWith(".gtv")) {
          grid_file_names.push(grid_file.name);
        }
      }
    }
    grid_file_names.sort();
    for (let idx = 0; idx < grid_file_names.length; idx++) {
      const grid_trading = this.plugin_env.grid_trading_dict.get(grid_file_names[idx]);
      if (grid_trading instanceof GridTrading && grid_trading.IsStock() && !grid_trading.is_debug) {
        grid_trading.InitTradingOverview();
        stock_table.push(grid_trading.stock_overview);
        buy_table = buy_table.concat(grid_trading.stock_buy_overview);
        sell_table = sell_table.concat(grid_trading.stock_sell_overview);
        passive_table = passive_table.concat(grid_trading.stock_passive_filled_record);
        active_table = active_table.concat(grid_trading.stock_active_filled_record);
        const trading_income = grid_trading.trading_income;
        for (let idx2 = 1; idx2 <= 10; idx2++) {
          this.income_overview[idx2][1] = StringPlus(this.income_overview[idx2][1], trading_income[idx2][2], 1);
          this.income_overview[idx2][2] = StringPlus(this.income_overview[idx2][2], trading_income[idx2][3], 1);
          this.income_overview[idx2][3] = StringPlus(this.income_overview[idx2][3], trading_income[idx2][6], 1);
          this.income_overview[idx2][4] = StringPlus(this.income_overview[idx2][4], trading_income[idx2][7], 1);
          this.income_overview[idx2][5] = StringPlus(this.income_overview[idx2][5], trading_income[idx2][8], 1);
        }
        const trading_holding = grid_trading.holding_analysis;
        for (let idx2 = 1; idx2 <= 6; idx2++) {
          this.holding_overview[idx2][1] = StringPlus(this.holding_overview[idx2][1], trading_holding[idx2][2], 1);
          this.holding_overview[idx2][2] = StringPlus(this.holding_overview[idx2][2], trading_holding[idx2][3], 1);
          this.holding_overview[idx2][3] = StringPlus(this.holding_overview[idx2][3], trading_holding[idx2][6], 1);
          this.holding_overview[idx2][4] = StringPlus(this.holding_overview[idx2][4], trading_holding[idx2][7], 1);
          this.holding_overview[idx2][5] = StringPlus(this.holding_overview[idx2][5], trading_holding[idx2][8], 1);
        }
      }
    }
    let current_cost = Number(this.income_overview[2][1]);
    let current_hold = Number(this.income_overview[2][2]);
    for (let idx = 1; idx <= 10; idx++) {
      this.income_overview[idx][6] = ToPercent(Number(this.income_overview[idx][3]) / Number(this.income_overview[idx][4]), 2);
      if (this.income_overview[idx][7] != "-") {
        this.income_overview[idx][7] = ToPercent(current_cost / Number(this.income_overview[idx][4]));
      }
    }
    for (let idx = 1; idx <= 6; idx++) {
      this.holding_overview[idx][6] = ProportionPctStr(Number(this.holding_overview[idx][2]), current_hold, 2);
      this.holding_overview[idx][7] = ProportionPctStr(Number(this.holding_overview[idx][1]), current_cost, 2);
    }
    this.custom_stock_overview = [...stock_table, ...buy_table, ...sell_table];
    this.stock_filled_overview = [...passive_table, ...active_table];
  }
  SumupAllStock() {
    this.stock_overview = [];
    let stock_count = 0;
    let buy_monitor_count = 0;
    let sell_monitor_count = 0;
    let _3_buy_cost = 0;
    let _5_buy_cost = 0;
    let total_buy_cost = 0;
    let _3_sell_gain = 0;
    let _5_sell_gain = 0;
    let total_sell_gain = 0;
    for (let idx = 0; idx < this.custom_stock_overview.length; idx++) {
      const stock = this.custom_stock_overview[idx];
      if (stock[0] == GRID_COLOR_STOCK_OVERVIEW) {
        stock_count++;
      }
      if (stock[0] == GRID_COLOR_SELL_OVERVIEW) {
        sell_monitor_count++;
        total_sell_gain += Number(stock[8]);
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap < 3) {
          _3_sell_gain += Number(stock[8]);
        }
        if (trading_gap < 5) {
          _5_sell_gain += Number(stock[8]);
        }
      }
      if (stock[0] == GRID_COLOR_BUY_OVERVIEW) {
        buy_monitor_count++;
        total_buy_cost += Number(stock[8]);
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap > -3) {
          _3_buy_cost += Number(stock[8]);
        }
        if (trading_gap > -5) {
          _5_buy_cost += Number(stock[8]);
        }
      }
    }
    this.stock_overview.push(["\u6807\u7684\u603B\u6570", "\u5356\u51FA\u76D1\u63A7", "\u4E70\u5165\u76D1\u63A7", "\u4E70\u5165\u603B\u989D", "-3%\u5185\u4E70\u5165\u603B\u989D", "-5%\u5185\u4E70\u5165\u603B\u989D", "+3%\u5185\u5356\u51FA\u603B\u989D", "+5%\u5185\u5356\u51FA\u603B\u989D"]);
    this.stock_overview.push([String(stock_count), String(sell_monitor_count), String(buy_monitor_count), String(total_buy_cost), String(_3_buy_cost), String(_5_buy_cost), String(_3_sell_gain), String(_5_sell_gain)]);
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTO;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.overview_title_el = div.createEl("h1");
    this.overview_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.custom_title_el = div.createEl("h1");
    this.custom_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.filled_tile_el = div.createEl("h1");
    this.filled_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.ReadCustomStock();
    this.SumupAllStock();
    this.overview_title_el.setText("\u7F51\u683C\u603B\u89C8");
    this.overview_table_el.empty();
    this.DisplayTable(this.overview_table_el, this.stock_overview, false);
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.DisplayTable(this.holding_table_el, this.holding_overview, false);
    this.income_title_el.setText("\u76C8\u4E8F\u603B\u89C8");
    this.income_table_el.empty();
    this.DisplayTable(this.income_table_el, this.income_overview, false);
    this.custom_title_el.setText("\u6211\u7684\u7F51\u683C");
    this.custom_table_el.empty();
    this.DisplayTable(this.custom_table_el, this.custom_stock_overview, true);
    this.filled_tile_el.setText("\u8865\u4ED3\u4FE1\u606F");
    this.filled_table_el.empty();
    this.DisplayTable(this.filled_table_el, this.stock_filled_overview, true);
  }
  DisplayTable(table_el, table, is_color) {
    const table_body = table_el.createEl("tbody");
    table.forEach((row, i) => {
      const table_row = table_body.createEl("tr");
      row.forEach((cell, j) => {
        if (is_color) {
          if (j > 0) {
            table_row.createEl("td", { text: cell, attr: { "bgColor": table[i][0], "align": "right" } });
          }
        } else {
          table_row.createEl("td", { text: cell, attr: { "align": "right" } });
        }
      });
    });
  }
};

// src/cor_view.ts
var import_obsidian4 = require("obsidian");
var VIEW_TYPE_COR = "cor-view";
var CorView = class extends import_obsidian4.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_COR;
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.data_el = div.createEl("h1");
  }
  async onClose() {
    this.contentEl.empty();
  }
  Refresh() {
    this.data_el.setText(this.data);
  }
};

// src/main.ts
var TradingStrategy = class extends import_obsidian5.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.plugin_env = new PluginEnv();
    this.interval_callback_id = -1;
  }
  async onload() {
    await this.LoadSettingsFromDisk();
    const ribbonIconEl = this.addRibbonIcon("dice", "GridTrading", (evt) => {
      this.FetchAllStockCurrentPrice();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new TradingStrategySettingTab(this.app, this, this.plugin_env));
    this.interval_callback_id = window.setInterval(() => this.FetchAllStockCurrentPrice(), 1 * 1e3);
    this.registerInterval(this.interval_callback_id);
    this.registerView(VIEW_TYPE_GTV, (leaf) => {
      const gtv_view = new GTVView(leaf, this.plugin_env);
      return gtv_view;
    });
    this.registerView(VIEW_TYPE_GTO, (leaf) => {
      const gto_view = new GTOView(leaf, this.app.vault, this.plugin_env);
      return gto_view;
    });
    this.registerView(VIEW_TYPE_COR, (leaf) => {
      const cor_view = new CorView(leaf);
      return cor_view;
    });
    this.registerExtensions(["gtv"], VIEW_TYPE_GTV);
    this.registerExtensions(["gto"], VIEW_TYPE_GTO);
    this.registerExtensions(["cor"], VIEW_TYPE_COR);
  }
  onunload() {
  }
  async LoadSettingsFromDisk() {
    const setting_data = await this.loadData();
    if (setting_data != null) {
      this.plugin_env.UnserializedSettings(setting_data);
    }
  }
  SaveSettingsToDisk() {
    DebugLog("MAX_SLUMP_PCT1 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    const setting_data = this.plugin_env.SerializedSettings();
    DebugLog("MAX_SLUMP_PCT2 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    DebugLog(setting_data);
    this.saveData(setting_data);
  }
  async FetchAllStockCurrentPrice() {
    const api_licence = this.plugin_env.GetAPILisence();
    const grid_folder = this.app.vault.getAbstractFileByPath("GridTrading");
    if (grid_folder instanceof import_obsidian5.TFolder) {
      if (this.interval_callback_id > 0) {
        window.clearInterval(this.interval_callback_id);
        this.interval_callback_id = -1;
      }
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gtv")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const mode_str = content.split("\n")[0].split(",")[0];
          let grid_trading = this.plugin_env.GetAndGenGridTrading(grid_file.name, mode_str);
          grid_trading.InitGridTrading(content);
          if (grid_trading.is_debug) {
            continue;
          }
          let current_price = -1;
          if (grid_file.name.includes("LOF")) {
            current_price = await GetLOFCurrentPrice(grid_trading.market_code + String(grid_trading.target_stock), api_licence);
            current_price = Number(current_price);
          } else {
            current_price = await GetETFCurrentPrice(grid_trading.market_code + String(grid_trading.target_stock), api_licence);
            current_price = Number(current_price);
            await sleep(10);
          }
          this.plugin_env.stock_remote_price_dict.set(String(grid_trading.target_stock), current_price);
          grid_trading.UpdateRemotePrice(current_price);
        }
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gto")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const lines = content.split("\n");
          for (let index2 = 0; index2 < lines.length; index2++) {
            const strs = lines[index2].split(",");
            if (strs[0] != "BUY" && strs[0] != "SELL") {
              let current_price = await GetETFCurrentPrice(strs[2] + strs[0], api_licence);
              current_price = Number(current_price);
              this.plugin_env.stock_remote_price_dict.set(strs[0], current_price);
              await sleep(1e3);
            }
          }
        }
      }
      this.plugin_env.PublishEvent(FETCH_CURRENT_PRICE);
    }
  }
};
var TradingStrategySettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin, plugin_env) {
    super(app, plugin);
    this.plugin = plugin;
    this.plugin_env = plugin_env;
  }
  hide() {
    if (this.plugin_env.is_settings_changed) {
      this.plugin.SaveSettingsToDisk();
      this.plugin_env.is_settings_changed = false;
    }
    super.hide();
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h1").setText("TradingStrategy");
    const base_div = this.containerEl.createEl("div");
    base_div.createEl("h2").setText("\u57FA\u7840\u914D\u7F6E");
    let bkey;
    for (bkey in this.plugin_env.base_settings) {
      const key_name = SETTING_NAME.get(bkey);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(base_div).setName(key_name);
        setting.addText((text_comp, setting_key = bkey) => {
          text_comp.setValue(String(GetSettingValue(this.plugin_env.base_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.base_settings, setting_key, value);
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
    const grid_div = this.containerEl.createEl("div");
    grid_div.createEl("h2").setText("\u7F51\u683C\u914D\u7F6E");
    let key;
    for (key in this.plugin_env.grid_settings) {
      const key_name = SETTING_NAME.get(key);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(grid_div).setName(key_name);
        setting.addText((text_comp, setting_key = key) => {
          DebugLog("add Setting Key: ", setting_key);
          text_comp.setValue(String(GetSettingValue(this.plugin_env.grid_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.grid_settings, setting_key, Number(value));
            DebugLog("SetValue succeed ", setting_key, GetSettingValue(this.plugin_env.grid_settings, setting_key));
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3RzLW1kNS9kaXN0L21kNS5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvbGFuZ19zdHIudHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9yZW1vdGVfdXRpbC50cyIsICJzcmMvZ3JpZF92aWV3LnRzIiwgInNyYy9teW1hdGgudHMiLCAic3JjL2dyaWRfdHJhZGluZy50cyIsICJzcmMvZ3JpZF90cmFkaW5nX20xLnRzIiwgInNyYy9ncmlkX3RyYWRpbmdfbTIudHMiLCAic3JjL2dyaWRfdHJhZGluZ19tMy50cyIsICJzcmMvcGx1Z2luX2Vudi50cyIsICJzcmMvY29tbWFuZF91dGlsLnRzIiwgInNyYy9ncmlkX292ZXJ2aWV3LnRzIiwgInNyYy9jb3Jfdmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuXG5UeXBlU2NyaXB0IE1kNVxuPT09PT09PT09PT09PT1cblxuQmFzZWQgb24gd29yayBieVxuKiBKb3NlcGggTXllcnM6IGh0dHA6Ly93d3cubXllcnNkYWlseS5vcmcvam9zZXBoL2phdmFzY3JpcHQvbWQ1LXRleHQuaHRtbFxuKiBBbmRyXHUwMEU5IENydXo6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYXRhem9yL1NwYXJrTUQ1XG4qIFJheW1vbmQgSGlsbDogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwveWFtZDUuanNcblxuRWZmZWN0aXZlbHkgYSBUeXBlU2NyeXB0IHJlLXdyaXRlIG9mIFJheW1vbmQgSGlsbCBKUyBMaWJyYXJ5XG5cblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKEMpIDIwMTQgUmF5bW9uZCBIaWxsXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuXG5cbiAgICAgICAgICAgIERPIFdIQVQgWU9VIFdBTlQgVE8gUFVCTElDIExJQ0VOU0VcbiAgICAgICAgICAgICAgICAgICAgVmVyc2lvbiAyLCBEZWNlbWJlciAyMDA0XG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUgQW5kclx1MDBFOSBDcnV6IDxhbWRmY3J1ekBnbWFpbC5jb20+XG5cbiBFdmVyeW9uZSBpcyBwZXJtaXR0ZWQgdG8gY29weSBhbmQgZGlzdHJpYnV0ZSB2ZXJiYXRpbSBvciBtb2RpZmllZFxuIGNvcGllcyBvZiB0aGlzIGxpY2Vuc2UgZG9jdW1lbnQsIGFuZCBjaGFuZ2luZyBpdCBpcyBhbGxvd2VkIGFzIGxvbmdcbiBhcyB0aGUgbmFtZSBpcyBjaGFuZ2VkLlxuXG4gICAgICAgICAgICBETyBXSEFUIFlPVSBXQU5UIFRPIFBVQkxJQyBMSUNFTlNFXG4gICBURVJNUyBBTkQgQ09ORElUSU9OUyBGT1IgQ09QWUlORywgRElTVFJJQlVUSU9OIEFORCBNT0RJRklDQVRJT05cblxuICAwLiBZb3UganVzdCBETyBXSEFUIFlPVSBXQU5UIFRPLlxuXG5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1kNSA9IHZvaWQgMDtcbjtcbnZhciBNZDUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWQ1KCkge1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgSW50MzJBcnJheSg0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDY4KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyOCA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlciwgMCwgNjgpO1xuICAgICAgICB0aGlzLl9idWZmZXIzMiA9IG5ldyBVaW50MzJBcnJheSh0aGlzLl9idWZmZXIsIDAsIDE3KTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBNZDUuaGFzaFN0ciA9IGZ1bmN0aW9uIChzdHIsIHJhdykge1xuICAgICAgICBpZiAocmF3ID09PSB2b2lkIDApIHsgcmF3ID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMub25lUGFzc0hhc2hlclxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC5hcHBlbmRTdHIoc3RyKVxuICAgICAgICAgICAgLmVuZChyYXcpO1xuICAgIH07XG4gICAgTWQ1Lmhhc2hBc2NpaVN0ciA9IGZ1bmN0aW9uIChzdHIsIHJhdykge1xuICAgICAgICBpZiAocmF3ID09PSB2b2lkIDApIHsgcmF3ID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMub25lUGFzc0hhc2hlclxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC5hcHBlbmRBc2NpaVN0cihzdHIpXG4gICAgICAgICAgICAuZW5kKHJhdyk7XG4gICAgfTtcbiAgICBNZDUuX2hleCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBoYyA9IE1kNS5oZXhDaGFycztcbiAgICAgICAgdmFyIGhvID0gTWQ1LmhleE91dDtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gaSAqIDg7XG4gICAgICAgICAgICBuID0geFtpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCA4OyBqICs9IDIpIHtcbiAgICAgICAgICAgICAgICBob1tvZmZzZXQgKyAxICsgal0gPSBoYy5jaGFyQXQobiAmIDB4MEYpO1xuICAgICAgICAgICAgICAgIG4gPj4+PSA0O1xuICAgICAgICAgICAgICAgIGhvW29mZnNldCArIDAgKyBqXSA9IGhjLmNoYXJBdChuICYgMHgwRik7XG4gICAgICAgICAgICAgICAgbiA+Pj49IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvLmpvaW4oJycpO1xuICAgIH07XG4gICAgTWQ1Ll9tZDVjeWNsZSA9IGZ1bmN0aW9uICh4LCBrKSB7XG4gICAgICAgIHZhciBhID0geFswXTtcbiAgICAgICAgdmFyIGIgPSB4WzFdO1xuICAgICAgICB2YXIgYyA9IHhbMl07XG4gICAgICAgIHZhciBkID0geFszXTtcbiAgICAgICAgLy8gZmYoKVxuICAgICAgICBhICs9IChiICYgYyB8IH5iICYgZCkgKyBrWzBdIC0gNjgwODc2OTM2IHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDcgfCBhID4+PiAyNSkgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGIgfCB+YSAmIGMpICsga1sxXSAtIDM4OTU2NDU4NiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzJdICsgNjA2MTA1ODE5IHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE3IHwgYyA+Pj4gMTUpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgJiBkIHwgfmMgJiBhKSArIGtbM10gLSAxMDQ0NTI1MzMwIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIyIHwgYiA+Pj4gMTApICsgYyB8IDA7XG4gICAgICAgIGEgKz0gKGIgJiBjIHwgfmIgJiBkKSArIGtbNF0gLSAxNzY0MTg4OTcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzVdICsgMTIwMDA4MDQyNiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzZdIC0gMTQ3MzIzMTM0MSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNyB8IGMgPj4+IDE1KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgZCB8IH5jICYgYSkgKyBrWzddIC0gNDU3MDU5ODMgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjIgfCBiID4+PiAxMCkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiAmIGMgfCB+YiAmIGQpICsga1s4XSArIDE3NzAwMzU0MTYgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzldIC0gMTk1ODQxNDQxNyB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzEwXSAtIDQyMDYzIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE3IHwgYyA+Pj4gMTUpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgJiBkIHwgfmMgJiBhKSArIGtbMTFdIC0gMTk5MDQwNDE2MiB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMiB8IGIgPj4+IDEwKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgYyB8IH5iICYgZCkgKyBrWzEyXSArIDE4MDQ2MDM2ODIgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzEzXSAtIDQwMzQxMTAxIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDEyIHwgZCA+Pj4gMjApICsgYSB8IDA7XG4gICAgICAgIGMgKz0gKGQgJiBhIHwgfmQgJiBiKSArIGtbMTRdIC0gMTUwMjAwMjI5MCB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNyB8IGMgPj4+IDE1KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgZCB8IH5jICYgYSkgKyBrWzE1XSArIDEyMzY1MzUzMjkgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjIgfCBiID4+PiAxMCkgKyBjIHwgMDtcbiAgICAgICAgLy8gZ2coKVxuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzFdIC0gMTY1Nzk2NTEwIHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDUgfCBhID4+PiAyNykgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGMgfCBiICYgfmMpICsga1s2XSAtIDEwNjk1MDE2MzIgfCAwO1xuICAgICAgICBkID0gKGQgPDwgOSB8IGQgPj4+IDIzKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYiB8IGEgJiB+YikgKyBrWzExXSArIDY0MzcxNzcxMyB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzBdIC0gMzczODk3MzAyIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIwIHwgYiA+Pj4gMTIpICsgYyB8IDA7XG4gICAgICAgIGEgKz0gKGIgJiBkIHwgYyAmIH5kKSArIGtbNV0gLSA3MDE1NTg2OTEgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYyB8IGIgJiB+YykgKyBrWzEwXSArIDM4MDE2MDgzIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDkgfCBkID4+PiAyMykgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCAmIGIgfCBhICYgfmIpICsga1sxNV0gLSA2NjA0NzgzMzUgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTQgfCBjID4+PiAxOCkgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoYyAmIGEgfCBkICYgfmEpICsga1s0XSAtIDQwNTUzNzg0OCB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMCB8IGIgPj4+IDEyKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzldICsgNTY4NDQ2NDM4IHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDUgfCBhID4+PiAyNykgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGMgfCBiICYgfmMpICsga1sxNF0gLSAxMDE5ODAzNjkwIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDkgfCBkID4+PiAyMykgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCAmIGIgfCBhICYgfmIpICsga1szXSAtIDE4NzM2Mzk2MSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzhdICsgMTE2MzUzMTUwMSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMCB8IGIgPj4+IDEyKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzEzXSAtIDE0NDQ2ODE0NjcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYyB8IGIgJiB+YykgKyBrWzJdIC0gNTE0MDM3ODQgfCAwO1xuICAgICAgICBkID0gKGQgPDwgOSB8IGQgPj4+IDIzKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYiB8IGEgJiB+YikgKyBrWzddICsgMTczNTMyODQ3MyB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzEyXSAtIDE5MjY2MDc3MzQgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjAgfCBiID4+PiAxMikgKyBjIHwgMDtcbiAgICAgICAgLy8gaGgoKVxuICAgICAgICBhICs9IChiIF4gYyBeIGQpICsga1s1XSAtIDM3ODU1OCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA0IHwgYSA+Pj4gMjgpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGEgXiBiIF4gYykgKyBrWzhdIC0gMjAyMjU3NDQ2MyB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMSB8IGQgPj4+IDIxKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkIF4gYSBeIGIpICsga1sxMV0gKyAxODM5MDMwNTYyIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzE0XSAtIDM1MzA5NTU2IHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiBeIGMgXiBkKSArIGtbMV0gLSAxNTMwOTkyMDYwIHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDQgfCBhID4+PiAyOCkgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSBeIGIgXiBjKSArIGtbNF0gKyAxMjcyODkzMzUzIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDExIHwgZCA+Pj4gMjEpICsgYSB8IDA7XG4gICAgICAgIGMgKz0gKGQgXiBhIF4gYikgKyBrWzddIC0gMTU1NDk3NjMyIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzEwXSAtIDEwOTQ3MzA2NDAgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjMgfCBiID4+PiA5KSArIGMgfCAwO1xuICAgICAgICBhICs9IChiIF4gYyBeIGQpICsga1sxM10gKyA2ODEyNzkxNzQgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNCB8IGEgPj4+IDI4KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhIF4gYiBeIGMpICsga1swXSAtIDM1ODUzNzIyMiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMSB8IGQgPj4+IDIxKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkIF4gYSBeIGIpICsga1szXSAtIDcyMjUyMTk3OSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNiB8IGMgPj4+IDE2KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjIF4gZCBeIGEpICsga1s2XSArIDc2MDI5MTg5IHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiBeIGMgXiBkKSArIGtbOV0gLSA2NDAzNjQ0ODcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNCB8IGEgPj4+IDI4KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhIF4gYiBeIGMpICsga1sxMl0gLSA0MjE4MTU4MzUgfCAwO1xuICAgICAgICBkID0gKGQgPDwgMTEgfCBkID4+PiAyMSkgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCBeIGEgXiBiKSArIGtbMTVdICsgNTMwNzQyNTIwIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzJdIC0gOTk1MzM4NjUxIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgLy8gaWkoKVxuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1swXSAtIDE5ODYzMDg0NCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzddICsgMTEyNjg5MTQxNSB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1sxNF0gLSAxNDE2MzU0OTA1IHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE1IHwgYyA+Pj4gMTcpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGQgXiAoYyB8IH5hKSkgKyBrWzVdIC0gNTc0MzQwNTUgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjEgfCBiID4+PiAxMSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYyBeIChiIHwgfmQpKSArIGtbMTJdICsgMTcwMDQ4NTU3MSB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzNdIC0gMTg5NDk4NjYwNiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1sxMF0gLSAxMDUxNTIzIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE1IHwgYyA+Pj4gMTcpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGQgXiAoYyB8IH5hKSkgKyBrWzFdIC0gMjA1NDkyMjc5OSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMSB8IGIgPj4+IDExKSArIGMgfCAwO1xuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1s4XSArIDE4NzMzMTMzNTkgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNiB8IGEgPj4+IDI2KSArIGIgfCAwO1xuICAgICAgICBkICs9IChiIF4gKGEgfCB+YykpICsga1sxNV0gLSAzMDYxMTc0NCB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1s2XSAtIDE1NjAxOTgzODAgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTUgfCBjID4+PiAxNykgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoZCBeIChjIHwgfmEpKSArIGtbMTNdICsgMTMwOTE1MTY0OSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMSB8IGIgPj4+IDExKSArIGMgfCAwO1xuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1s0XSAtIDE0NTUyMzA3MCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzExXSAtIDExMjAyMTAzNzkgfCAwO1xuICAgICAgICBkID0gKGQgPDwgMTAgfCBkID4+PiAyMikgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoYSBeIChkIHwgfmIpKSArIGtbMl0gKyA3MTg3ODcyNTkgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTUgfCBjID4+PiAxNykgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoZCBeIChjIHwgfmEpKSArIGtbOV0gLSAzNDM0ODU1NTEgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjEgfCBiID4+PiAxMSkgKyBjIHwgMDtcbiAgICAgICAgeFswXSA9IGEgKyB4WzBdIHwgMDtcbiAgICAgICAgeFsxXSA9IGIgKyB4WzFdIHwgMDtcbiAgICAgICAgeFsyXSA9IGMgKyB4WzJdIHwgMDtcbiAgICAgICAgeFszXSA9IGQgKyB4WzNdIHwgMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2UgYnVmZmVyIHRvIGJlIGhhc2hlZFxuICAgICAqL1xuICAgIE1kNS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZS5zZXQoTWQ1LnN0YXRlSWRlbnRpdHkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIENoYXIgdG8gY29kZSBwb2ludCB0byB0byBhcnJheSBjb252ZXJzaW9uOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9jaGFyQ29kZUF0XG4gICAgLy8gI0V4YW1wbGUuM0FfRml4aW5nX2NoYXJDb2RlQXRfdG9faGFuZGxlX25vbi1CYXNpYy1NdWx0aWxpbmd1YWwtUGxhbmVfY2hhcmFjdGVyc19pZl90aGVpcl9wcmVzZW5jZV9lYXJsaWVyX2luX3RoZV9zdHJpbmdfaXNfdW5rbm93blxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBhIFVURi04IHN0cmluZyB0byB0aGUgaGFzaCBidWZmZXJcbiAgICAgKiBAcGFyYW0gc3RyIFN0cmluZyB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZFN0ciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIGJ1ZjggPSB0aGlzLl9idWZmZXI4O1xuICAgICAgICB2YXIgYnVmMzIgPSB0aGlzLl9idWZmZXIzMjtcbiAgICAgICAgdmFyIGJ1ZkxlbiA9IHRoaXMuX2J1ZmZlckxlbmd0aDtcbiAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA8IDEyOCkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gY29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDYpICsgMHhDMDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IGNvZGUgJiAweDNGIHwgMHg4MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPCAweEQ4MDAgfHwgY29kZSA+IDB4REJGRikge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDEyKSArIDB4RTA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gNiAmIDB4M0YpIHwgMHg4MDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IChjb2RlICYgMHgzRikgfCAweDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29kZSA9ICgoY29kZSAtIDB4RDgwMCkgKiAweDQwMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmljb2RlIHN0YW5kYXJkIHN1cHBvcnRzIGNvZGUgcG9pbnRzIHVwIHRvIFUrMTBGRkZGJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDE4KSArIDB4RjA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gMTIgJiAweDNGKSB8IDB4ODA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gNiAmIDB4M0YpIHwgMHg4MDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IChjb2RlICYgMHgzRikgfCAweDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZkxlbiA+PSA2NCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gNjQ7XG4gICAgICAgICAgICAgICAgTWQ1Ll9tZDVjeWNsZSh0aGlzLl9zdGF0ZSwgYnVmMzIpO1xuICAgICAgICAgICAgICAgIGJ1ZkxlbiAtPSA2NDtcbiAgICAgICAgICAgICAgICBidWYzMlswXSA9IGJ1ZjMyWzE2XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBidWZMZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwZW5kIGFuIEFTQ0lJIHN0cmluZyB0byB0aGUgaGFzaCBidWZmZXJcbiAgICAgKiBAcGFyYW0gc3RyIFN0cmluZyB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZEFzY2lpU3RyID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpID0gTWF0aC5taW4oc3RyLmxlbmd0aCAtIGosIDY0IC0gYnVmTGVuKTtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IHN0ci5jaGFyQ29kZUF0KGorKyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmTGVuIDwgNjQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gNjQ7XG4gICAgICAgICAgICBNZDUuX21kNWN5Y2xlKHRoaXMuX3N0YXRlLCBidWYzMik7XG4gICAgICAgICAgICBidWZMZW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IGJ1ZkxlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBlbmQgYSBieXRlIGFycmF5IHRvIHRoZSBoYXNoIGJ1ZmZlclxuICAgICAqIEBwYXJhbSBpbnB1dCBhcnJheSB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZEJ5dGVBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoIC0gaiwgNjQgLSBidWZMZW4pO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gaW5wdXRbaisrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWZMZW4gPCA2NCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCArPSA2NDtcbiAgICAgICAgICAgIE1kNS5fbWQ1Y3ljbGUodGhpcy5fc3RhdGUsIGJ1ZjMyKTtcbiAgICAgICAgICAgIGJ1ZkxlbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gYnVmTGVuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RhdGUgb2YgdGhlIGhhc2ggYnVmZmVyXG4gICAgICovXG4gICAgTWQ1LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBBcnJheS5mcm9tKHRoaXMuX2J1ZmZlcjgpKSxcbiAgICAgICAgICAgIGJ1ZmxlbjogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLl9kYXRhTGVuZ3RoLFxuICAgICAgICAgICAgc3RhdGU6IFtzWzBdLCBzWzFdLCBzWzJdLCBzWzNdXVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGhhc2ggYnVmZmVyXG4gICAgICogQHBhcmFtIHN0YXRlIE5ldyBoYXNoIGJ1ZmZlciBzdGF0ZVxuICAgICAqL1xuICAgIE1kNS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHN0YXRlLmJ1ZmZlcjtcbiAgICAgICAgdmFyIHggPSBzdGF0ZS5zdGF0ZTtcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IHN0YXRlLmJ1ZmxlbjtcbiAgICAgICAgc1swXSA9IHhbMF07XG4gICAgICAgIHNbMV0gPSB4WzFdO1xuICAgICAgICBzWzJdID0geFsyXTtcbiAgICAgICAgc1szXSA9IHhbM107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcjhbaV0gPSBidWYuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFzaCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaGFzaCBidWZmZXIgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gICAgICogQHBhcmFtIHJhdyBXaGV0aGVyIHRvIHJldHVybiB0aGUgdmFsdWUgYXMgYW4gYEludDMyQXJyYXlgXG4gICAgICovXG4gICAgTWQ1LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmIChyYXcgPT09IHZvaWQgMCkgeyByYXcgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgaSA9IChidWZMZW4gPj4gMikgKyAxO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IGJ1ZkxlbjtcbiAgICAgICAgdmFyIGRhdGFCaXRzTGVuID0gdGhpcy5fZGF0YUxlbmd0aCAqIDg7XG4gICAgICAgIGJ1ZjhbYnVmTGVuXSA9IDB4ODA7XG4gICAgICAgIGJ1ZjhbYnVmTGVuICsgMV0gPSBidWY4W2J1ZkxlbiArIDJdID0gYnVmOFtidWZMZW4gKyAzXSA9IDA7XG4gICAgICAgIGJ1ZjMyLnNldChNZDUuYnVmZmVyMzJJZGVudGl0eS5zdWJhcnJheShpKSwgaSk7XG4gICAgICAgIGlmIChidWZMZW4gPiA1NSkge1xuICAgICAgICAgICAgTWQ1Ll9tZDVjeWNsZSh0aGlzLl9zdGF0ZSwgYnVmMzIpO1xuICAgICAgICAgICAgYnVmMzIuc2V0KE1kNS5idWZmZXIzMklkZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB0aGUgZmluYWwgY29tcHV0YXRpb24gYmFzZWQgb24gdGhlIHRhaWwgYW5kIGxlbmd0aFxuICAgICAgICAvLyBCZXdhcmUgdGhhdCB0aGUgZmluYWwgbGVuZ3RoIG1heSBub3QgZml0IGluIDMyIGJpdHMgc28gd2UgdGFrZSBjYXJlIG9mIHRoYXRcbiAgICAgICAgaWYgKGRhdGFCaXRzTGVuIDw9IDB4RkZGRkZGRkYpIHtcbiAgICAgICAgICAgIGJ1ZjMyWzE0XSA9IGRhdGFCaXRzTGVuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBkYXRhQml0c0xlbi50b1N0cmluZygxNikubWF0Y2goLyguKj8pKC57MCw4fSkkLyk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsbyA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDE2KTtcbiAgICAgICAgICAgIHZhciBoaSA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDE2KSB8fCAwO1xuICAgICAgICAgICAgYnVmMzJbMTRdID0gbG87XG4gICAgICAgICAgICBidWYzMlsxNV0gPSBoaTtcbiAgICAgICAgfVxuICAgICAgICBNZDUuX21kNWN5Y2xlKHRoaXMuX3N0YXRlLCBidWYzMik7XG4gICAgICAgIHJldHVybiByYXcgPyB0aGlzLl9zdGF0ZSA6IE1kNS5faGV4KHRoaXMuX3N0YXRlKTtcbiAgICB9O1xuICAgIC8vIFByaXZhdGUgU3RhdGljIFZhcmlhYmxlc1xuICAgIE1kNS5zdGF0ZUlkZW50aXR5ID0gbmV3IEludDMyQXJyYXkoWzE3MzI1ODQxOTMsIC0yNzE3MzM4NzksIC0xNzMyNTg0MTk0LCAyNzE3MzM4NzhdKTtcbiAgICBNZDUuYnVmZmVyMzJJZGVudGl0eSA9IG5ldyBJbnQzMkFycmF5KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSk7XG4gICAgTWQ1LmhleENoYXJzID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuICAgIE1kNS5oZXhPdXQgPSBbXTtcbiAgICAvLyBQZXJtYW5lbnQgaW5zdGFuY2UgaXMgdG8gdXNlIGZvciBvbmUtY2FsbCBoYXNoaW5nXG4gICAgTWQ1Lm9uZVBhc3NIYXNoZXIgPSBuZXcgTWQ1KCk7XG4gICAgcmV0dXJuIE1kNTtcbn0oKSk7XG5leHBvcnRzLk1kNSA9IE1kNTtcbmlmIChNZDUuaGFzaFN0cignaGVsbG8nKSAhPT0gJzVkNDE0MDJhYmM0YjJhNzZiOTcxOWQ5MTEwMTdjNTkyJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWQ1IHNlbGYgdGVzdCBmYWlsZWQuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZDUuanMubWFwIiwgIi8qXHJcbiAgICBNYWluOiBcdTYzRDJcdTRFRjZcdTVCOUFcdTRFNDlcdTUzQ0FcdTRFM0JcdTkwM0JcdThGOTFcclxuICAgIFx1OEJCRVx1N0Y2RVx1OTc2Mlx1Njc3Rlx1OTAwOVx1OTg3OVxyXG4qL1xyXG5pbXBvcnQgeyBBcHAsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgUGx1Z2luTWFuaWZlc3QsIFNldHRpbmcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZ1NldHRpbmdzLCBQbHVnaW5CYXNlU2V0dGluZ3MsIFNldFNldHRpbmdWYWx1ZSwgR2V0U2V0dGluZ1ZhbHVlIH0gZnJvbSBcIi4vc2V0dGluZ3NcIlxyXG5pbXBvcnQgeyBHZXRFVEZDdXJyZW50UHJpY2UsIEdldExPRkN1cnJlbnRQcmljZSwgRGVidWdMb2cgfSBmcm9tICcuL3JlbW90ZV91dGlsJztcclxuaW1wb3J0IHsgR1RWVmlldywgVklFV19UWVBFX0dUViB9IGZyb20gXCIuL2dyaWRfdmlld1wiXHJcbmltcG9ydCB7IEdUT1ZpZXcsIFZJRVdfVFlQRV9HVE8gfSBmcm9tICcuL2dyaWRfb3ZlcnZpZXcnO1xyXG5pbXBvcnQgeyBDb3JWaWV3LCBWSUVXX1RZUEVfQ09SIH0gZnJvbSAnLi9jb3Jfdmlldyc7XHJcbmltcG9ydCB7IFBsdWdpbkVudiwgRkVUQ0hfQ1VSUkVOVF9QUklDRSB9IGZyb20gJy4vcGx1Z2luX2Vudic7XHJcbmltcG9ydCB7IFNFVFRJTkdfTkFNRSB9IGZyb20gXCIuL2xhbmdfc3RyXCJcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFkaW5nU3RyYXRlZ3kgZXh0ZW5kcyBQbHVnaW5cclxue1xyXG4gICAgcGx1Z2luX2VudjogUGx1Z2luRW52O1xyXG4gICAgaW50ZXJ2YWxfY2FsbGJhY2tfaWQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgbWFuaWZlc3QpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luX2VudiA9IG5ldyBQbHVnaW5FbnYoKTtcclxuICAgICAgICB0aGlzLmludGVydmFsX2NhbGxiYWNrX2lkID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuTG9hZFNldHRpbmdzRnJvbURpc2soKTtcclxuICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXHJcbiAgICAgICAgY29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ0dyaWRUcmFkaW5nJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGljb24uXHJcbiAgICAgICAgICAgIHRoaXMuRmV0Y2hBbGxTdG9ja0N1cnJlbnRQcmljZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFBlcmZvcm0gYWRkaXRpb25hbCB0aGluZ3Mgd2l0aCB0aGUgcmliYm9uXHJcbiAgICAgICAgcmliYm9uSWNvbkVsLmFkZENsYXNzKCdteS1wbHVnaW4tcmliYm9uLWNsYXNzJyk7XHJcblxyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUcmFkaW5nU3RyYXRlZ3lTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzLCB0aGlzLnBsdWdpbl9lbnYpKTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLkZldGNoQWxsU3RvY2tDdXJyZW50UHJpY2UoKSwgMSAqIDEwMDApO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh0aGlzLmludGVydmFsX2NhbGxiYWNrX2lkKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoVklFV19UWVBFX0dUViwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ3R2X3ZpZXcgPSBuZXcgR1RWVmlldyhsZWFmLCB0aGlzLnBsdWdpbl9lbnYpO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3R2X3ZpZXc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoVklFV19UWVBFX0dUTywgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ3RvX3ZpZXcgPSBuZXcgR1RPVmlldyhsZWFmLCB0aGlzLmFwcC52YXVsdCwgdGhpcy5wbHVnaW5fZW52KTtcclxuICAgICAgICAgICAgcmV0dXJuIGd0b192aWV3O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFZJRVdfVFlQRV9DT1IsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcl92aWV3ID0gbmV3IENvclZpZXcobGVhZik7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JfdmlldztcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFeHRlbnNpb25zKFtcImd0dlwiXSwgVklFV19UWVBFX0dUVik7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckV4dGVuc2lvbnMoW1wiZ3RvXCJdLCBWSUVXX1RZUEVfR1RPKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXh0ZW5zaW9ucyhbXCJjb3JcIl0sIFZJRVdfVFlQRV9DT1IpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBMb2FkU2V0dGluZ3NGcm9tRGlzaygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ19kYXRhID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJGaW5pc2ggbG9hZGluZyBzZXR0aW5nLCBzZXR0aW5nX2RhdGE6IFwiLCBzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIGlmIChzZXR0aW5nX2RhdGEgIT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5VbnNlcmlhbGl6ZWRTZXR0aW5ncyhzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBTYXZlU2V0dGluZ3NUb0Rpc2soKVxyXG4gICAge1xyXG4gICAgICAgIERlYnVnTG9nKFwiTUFYX1NMVU1QX1BDVDEgXCIsIHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QpO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdfZGF0YSA9IHRoaXMucGx1Z2luX2Vudi5TZXJpYWxpemVkU2V0dGluZ3MoKTtcclxuICAgICAgICBEZWJ1Z0xvZyhcIk1BWF9TTFVNUF9QQ1QyIFwiLCB0aGlzLnBsdWdpbl9lbnYuZ3JpZF9zZXR0aW5ncy5NQVhfU0xVTVBfUENUKTtcclxuICAgICAgICBEZWJ1Z0xvZyhzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIHRoaXMuc2F2ZURhdGEoc2V0dGluZ19kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBGZXRjaEFsbFN0b2NrQ3VycmVudFByaWNlKClcclxuICAgIHtcclxuICAgICAgICAvL0RlYnVnTG9nKCdydW4gRmV0Y2hBbGxTdG9ja0N1cnJlbnRQcmljZSAnLCB0aGlzLmFwcC52YXVsdC5nZXROYW1lKCkpO1xyXG4gICAgICAgIGNvbnN0IGFwaV9saWNlbmNlID0gdGhpcy5wbHVnaW5fZW52LkdldEFQSUxpc2VuY2UoKVxyXG4gICAgICAgIGNvbnN0IGdyaWRfZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKCdHcmlkVHJhZGluZycpO1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJnZXRBYnN0cmFjdEZpbGVCeVBhdGggXCIsIFN0cmluZyhncmlkX2ZvbGRlcikpO1xyXG4gICAgICAgIGlmIChncmlkX2ZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxfY2FsbGJhY2tfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vRGVidWdMb2coJ0ZvbGRlciBjaGlsZHJlbiBjb3VudCAnLCBTdHJpbmcoZ3JpZF9mb2xkZXIuY2hpbGRyZW4ubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4PTA7IGluZGV4IDwgZ3JpZF9mb2xkZXIuY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmlkX2ZpbGUgPSBncmlkX2ZvbGRlci5jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiRm9yIGZpbGUgbmFtZSBcIiwgZ3JpZF9maWxlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGdyaWRfZmlsZS5uYW1lLmVuZHNXaXRoKFwiLmd0dlwiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwicmVhZCBmaWxlIFwiLCBncmlkX2ZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQoZ3JpZF9maWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RlX3N0ciA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCIsXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncmlkX3RyYWRpbmcgPSB0aGlzLnBsdWdpbl9lbnYuR2V0QW5kR2VuR3JpZFRyYWRpbmcoZ3JpZF9maWxlLm5hbWUsIG1vZGVfc3RyKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiR2V0QW5kR2VuR3JpZFRyYWRpbmcsIG5hbWU6IFwiLCBncmlkX2ZpbGUubmFtZSwgXCIsIG1vZGU6IFwiLCBtb2RlX3N0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZF90cmFkaW5nLkluaXRHcmlkVHJhZGluZyhjb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZF90cmFkaW5nLmlzX2RlYnVnKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vRGVidWdMb2coXCJUcnkgdG8gZmV0Y2ggcmVtb3RlIHByaWNlLCBcIiwgZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlLCBncmlkX3RyYWRpbmcudGFyZ2V0X3N0b2NrKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudF9wcmljZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmlkX2ZpbGUubmFtZS5pbmNsdWRlcyhcIkxPRlwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRMT0ZDdXJyZW50UHJpY2UoZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlICsgU3RyaW5nKGdyaWRfdHJhZGluZy50YXJnZXRfc3RvY2spLCBhcGlfbGljZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBOdW1iZXIoY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRFVEZDdXJyZW50UHJpY2UoZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlICsgU3RyaW5nKGdyaWRfdHJhZGluZy50YXJnZXRfc3RvY2spLCBhcGlfbGljZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBTOiBcdTk3MDBcdTg5ODFcdTVGM0FcdThGNkNcdTRFMDBcdTRFMEJcdUZGMENcdTRFMERcdTVGM0FcdTUyMzZcdThGNkNcdTYzNjJcdTY1RTBcdTZDRDVcdTRGN0ZcdTc1MjggdG9GaXhlZCBcdTUxRkRcdTY1NzBcdUZGMENcdTUzRUZcdTgwRkRcdTY2MkZcdTdDN0JcdTU3OEJcdTk1RUVcdTk4OThcdUZGMENcdTZDQTFcdTZERjFcdTdBNzZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcmljZSA9IE51bWJlcihjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3Quc2V0KFN0cmluZyhncmlkX3RyYWRpbmcudGFyZ2V0X3N0b2NrKSwgY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9EZWJ1Z0xvZyhcIlx1NjdFNVx1OEJFMiBcIiwgZ3JpZF90cmFkaW5nLnN0b2NrX25hbWUsIFwiIFx1NUY1M1x1NTI0RFx1NjcwMFx1NjVCMFx1NEVGN1x1NjgzQ1x1NEUzQTogXCIsIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRfdHJhZGluZy5VcGRhdGVSZW1vdGVQcmljZShjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZF9maWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZ3JpZF9maWxlLm5hbWUuZW5kc1dpdGgoXCIuZ3RvXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGdyaWRfZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy81MjE4ODAsXHU4QkMxXHU1MjM4RVRGLHNoLDEuMDMwLDAuODkwXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4PTA7IGluZGV4IDwgbGluZXMubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RycyA9IGxpbmVzW2luZGV4XS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJzWzBdICE9IFwiQlVZXCIgJiYgc3Ryc1swXSAhPSBcIlNFTExcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRFVEZDdXJyZW50UHJpY2Uoc3Ryc1syXSArIHN0cnNbMF0sIGFwaV9saWNlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBOdW1iZXIoY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3Quc2V0KHN0cnNbMF0sIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiXHU2N0U1XHU4QkUyIFwiLCBzdHJzWzFdLCBcIiBcdTVGNTNcdTUyNERcdTY3MDBcdTY1QjBcdTRFRjdcdTY4M0NcdTRFM0E6IFwiLCBjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuUHVibGlzaEV2ZW50KEZFVENIX0NVUlJFTlRfUFJJQ0UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFRyYWRpbmdTdHJhdGVneVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHJcbiAgICBwbHVnaW46IFRyYWRpbmdTdHJhdGVneTtcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUcmFkaW5nU3RyYXRlZ3ksIHBsdWdpbl9lbnY6IFBsdWdpbkVudikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLnBsdWdpbl9lbnYgPSBwbHVnaW5fZW52O1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luX2Vudi5pc19zZXR0aW5nc19jaGFuZ2VkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uU2F2ZVNldHRpbmdzVG9EaXNrKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5pc19zZXR0aW5nc19jaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJlbnRlciBkaXNwbGF5IHNldHRpbmdzXCIpXHJcbiAgICAgICAgLy8gXHU2RTA1XHU3QTdBXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NjgwN1x1OTg5OFxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMVwiKS5zZXRUZXh0KFwiVHJhZGluZ1N0cmF0ZWd5XCIpO1xyXG4gICAgICAgIC8vIFx1NTdGQVx1Nzg0MFx1OTE0RFx1N0Y2RVxyXG4gICAgICAgIGNvbnN0IGJhc2VfZGl2ID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICBiYXNlX2Rpdi5jcmVhdGVFbChcImgyXCIpLnNldFRleHQoXCJcdTU3RkFcdTc4NDBcdTkxNERcdTdGNkVcIik7XHJcbiAgICAgICAgbGV0IGJrZXk6IChrZXlvZiBQbHVnaW5CYXNlU2V0dGluZ3MpO1xyXG4gICAgICAgIGZvciAoYmtleSBpbiB0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleV9uYW1lID0gU0VUVElOR19OQU1FLmdldChia2V5KVxyXG4gICAgICAgICAgICBpZiAoa2V5X25hbWUgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoYmFzZV9kaXYpLnNldE5hbWUoa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0X2NvbXAsIHNldHRpbmdfa2V5PWJrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2NvbXAuc2V0VmFsdWUoU3RyaW5nKEdldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncywgc2V0dGluZ19rZXkpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9jb21wLm9uQ2hhbmdlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncywgc2V0dGluZ19rZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5fZW52LmlzX3NldHRpbmdzX2NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gXHU3RjUxXHU2ODNDXHU0RUE0XHU2NjEzXHU1M0MyXHU2NTcwXHJcbiAgICAgICAgY29uc3QgZ3JpZF9kaXYgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIGdyaWRfZGl2LmNyZWF0ZUVsKFwiaDJcIikuc2V0VGV4dChcIlx1N0Y1MVx1NjgzQ1x1OTE0RFx1N0Y2RVwiKTsgICBcclxuICAgICAgICBsZXQga2V5OiAoa2V5b2YgR3JpZFRyYWRpbmdTZXR0aW5ncyk7XHJcbiAgICAgICAgZm9yIChrZXkgaW4gdGhpcy5wbHVnaW5fZW52LmdyaWRfc2V0dGluZ3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlfbmFtZSA9IFNFVFRJTkdfTkFNRS5nZXQoa2V5KVxyXG4gICAgICAgICAgICBpZiAoa2V5X25hbWUgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoZ3JpZF9kaXYpLnNldE5hbWUoa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0X2NvbXAsIHNldHRpbmdfa2V5PWtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnTG9nKFwiYWRkIFNldHRpbmcgS2V5OiBcIiwgc2V0dGluZ19rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRfY29tcC5zZXRWYWx1ZShTdHJpbmcoR2V0U2V0dGluZ1ZhbHVlKHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLCBzZXR0aW5nX2tleSkpKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2NvbXAub25DaGFuZ2UoKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuZ3JpZF9zZXR0aW5ncywgc2V0dGluZ19rZXksIE51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWdMb2coXCJTZXRWYWx1ZSBzdWNjZWVkIFwiLCBzZXR0aW5nX2tleSwgR2V0U2V0dGluZ1ZhbHVlKHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLCBzZXR0aW5nX2tleSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5fZW52LmlzX3NldHRpbmdzX2NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsICJcclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTkFNRSA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFtcclxuICAgIFtcIk9ORV9HUklEX0xJTUlUXCIsIFwiXHU5OTk2XHU3RjUxXHU0RTBBXHU5NjUwXHU1MDNDXCJdLFxyXG4gICAgW1wiTUFYX1NMVU1QX1BDVFwiLCBcIlx1NjcwMFx1NTkyN1x1NTZERVx1NjRBNFx1NTAzQ1wiXSxcclxuICAgIFtcIlRSSUdHRVJfQUREX1BPSU5UXCIsIFwiXHU4OUU2XHU1M0QxXHU0RUY3XHU1MkEwXHU3MEI5XCJdLFxyXG4gICAgW1wiVFJBRElOR19QUklDRV9QUkVDSVNJT05cIiwgXCJcdTRFQTRcdTY2MTNcdTRFRjdcdTdDQkVcdTVFQTZcIl0sXHJcbiAgICBbXCJNSU5fQkFUQ0hfQ09VTlRcIiwgXCJcdTUzNTVcdTYyNEJcdTRFRkRcdTY1NzBcdTk4OURcIl0sXHJcbiAgICBbXCJNQVhfUklTRV9QQ1RcIiwgXCJcdTUzNTVcdTY1RTVcdTY3MDBcdTU5MjdcdTZEQThcdTVFNDVcIl0sXHJcbiAgICBbXCJTR1JJRF9TVEVQX1BDVFwiLCBcIlx1NUMwRlx1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIlNHUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIlNHUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJNR1JJRF9TVEVQX1BDVFwiLCBcIlx1NEUyRFx1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIk1HUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIk1HUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJMR1JJRF9TVEVQX1BDVFwiLCBcIlx1NTkyN1x1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIkxHUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIkxHUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJEQVRBX0FQSV9MSUNFTkNFXCIsIFwiXHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzXHU4QkMxXHU0RTY2XCJdXHJcbl0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNHUklEX1RZUEVfTkFNRV9TVFIgPSBcIlx1NUMwRlx1N0Y1MVwiO1xyXG5leHBvcnQgY29uc3QgTUdSSURfVFlQRV9OQU1FX1NUUiA9IFwiXHU0RTJEXHU3RjUxXCI7XHJcbmV4cG9ydCBjb25zdCBMR1JJRF9UWVBFX05BTUVfU1RSID0gXCJcdTU5MjdcdTdGNTFcIjtcclxuZXhwb3J0IGNvbnN0IFBFUkZJVF9UWVBFX05BTUVfU1RSID0gXCJcdTUyMjlcdTZEQTZcIjsiLCAiLypcclxuICAgIFNldHRpbmcgXHU1NDA0XHU3OUNEXHU5MTREXHU3RjZFXHU0RkUxXHU2MDZGXHU1M0NBXHU1RTM4XHU5MUNGXHU1QjlBXHU0RTQ5XHJcbiAgICBHcmlkVHJhZGluZ1NldHRpbmdzOiBcdTdGNTFcdTY4M0NcdTRFQTRcdTY2MTNcdTc2ODRcdTUzQzJcdTY1NzBcdTVCOUFcdTRFNDlcdUZGMENcdTg5ODZcdTc2RDZcdTUxNzNcdTdDRkJcdTRFM0EgXHU5RUQ4XHU4QkE0XHU1MTY4XHU1QzQwXHU1M0MyXHU2NTcwPC0tXHU4MUVBXHU1QjlBXHU0RTQ5XHU1MTY4XHU1QzQwXHU1M0MyXHU2NTcwPC0tXHU4MUVBXHU1QjlBXHU0RTQ5XHU2ODA3XHU3Njg0XHU1M0MyXHU2NTcwXHJcbiovXHJcblxyXG5pbXBvcnQgeyBTRVRUSU5HX05BTUUgfSBmcm9tIFwiLi9sYW5nX3N0clwiO1xyXG5cclxuLy8gXHU5ODlDXHU4MjcyXHU1QjlBXHU0RTQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9NT05JVE9SICAgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU5RUM0XHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfTU9OSVRPUiAgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU5RUM0XHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQgICAgICAgPSBcIiNEM0QzRDNcIjsgICAgLy8gXHU3MDcwXHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfVFJJR0dFUkVEICAgICAgPSBcIiNGRkZGRTBcIjsgICAgLy8gXHU2RDQ1XHU5RUM0XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0RJU0FCTEUgICAgICAgICAgICAgPSBcIiNGRkZGRTBcIjsgICAgLy8gXHU2REYxXHU3MDcwXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NUT0NLX09WRVJWSUVXICAgICAgPSBcIiNGRkZGRkZcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1RBQkxFX1RJVExFICAgICAgICAgPSBcIiNEM0QzRDNcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9PVkVSVklFVyAgICAgICAgPSBcIiNGRkZGMDFcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFBhY2tTZXR0aW5nczxUPihzZXR0aW5nczogVCk6IHN0cmluZ1xyXG57XHJcbiAgICBsZXQgcGFja19zdHIgPSBcIlwiO1xyXG4gICAgbGV0IGtleToga2V5b2YgVDtcclxuICAgIGZvciAoa2V5IGluIHNldHRpbmdzKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChTRVRUSU5HX05BTUUuaGFzKFN0cmluZyhrZXkpKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhY2tfc3RyID0gcGFja19zdHIgKyBTdHJpbmcoa2V5KSArIFwiOlwiICsgU3RyaW5nKHNldHRpbmdzW2tleV0pICsgXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFja19zdHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBVbnBhY2tTZXR0aW5nczxUPihzZXR0aW5nczogVCwgbGluZXM6IHN0cmluZ1tdKVxyXG57XHJcbiAgICBsaW5lcy5mb3JFYWNoKChsaW5lLCBpZHgpID0+IHtcclxuICAgICAgICBjb25zdCBzdHJzID0gbGluZS5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgaWYgKFNFVFRJTkdfTkFNRS5oYXMoc3Ryc1swXSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTZXRTZXR0aW5nVmFsdWUoc2V0dGluZ3MsIHN0cnNbMF0gYXMga2V5b2YgVCwgc3Ryc1sxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRTZXR0aW5nVmFsdWU8VD4oc2V0dGluZ3M6IFQsIGtleToga2V5b2YgVClcclxue1xyXG4gICAgcmV0dXJuIHNldHRpbmdzW2tleV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTZXRTZXR0aW5nVmFsdWU8VCwgVlQ+KHNldHRpbmdzOiBULCBrZXk6IGtleW9mIFQsIHZhbHVlOiBWVClcclxue1xyXG4gICAgaWYgKGtleSBpbiBzZXR0aW5ncylcclxuICAgIHtcclxuICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFx1NjNEMlx1NEVGNlx1OTE0RFx1N0Y2RVxyXG5leHBvcnQgY2xhc3MgUGx1Z2luQmFzZVNldHRpbmdzXHJcbntcclxuICAgIERBVEFfQVBJX0xJQ0VOQ0U6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU1MTREXHU4RDM5XHU5RUQ4XHU4QkE0TGljZW5zZVxyXG4gICAgICAgIHRoaXMuREFUQV9BUElfTElDRU5DRSA9IFwiMTEyZTg0NjU2MTc0ZjBhNVwiO1xyXG4gICAgICAgIC8vIFx1NEUyQVx1NEVCQVx1NEVEOFx1OEQzOUxpY2Vuc2VcclxuICAgICAgICB0aGlzLkRBVEFfQVBJX0xJQ0VOQ0UgPSBcImIxOTJmNTNhNmQ2OTI4MDMzXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBcdTdGNTFcdTY4M0NcdTkxNERcdTdGNkVcclxuZXhwb3J0IGNsYXNzIEdyaWRUcmFkaW5nU2V0dGluZ3Mge1xyXG4gICAgT05FX0dSSURfTElNSVQ6IG51bWJlcjtcclxuICAgIE1BWF9TTFVNUF9QQ1Q6IG51bWJlcjtcclxuICAgIFRSSUdHRVJfQUREX1BPSU5UOiBudW1iZXI7XHJcbiAgICBUUkFESU5HX1BSSUNFX1BSRUNJU0lPTjogbnVtYmVyO1xyXG4gICAgTUlOX0JBVENIX0NPVU5UOiBudW1iZXI7XHJcbiAgICBNQVhfUklTRV9QQ1Q6IG51bWJlcjtcclxuICAgIE1JTklNVU1fQlVZX1BDVDogbnVtYmVyO1xyXG4gICAgQ0xFQVJfU1RFUF9QQ1Q6IG51bWJlcjtcclxuICAgIEJPVFRPTV9CVVlfUENUOiBudW1iZXI7XHJcblxyXG4gICAgU0dSSURfU1RFUF9QQ1Q6IG51bWJlcjtcclxuICAgIFNHUklEX0FERF9QQ1Q6IG51bWJlcjtcclxuICAgIFNHUklEX1JFVEFJTl9DT1VOVDogbnVtYmVyO1xyXG5cclxuICAgIE1HUklEX1NURVBfUENUOiBudW1iZXI7XHJcbiAgICBNR1JJRF9BRERfUENUOiBudW1iZXI7XHJcbiAgICBNR1JJRF9SRVRBSU5fQ09VTlQ6IG51bWJlcjtcclxuXHJcbiAgICBMR1JJRF9TVEVQX1BDVDogbnVtYmVyO1xyXG4gICAgTEdSSURfQUREX1BDVDogbnVtYmVyO1xyXG4gICAgTEdSSURfUkVUQUlOX0NPVU5UOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFx1NjMwOVx1NzE2N1x1OUVEOFx1OEJBNFx1NTNDMlx1NjU3MFx1NTAzQ1x1NTIxRFx1NTlDQlx1NTMxNlxyXG4gICAgICAgIHRoaXMuT05FX0dSSURfTElNSVQgPSAxMDAwMDtcclxuICAgICAgICB0aGlzLk1BWF9TTFVNUF9QQ1QgPSAwLjY3O1xyXG4gICAgICAgIHRoaXMuVFJJR0dFUl9BRERfUE9JTlQgPSAwLjAwNTtcclxuICAgICAgICB0aGlzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OID0gMztcclxuICAgICAgICB0aGlzLk1JTl9CQVRDSF9DT1VOVCA9IDEwMDtcclxuICAgICAgICB0aGlzLk1BWF9SSVNFX1BDVCA9IDAuMTtcclxuICAgICAgICB0aGlzLkNMRUFSX1NURVBfUENUID0gMC4yNTtcclxuICAgICAgICB0aGlzLk1JTklNVU1fQlVZX1BDVCA9IDAuMTtcclxuICAgICAgICB0aGlzLkJPVFRPTV9CVVlfUENUID0gMC4yXHJcbiAgICBcclxuICAgICAgICB0aGlzLlNHUklEX1NURVBfUENUID0gMC4wNTtcclxuICAgICAgICB0aGlzLlNHUklEX0FERF9QQ1QgPSAwLjA1O1xyXG4gICAgICAgIHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UID0gNDtcclxuXHJcbiAgICAgICAgdGhpcy5NR1JJRF9TVEVQX1BDVCA9IDAuMjI7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9BRERfUENUID0gMC4yO1xyXG4gICAgICAgIHRoaXMuTUdSSURfUkVUQUlOX0NPVU5UID0gMjtcclxuXHJcbiAgICAgICAgdGhpcy5MR1JJRF9TVEVQX1BDVCA9IDAuNTI7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9BRERfUENUID0gMC41O1xyXG4gICAgICAgIHRoaXMuTEdSSURfUkVUQUlOX0NPVU5UID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBDbG9uZSgpOiBHcmlkVHJhZGluZ1NldHRpbmdzXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgR3JpZFRyYWRpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgIGNsb25lLk9ORV9HUklEX0xJTUlUID0gdGhpcy5PTkVfR1JJRF9MSU1JVDtcclxuICAgICAgICBjbG9uZS5NQVhfU0xVTVBfUENUID0gdGhpcy5NQVhfU0xVTVBfUENUO1xyXG4gICAgICAgIGNsb25lLlRSSUdHRVJfQUREX1BPSU5UID0gdGhpcy5UUklHR0VSX0FERF9QT0lOVDtcclxuICAgICAgICBjbG9uZS5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiA9IHRoaXMuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY2xvbmUuTUlOX0JBVENIX0NPVU5UID0gdGhpcy5NSU5fQkFUQ0hfQ09VTlQ7XHJcbiAgICAgICAgY2xvbmUuTUFYX1JJU0VfUENUID0gdGhpcy5NQVhfUklTRV9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuQ0xFQVJfU1RFUF9QQ1QgPSB0aGlzLkNMRUFSX1NURVBfUENUO1xyXG4gICAgICAgIGNsb25lLk1JTklNVU1fQlVZX1BDVCA9IHRoaXMuTUlOSU1VTV9CVVlfUENUO1xyXG4gICAgICAgIGNsb25lLkJPVFRPTV9CVVlfUENUID0gdGhpcy5CT1RUT01fQlVZX1BDVDtcclxuICAgIFxyXG4gICAgICAgIGNsb25lLlNHUklEX1NURVBfUENUID0gdGhpcy5TR1JJRF9TVEVQX1BDVDtcclxuICAgICAgICBjbG9uZS5TR1JJRF9BRERfUENUID0gdGhpcy5TR1JJRF9BRERfUENUO1xyXG4gICAgICAgIGNsb25lLlNHUklEX1JFVEFJTl9DT1VOVCA9IHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UO1xyXG4gICAgXHJcbiAgICAgICAgY2xvbmUuTUdSSURfU1RFUF9QQ1QgPSB0aGlzLk1HUklEX1NURVBfUENUO1xyXG4gICAgICAgIGNsb25lLk1HUklEX0FERF9QQ1QgPSB0aGlzLk1HUklEX0FERF9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuTUdSSURfUkVUQUlOX0NPVU5UID0gdGhpcy5NR1JJRF9SRVRBSU5fQ09VTlQ7XHJcbiAgICBcclxuICAgICAgICBjbG9uZS5MR1JJRF9TVEVQX1BDVCA9IHRoaXMuTEdSSURfU1RFUF9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuTEdSSURfQUREX1BDVCA9IHRoaXMuTEdSSURfQUREX1BDVDtcclxuICAgICAgICBjbG9uZS5MR1JJRF9SRVRBSU5fQ09VTlQgPSB0aGlzLkxHUklEX1JFVEFJTl9DT1VOVDtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja0Jhc2UoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZyA9IFtcIkJBU0VcIiwgU3RyaW5nKHRoaXMuT05FX0dSSURfTElNSVQpLCBTdHJpbmcodGhpcy5NQVhfU0xVTVBfUENUKSwgU3RyaW5nKHRoaXMuVFJJR0dFUl9BRERfUE9JTlQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcodGhpcy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiksIFN0cmluZyh0aGlzLk1JTl9CQVRDSF9DT1VOVCksIFN0cmluZyh0aGlzLk1BWF9SSVNFX1BDVCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyh0aGlzLkNMRUFSX1NURVBfUENUKSwgU3RyaW5nKHRoaXMuTUlOSU1VTV9CVVlfUENUKSwgU3RyaW5nKHRoaXMuQk9UVE9NX0JVWV9QQ1QpXVxyXG4gICAgICAgIHJldHVybiBzZXR0aW5nLmpvaW4oXCIsXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIFVucGFja0Jhc2Uoc3Ryczogc3RyaW5nW10pXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHN0cnMubGVuZ3RoIDwgMTApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuT05FX0dSSURfTElNSVQgPSBOdW1iZXIoc3Ryc1sxXSk7XHJcbiAgICAgICAgdGhpcy5NQVhfU0xVTVBfUENUID0gTnVtYmVyKHN0cnNbMl0pO1xyXG4gICAgICAgIHRoaXMuVFJJR0dFUl9BRERfUE9JTlQgPSBOdW1iZXIoc3Ryc1szXSk7XHJcbiAgICAgICAgdGhpcy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiA9IE51bWJlcihzdHJzWzRdKTtcclxuICAgICAgICB0aGlzLk1JTl9CQVRDSF9DT1VOVCA9IE51bWJlcihzdHJzWzVdKTtcclxuICAgICAgICB0aGlzLk1BWF9SSVNFX1BDVCA9IE51bWJlcihzdHJzWzZdKTtcclxuICAgICAgICB0aGlzLkNMRUFSX1NURVBfUENUID0gTnVtYmVyKHN0cnNbN10pO1xyXG4gICAgICAgIHRoaXMuTUlOSU1VTV9CVVlfUENUID0gTnVtYmVyKHN0cnNbOF0pO1xyXG4gICAgICAgIHRoaXMuQk9UVE9NX0JVWV9QQ1QgPSBOdW1iZXIoc3Ryc1s5XSk7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja1N0ZXAoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZyA9IFtcIlNURVBcIiwgU3RyaW5nKHRoaXMuU0dSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5TR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRoaXMuTUdSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5NR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuTUdSSURfUkVUQUlOX0NPVU5UKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRoaXMuTEdSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5MR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuTEdSSURfUkVUQUlOX0NPVU5UKV1cclxuICAgICAgICByZXR1cm4gc2V0dGluZy5qb2luKFwiLFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBVbnBhY2tTdGVwKHN0cnM6IHN0cmluZ1tdKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChzdHJzLmxlbmd0aCAhPSAxMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5TR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzFdKTtcclxuICAgICAgICB0aGlzLlNHUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1syXSk7XHJcbiAgICAgICAgdGhpcy5TR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1szXSk7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzRdKTtcclxuICAgICAgICB0aGlzLk1HUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1s1XSk7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1s2XSk7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzddKTtcclxuICAgICAgICB0aGlzLkxHUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1s4XSk7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1s5XSk7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja1F1YW50KCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmcgPSBbXCJRVUFOVFwiLCBdXHJcblxyXG4gICAgICAgIHJldHVybiBzZXR0aW5nLmpvaW4oXCIsXCIpXHJcbiAgICB9XHJcblxyXG4gICAgVW5wYWNrUXVhbnQoc3Ryczogc3RyaW5nIFtdKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxufVxyXG4iLCAiLypcclxuICAgIFx1NjU3MFx1NjM2RVx1Njc2NVx1NkU5MDogXHU1RkM1XHU3NkM4XHU2NTcwXHU2MzZFKGh0dHBzOi8vYWQuYml5aW5nYXBpLmNvbS9hcGlkb2MuaHRtbClcclxuICAgIFx1NjU3MFx1NjM2RVx1ODMwM1x1NTZGNDpcclxuICAgICAgICBcdTZDQUFcdTZERjFcdTU3RkFcdTc4NDBcdTY1NzBcdTYzNkU6IFx1ODBBMVx1Nzk2OFx1NTIxN1x1ODg2OFx1MzAwMVx1NTE2Q1x1NTNGOFx1OEJFNlx1NjBDNVx1MzAwMVx1NUI5RVx1NjVGNlx1NEVBNFx1NjYxM1x1MzAwMVx1NTM4Nlx1NTNGMlx1NjU3MFx1NjM2RVx1MzAwMVx1NkRBOFx1OERDQ1x1ODBBMVx1NkM2MFx1MzAwMVx1OEQ0NFx1OTFEMVx1NkQ0MVx1NTQxMVx1N0I0OTYwXHU0RjU5XHU0RTJBXHU0RTBEXHU1NDBDXHU3QzdCXHU1NzhCXHU3Njg0XHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzXHJcbiAgICAgICAgXHU2Q0FBXHU2REYxXHU2REYxXHU1RUE2XHU2NTcwXHU2MzZFOiBcdTYyOTVcdThENDRcdTUzQzJcdTgwMDNcdTMwMDFcdTlGOTlcdTg2NEVcdTY5OUNcdTMwMDFcdTVFMDJcdTU3M0FcdTg4NjhcdTczQjBcdTMwMDFcdThEMjJcdTUyQTFcdTUyMDZcdTY3OTBcdTMwMDFcdTY3M0FcdTY3ODRcdTYzMDFcdTgwQTFcdTMwMDFcdThENDRcdTkxRDFcdTZENDFcdTdCNDk4MFx1NEY1OVx1NEUyQVx1NTQxMVx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgICAgIFx1NkNBQVx1NkRGMVx1NjMwN1x1NjU3MFx1NjU3MFx1NjM2RTogXHU2Q0FBXHU2REYxXHU2MzA3XHU2NTcwXHU1MjE3XHU4ODY4XHUzMDAxXHU1QjlFXHU2NUY2XHU0RUE0XHU2NjEzXHUzMDAxXHU1Mzg2XHU1M0YyXHU2NTcwXHU2MzZFXHUzMDAxXHU1MjA2XHU2NUY2S0RKXHUzMDAxXHU1MjA2XHU2NUY2TUFDRFx1MzAwMVx1NTIwNlx1NjVGNkJPTExcdTdCNDkxNlx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgICAgIFx1NTdGQVx1OTFEMVx1ODg0Q1x1NjBDNVx1NjU3MFx1NjM2RTogXHU1N0ZBXHU5MUQxXHU1MjE3XHU4ODY4XHUzMDAxXHU0RjMwXHU1MDNDXHU4ODRDXHU2MEM1XHUzMDAxXHU2NzAwXHU2NUIwS1x1N0VCRlx1MzAwMVx1NTM4Nlx1NTNGMktcdTdFQkZcdTMwMDFcdThENDRcdTRFQTdcdThEMUZcdTUwM0FcdTg4NjhcdTMwMDFcdTY4NjNcdTY4NDhcdTRGRTFcdTYwNkZcdTdCNDk3MFx1NEY1OVx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgXHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzOlxyXG4gICAgICAgIEVURlx1NTdGQVx1OTFEMVx1ODg0Q1x1NjBDNVxyXG4gICAgICAgICAgICBBUElcdTYzQTVcdTUzRTNcdUZGMUFodHRwczovL2FwaS5iaXlpbmdhcGkuY29tL2pqL2V0ZmhxL0VURlx1NTdGQVx1OTFEMVx1NEVFM1x1NzgwMS9cdTYwQThcdTc2ODRsaWNlbmNlXHJcbiAgICAgICAgICAgIFx1NTkwN1x1NzUyOFx1NjNBNVx1NTNFM1x1RkYxQWh0dHBzOi8vYXBpMS5iaXlpbmdhcGkuY29tL2pqL2V0ZmhxL0VURlx1NTdGQVx1OTFEMVx1NEVFM1x1NzgwMS9cdTYwQThcdTc2ODRsaWNlbmNlXHJcbiAgICAgICAgTE9GXHU1N0ZBXHU5MUQxXHU4ODRDXHU2MEM1XHJcbiAgICAgICAgICAgIEFQSVx1NjNBNVx1NTNFM1x1RkYxQWh0dHBzOi8vYXBpLmJpeWluZ2FwaS5jb20vamovbG9maHEvTE9GXHU1N0ZBXHU5MUQxXHU0RUUzXHU3ODAxL1x1NjBBOFx1NzY4NGxpY2VuY2VcclxuICAgICAgICAgICAgXHU1OTA3XHU3NTI4XHU2M0E1XHU1M0UzXHVGRjFBaHR0cHM6Ly9hcGkxLmJpeWluZ2FwaS5jb20vamovbG9maHEvTE9GXHU1N0ZBXHU5MUQxXHU0RUUzXHU3ODAxL1x1NjBBOFx1NzY4NGxpY2VuY2VcclxuKi9cclxuaW1wb3J0IHsgTm90aWNlLCByZXF1ZXN0VXJsIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5jb25zdCBkYXRhX3VybF9wcmVmaXggPSBcImh0dHA6Ly9hcGkuYml5aW5nYXBpLmNvbVwiO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIEZldGNoRGF0YShkYXRhX2FwaTogc3RyaW5nLCBhcGlfbGljZW5jZTogc3RyaW5nLCBkZWJ1Z19sb2c6IHN0cmluZ1tdW10pXHJcbntcclxuICAgIGNvbnN0IHVybCA9IGRhdGFfdXJsX3ByZWZpeCArIGRhdGFfYXBpICsgXCIvXCIgKyBhcGlfbGljZW5jZTtcclxuICAgIGRlYnVnX2xvZy5wdXNoKFtcIkluZm9cIiwgXCJmdWxsIHVybFwiLCB1cmxdKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh1cmwpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb247XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHZXRFVEZDdXJyZW50UHJpY2UoZXRmX2NvZGU6IHN0cmluZywgYXBpX2xpY2VuY2U6IHN0cmluZywgcmV0cnlfY291bnQgPSAzKVxyXG57XHJcbiAgICBpZiAoIShldGZfY29kZS5zdGFydHNXaXRoKFwic3pcIikgfHwgZXRmX2NvZGUuc3RhcnRzV2l0aChcInNoXCIpKSlcclxuICAgIHtcclxuICAgICAgICAvLyBcdTk3NUVzei9zaFx1NUUwMlx1NTczQVx1NzY4NEVURlx1NEVGN1x1NjgzQ1x1NjVFMFx1NkNENVx1ODFFQVx1NTJBOFx1ODNCN1x1NTNENlxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGFfYXBpID0gZGF0YV91cmxfcHJlZml4ICsgXCIvamovZXRmaHEvXCIgKyBldGZfY29kZSArIFwiL1wiICsgYXBpX2xpY2VuY2U7XHJcbiAgICAvL0RlYnVnTG9nKFwicmVxdWVzdCB1cmw6IFwiLCBkYXRhX2FwaSk7XHJcblxyXG4gICAgd2hpbGUgKHJldHJ5X2NvdW50ID49IDApXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwoZGF0YV9hcGkpO1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGV0Zl9jb2RlLCBcIiAgcmVzdWx0IFwiLCByZXNwb25zZS5qc29uW1wienhqXCJdKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb25bXCJ6eGpcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGRhdGFfYXBpLCBcIiAgZXJyb3IgXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDMwICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHJ5X2NvdW50ID0gcmV0cnlfY291bnQgLSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR2V0TE9GQ3VycmVudFByaWNlKGxvZl9jb2RlOiBzdHJpbmcsIGFwaV9saWNlbmNlOiBzdHJpbmcsIHJldHJ5X2NvdW50ID0gMylcclxue1xyXG4gICAgaWYgKCEobG9mX2NvZGUuc3RhcnRzV2l0aChcInN6XCIpIHx8IGxvZl9jb2RlLnN0YXJ0c1dpdGgoXCJzaFwiKSkpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU5NzVFc3ovc2hcdTVFMDJcdTU3M0FcdTc2ODRMT0ZcdTRFRjdcdTY4M0NcdTY1RTBcdTZDRDVcdTgxRUFcdTUyQThcdTgzQjdcdTUzRDZcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhX2FwaSA9IGRhdGFfdXJsX3ByZWZpeCArIFwiL2pqL2xvZmhxL1wiICsgbG9mX2NvZGUgKyBcIi9cIiArIGFwaV9saWNlbmNlO1xyXG4gICAgLy9EZWJ1Z0xvZyhcInJlcXVlc3QgdXJsOiBcIiwgZGF0YV9hcGkpO1xyXG4gICAgd2hpbGUgKHJldHJ5X2NvdW50ID49IDApXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwoZGF0YV9hcGkpO1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGxvZl9jb2RlLCBcIiAgcmVzdWx0IFwiLCByZXNwb25zZS5qc29uW1wienhqXCJdKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb25bXCJ6eGpcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGRhdGFfYXBpLCBcIiAgZXJyb3IgXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDMwICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRGVidWdMb2coLi4uYXJncylcclxue1xyXG4gICAgbGV0IGxvZ19zdHIgPSBcIlwiO1xyXG4gICAgYXJncy5mb3JFYWNoKChjZWxsLCBpKSA9PiB7XHJcbiAgICAgICAgbG9nX3N0ciA9IGxvZ19zdHIgKyBTdHJpbmcoY2VsbCk7XHJcbiAgICB9KTtcclxuICAgIG5ldyBOb3RpY2UobG9nX3N0cik7XHJcbn1cclxuIiwgIi8qXHJcbiAgICBHcmlkIFRyYWRpbmcgVmlld1xyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU1MTc3XHU0RjUzXHU2ODA3XHU3Njg0XHU1QzU1XHU3OTNBXHU4OUM2XHU1NkZFXHJcbiovXHJcblxyXG5pbXBvcnQgeyBUZXh0RmlsZVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmcgfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52LCBGRVRDSF9DVVJSRU5UX1BSSUNFIH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBHUklEX0NPTE9SX0JVWV9NT05JVE9SLCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQsIEdSSURfQ09MT1JfRElTQUJMRSwgR1JJRF9DT0xPUl9TRUxMX01PTklUT1IsIEdSSURfQ09MT1JfU0VMTF9UUklHR0VSRUQgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xvZyB9IGZyb20gXCIuL3JlbW90ZV91dGlsXCI7XHJcbmltcG9ydCB7IEV4Y3V0ZUdyaWRDb21tYW5kIH0gZnJvbSBcIi4vY29tbWFuZF91dGlsXCI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9HVFYgPSBcImd0di12aWV3XCJcclxuXHJcbmV4cG9ydCBjbGFzcyBHVFZWaWV3IGV4dGVuZHMgVGV4dEZpbGVWaWV3XHJcbntcclxuICAgIGRhdGE6IHN0cmluZztcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuICAgIHJlZnJlc2hfZXZlbnRfZ3VpZDogbnVtYmVyO1xyXG4gICAgdmlld19ndWlkOiBudW1iZXI7XHJcblxyXG4gICAgc3RvY2tfdGlsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBzdG9ja190YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwYXJhbV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwYXJhbV90YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICB0cmFkaW5nX3RpdGxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIHRyYWRpbmdfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgaG9sZGluZ190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBob2xkaW5nX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGluY29tZV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBpbmNvbWVfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgYW5hbHlzaXNfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgYW5hbHlzaXNfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgcmVjb3JkX3RpdGxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIHJlY29yZF90YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBkZWJ1Z19sb2dfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgZGVidWdfbG9nX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb21tYW5kX3RleHRfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgY29tbWFuZF9pbnB1dF9lbDogSFRNTElucHV0RWxlbWVudDtcclxuICAgIGNvbW1hbmRfYnRuX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGNvbW1hbmRfbGlzdF9lbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luX2VudiA9IHBsdWdpbl9lbnY7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoX2V2ZW50X2d1aWQgPSAtMTtcclxuICAgICAgICB0aGlzLnZpZXdfZ3VpZCA9IHBsdWdpbl9lbnYuR2VuR1VJRCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdEYXRhKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Vmlld0RhdGEoZGF0YTogc3RyaW5nLCBjbGVhcjogYm9vbGVhbik6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuUmVmcmVzaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCk6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBWSUVXX1RZUEVfR1RWO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiBcclxuICAgIHtcclxuICAgICAgICBsZXQgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2J0bl9lbCA9IGRpdi5jcmVhdGVFbChcImJ1dHRvblwiKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRfYnRuX2VsLnNldFRleHQoXCJFeGN1dGVcIik7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2J0bl9lbC5vbkNsaWNrRXZlbnQoKGV2OiBNb3VzZUV2ZW50KSA9PiB7dGhpcy5PbkNsaWNrQWRkUmVjb3JkQnRuKGV2LCB0aGlzLmNvbW1hbmRfaW5wdXRfZWwpfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29tbWFuZF9pbnB1dF9lbCA9IGRpdi5jcmVhdGVFbChcImlucHV0XCIpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZF9pbnB1dF9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZF9pbnB1dF9lbC5zaXplID0gNzA7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2lucHV0X2VsLnBsYWNlaG9sZGVyID0gXCJJbnB1dCB5b3VyIGNvbW1hbmRcIlxyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLnN0b2NrX3RpbGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLnN0b2NrX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMucGFyYW1fdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLnBhcmFtX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ190aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKVxyXG4gICAgICAgIHRoaXMuaG9sZGluZ190aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmluY29tZV90aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuYW5hbHlzaXNfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmFuYWx5c2lzX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIilcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLnJlY29yZF90YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG4gIFxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpXHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2dfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmRlYnVnX2xvZ190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA9IHRoaXMucGx1Z2luX2Vudi5TdWJzY3JpYmVFdmVudChGRVRDSF9DVVJSRU5UX1BSSUNFLCAoKT0+dGhpcy5SZWZyZXNoKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIE9uQ2xpY2tBZGRSZWNvcmRCdG4oZXY6IE1vdXNlRXZlbnQsIGlucHV0X2VsOiBIVE1MRWxlbWVudClcclxuICAgIHtcclxuICAgICAgICB0cnlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBpbnB1dF9lbC52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZ3JpZF9jbWQgPSBFeGN1dGVHcmlkQ29tbWFuZCh0ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGdyaWRfY21kLmVycm9yX2NvZGUgPT0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfY21kLmNvbW1hbmQgPT0gXCJhZGRfcmVjb3JkXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhICsgZ3JpZF9jbWQuZGF0YV9yZXN1bHRfc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Vmlld0RhdGEodGhpcy5kYXRhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZF9jbWQuY29tbWFuZCA9PSBcImRlbF9yZWNvcmRcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHRoaXMuZGF0YS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbmRleD0wOyBpbmRleCA8IGxpbmVzLmxlbmd0aDsgaW5kZXgrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lc1tpbmRleF0uc3RhcnRzV2l0aChcIkJVWSxcIikgfHwgbGluZXNbaW5kZXhdLnN0YXJ0c1dpdGgoXCJTRUxMLFwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT0gZ3JpZF9jbWQuZGF0YV9yZXN1bHRfbnVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBsaW5lcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBsaW5lcy5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Vmlld0RhdGEodGhpcy5kYXRhLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcIkNvbW1hbmQgaGFzIGVycm9yIFwiLCBlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmcmVzaF9ldmVudF9ndWlkID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5VbnN1YnNjcmliZUV2ZW50KEZFVENIX0NVUlJFTlRfUFJJQ0UsIHRoaXMucmVmcmVzaF9ldmVudF9ndWlkKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2V2ZW50X2d1aWQgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgUmVmcmVzaCgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU1MjFEXHU1OUNCXHU1MzE2XHU2ODA3XHU5ODk4XHU0RTBFXHU4ODY4XHU2ODNDXHJcbiAgICAgICAgdGhpcy5zdG9ja190aWxlX2VsLnNldFRleHQoXCJcdTY3MkFcdTc3RTVcdTY4MDdcdTc2ODRcIik7XHJcbiAgICAgICAgdGhpcy5zdG9ja190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMucGFyYW1fdGl0bGVfZWwuc2V0VGV4dChcIlx1N0Y1MVx1NjgzQ1x1NTNDMlx1NjU3MFwiKTtcclxuICAgICAgICB0aGlzLnBhcmFtX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RpdGxlX2VsLnNldFRleHQoXCJcdTRFQTRcdTY2MTNcdTdGNTFcdTY4M0NcIik7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RpdGxlX2VsLnNldFRleHQoXCJcdTYzMDFcdTRFRDNcdTUyMDZcdTY3OTBcIik7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGl0bGVfZWwuc2V0VGV4dChcIlx1NjUzNlx1NzZDQVx1NTIwNlx1Njc5MFwiKTtcclxuICAgICAgICB0aGlzLmluY29tZV90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuYW5hbHlzaXNfdGl0bGVfZWwuc2V0VGV4dChcIlx1NTZERVx1NjRBNFx1NTIwNlx1Njc5MFwiKTtcclxuICAgICAgICB0aGlzLmFuYWx5c2lzX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRfdGl0bGVfZWwuc2V0VGV4dChcIlx1NEVBNFx1NjYxM1x1OEJCMFx1NUY1NVwiKTtcclxuICAgICAgICB0aGlzLnJlY29yZF90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIC8vIHRoaXMuZGVidWdfbG9nX3RpdGxlX2VsLnNldFRleHQoXCJcdThDMDNcdThCRDVcdTY1RTVcdTVGRDdcIik7XHJcbiAgICAgICAgLy8gdGhpcy5kZWJ1Z19sb2dfdGFibGVfZWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZSAhPSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZV9zdHIgPSB0aGlzLmRhdGEuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCIsXCIpWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBncmlkX3RyYWRpbmcgPSB0aGlzLnBsdWdpbl9lbnYuR2V0QW5kR2VuR3JpZFRyYWRpbmcodGhpcy5maWxlLm5hbWUsIG1vZGVfc3RyKTtcclxuICAgICAgICAgICAgZ3JpZF90cmFkaW5nLkluaXRHcmlkVHJhZGluZyh0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICAvLyBcdTY4MDdcdTc2ODRcdTRGRTFcdTYwNkZcclxuICAgICAgICAgICAgdGhpcy5zdG9ja190aWxlX2VsLnNldFRleHQoZ3JpZF90cmFkaW5nLnN0b2NrX25hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMuc3RvY2tfdGFibGVfZWwsIGdyaWRfdHJhZGluZy5zdG9ja190YWJsZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBcdTdGNTFcdTY4M0NcdTUzQzJcdTY1NzBcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUoZ3JpZF90cmFkaW5nLCB0aGlzLnBhcmFtX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcucGFyYW1fdGFibGUsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gXHU0RUE0XHU2NjEzXHU3RjUxXHU2ODNDXHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKGdyaWRfdHJhZGluZywgdGhpcy50cmFkaW5nX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcudHJhZGluZ190YWJsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIC8vIFx1NjMwMVx1NEVEM1x1NTIwNlx1Njc5MFxyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMuaG9sZGluZ190YWJsZV9lbCwgZ3JpZF90cmFkaW5nLmhvbGRpbmdfYW5hbHlzaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gXHU2NTM2XHU3NkNBXHU1MjA2XHU2NzkwXHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKGdyaWRfdHJhZGluZywgdGhpcy5pbmNvbWVfdGFibGVfZWwsIGdyaWRfdHJhZGluZy50cmFkaW5nX2luY29tZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBcdTU2REVcdTY0QTRcdTUyMDZcdTY3OTBcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUoZ3JpZF90cmFkaW5nLCB0aGlzLmFuYWx5c2lzX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcudHJhZGluZ19hbmFseXNpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBcdTRFQTRcdTY2MTNcdThCQjBcdTVGNTVcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUoZ3JpZF90cmFkaW5nLCB0aGlzLnJlY29yZF90YWJsZV9lbCwgZ3JpZF90cmFkaW5nLnRyYWRpbmdfcmVjb3JkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIFx1OEMwM1x1OEJENVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAvLyB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMuZGVidWdfbG9nX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcuZGVidWdfbG9nLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIERpc3BsYXlUYWJsZShncmlkX3RyYWRpbmc6IEdyaWRUcmFkaW5nLCB0YWJsZV9lbDogSFRNTEVsZW1lbnQsIHRhYmxlOiBzdHJpbmdbXVtdLCBpc19jb2xvcjogYm9vbGVhbilcclxuICAgIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZV9ib2R5ID0gdGFibGVfZWwuY3JlYXRlRWwoXCJ0Ym9keVwiKTtcclxuICAgICAgICAgICAgdGFibGUuZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZV9yb3cgPSB0YWJsZV9ib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoY2VsbCwgaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlX2NlbGwgPSB0YWJsZV9yb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IGNlbGwsIGF0dHI6IHtcImFsaWduXCI6IFwicmlnaHRcIn19KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfY29sb3IgJiYgaSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChqID09IDAgJiYgZ3JpZF90cmFkaW5nLmRpc2FibGVfcm93cy5pbmNsdWRlcyhpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRhYmxlX2NlbGwuc2V0QXR0cihcImJnQ29sb3JcIiwgR1JJRF9DT0xPUl9ESVNBQkxFKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqIDw9NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWRfdHJhZGluZy5idXlfdHJpZ2dlcmVkX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWRfdHJhZGluZy5idXlfbW9uaXRvcl9yb3dzLmluY2x1ZGVzKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlX2NlbGwuc2V0QXR0cihcImJnQ29sb3JcIiwgR1JJRF9DT0xPUl9CVVlfTU9OSVRPUik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZF90cmFkaW5nLnNlbGxfdHJpZ2dlcmVkX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX1NFTExfVFJJR0dFUkVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncmlkX3RyYWRpbmcuc2VsbF9tb25pdG9yX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX1NFTExfTU9OSVRPUik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgRGVidWdMb2coXCJEaXNwbGF5VGFibGUgZXJyb3I6IFwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgIi8qXHJcbiAgICBteW1hdGg6IFx1N0Y1MVx1NjgzQ1x1NUI5QVx1NTIzNlx1NjU3MFx1NUI2Nlx1NUU5MywgXHU1QkY5XHU1MzlGXHU3NTFGXHU3Njg0TWF0aFx1NUU5M1x1OEZEQlx1ODg0Q1x1NUMwMVx1ODhDNVx1RkYwQ1x1NEY3Rlx1NUY5N1x1OEJBMVx1N0I5N1x1OTAzQlx1OEY5MVx1NjZGNFx1NTJBMFx1N0IyNlx1NTQwOFx1N0Y1MVx1NjgzQ1x1NEVBNFx1NjYxM1x1ODlDNFx1NTIxOVxyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEZpeGVkUHJpY2UocHJpY2U6IG51bWJlciwgcGN0OiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKVxyXG57XHJcbiAgICBjb25zdCBzY2FsZSA9IDEwICoqIHByZWNpc2lvbjtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGguZmxvb3IocHJpY2UgKiBzY2FsZSkgKiBNYXRoLmZsb29yKHBjdCAqIDEwMCkgLyAxMDApIC8gc2NhbGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBBbGlnblByaWNlKHByaWNlOiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKVxyXG57XHJcbiAgICBjb25zdCBzY2FsZSA9IDEwICoqIHByZWNpc2lvbjtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKHByaWNlICogc2NhbGUpIC8gc2NhbGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBNeUZsb29yKG51bTogbnVtYmVyLCBzaW5nbGU6IG51bWJlcilcclxue1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobnVtIC8gc2luZ2xlKSAqIHNpbmdsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE15Q2VpbChudW06IG51bWJlciwgc2luZ2xlOiBudW1iZXIpXHJcbntcclxuICAgIHJldHVybiBNYXRoLmNlaWwobnVtIC8gc2luZ2xlKSAqIHNpbmdsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRvUGVyY2VudChudW06IG51bWJlciwgY291bnQgPSAwKTogc3RyaW5nXHJcbntcclxuICAgIHJldHVybiAobnVtICogMTAwKS50b0ZpeGVkKGNvdW50KSArIFwiJVwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVG9QZXJjZW50U3RyKG51bTogbnVtYmVyLCBjb3VudCA9IDApOiBzdHJpbmdcclxue1xyXG4gICAgcmV0dXJuIG51bS50b0ZpeGVkKGNvdW50KSArIFwiJVwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVG9OdW1iZXIocGVyY2VudDogc3RyaW5nKTogbnVtYmVyXHJcbntcclxuICAgIHJldHVybiBOdW1iZXIocGVyY2VudC5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDAuMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRvVHJhZGluZ0dhcChjdXJyZW50X3ByaWNlOiBudW1iZXJ8dW5kZWZpbmVkLCB0YXJnZXRfcHJpY2U6IG51bWJlcnx1bmRlZmluZWQsIGNvdW50PTApOiBzdHJpbmdcclxue1xyXG4gICAgaWYgKHRhcmdldF9wcmljZSA9PSB1bmRlZmluZWQgfHwgY3VycmVudF9wcmljZSA9PSB1bmRlZmluZWQgfHwgY3VycmVudF9wcmljZSA9PSAwKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBcIi1cIjtcclxuICAgIH1cclxuICAgIGNvbnN0IGdhcCA9IE1hdGguYWJzKHRhcmdldF9wcmljZSAtIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgaWYgKHRhcmdldF9wcmljZSA+IGN1cnJlbnRfcHJpY2UpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFwiK1wiICsgVG9QZXJjZW50KGdhcCAvIGN1cnJlbnRfcHJpY2UsIGNvdW50KTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gXCItXCIgKyBUb1BlcmNlbnQoZ2FwIC8gY3VycmVudF9wcmljZSwgY291bnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSXNOdW1lcmljKHN0cjogc3RyaW5nKTogYm9vbGVhblxyXG57XHJcbiAgICByZXR1cm4gIWlzTmFOKE51bWJlcihzdHIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVEdWFyaW9uKGRhdGVTdHIxOiBzdHJpbmcsIGRhdGVTdHIyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgLy8gXHU1MjFCXHU1RUZBRGF0ZVx1NUJGOVx1OEM2MVx1RkYwOFx1ODFFQVx1NTJBOFx1OEY2Q1x1NjM2Mlx1NEUzQVVUQ1x1NjVGNlx1OTVGNFx1RkYwOVxyXG4gICAgY29uc3QgZGF0ZTEgPSBuZXcgRGF0ZShkYXRlU3RyMSk7XHJcbiAgICBjb25zdCBkYXRlMiA9IG5ldyBEYXRlKGRhdGVTdHIyKTtcclxuXHJcbiAgICAvLyBcdTlBOENcdThCQzFcdTY1RTVcdTY3MUZcdTY3MDlcdTY1NDhcdTYwMjdcclxuICAgIGlmIChpc05hTihkYXRlMS5nZXRUaW1lKCkpIHx8IGlzTmFOKGRhdGUyLmdldFRpbWUoKSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcdThGOTNcdTUxNjVcdTc2ODRcdTY1RTVcdTY3MUZcdTY4M0NcdTVGMEZcdTRFMERcdTZCNjNcdTc4NkVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU4QkExXHU3Qjk3VVRDXHU1MzQ4XHU1OTFDXHU2NUY2XHU5NUY0XHU2MjMzXHU1REVFXHU1MDNDXHVGRjA4XHU5MDdGXHU1MTREXHU1OTBGXHU0RUU0XHU2NUY2XHU1RjcxXHU1NENEXHVGRjA5XHJcbiAgICBjb25zdCB1dGMxID0gRGF0ZS5VVEMoXHJcbiAgICAgICAgZGF0ZTEuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICBkYXRlMS5nZXRVVENNb250aCgpLFxyXG4gICAgICAgIGRhdGUxLmdldFVUQ0RhdGUoKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHV0YzIgPSBEYXRlLlVUQyhcclxuICAgICAgICBkYXRlMi5nZXRVVENGdWxsWWVhcigpLFxyXG4gICAgICAgIGRhdGUyLmdldFVUQ01vbnRoKCksXHJcbiAgICAgICAgZGF0ZTIuZ2V0VVRDRGF0ZSgpXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFx1OEJBMVx1N0I5N1x1NTkyOVx1NjU3MFx1NURFRVx1NUU3Nlx1OEZENFx1NTZERVxyXG4gICAgcmV0dXJuIE1hdGguYWJzKE1hdGguZmxvb3IoKHV0YzEgLSB1dGMyKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQXZlcmFnZVByaWNlU3RyKGNvc3Q6IG51bWJlciwgY291bnQ6IG51bWJlciwgc2luZ2xlOiBudW1iZXIpOiBzdHJpbmdcclxue1xyXG4gICAgaWYgKGNvdW50ID09IDApXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIGNvdW50LnRvRml4ZWQoc2luZ2xlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcoKGNvc3QgLyBjb3VudCkudG9GaXhlZChzaW5nbGUpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFN0cmluZ1BsdXMobnVtMTogc3RyaW5nLCBudW0yOiBzdHJpbmcsIHNpbmdsZTogbnVtYmVyKTogc3RyaW5nXHJcbntcclxuICAgIHJldHVybiBTdHJpbmcoTXlGbG9vcihOdW1iZXIobnVtMSkgKyBOdW1iZXIobnVtMiksIHNpbmdsZSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJvcG9ydGlvblBjdFN0cihjb3VudDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBzaW5nbGU6IG51bWJlcik6IHN0cmluZ1xyXG57XHJcbiAgICBpZiAodG90YWwgPT0gMClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdG90YWwudG9GaXhlZChzaW5nbGUpICsgXCIlXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKChjb3VudCAvIHRvdGFsICogMTAwKS50b0ZpeGVkKHNpbmdsZSkpICsgXCIlXCI7XHJcbn1cclxuIiwgIi8qXHJcbiAgICBcdTdGNTFcdTY4M0NcdTdCNTZcdTc1NjVcdTc2ODRcdThCQTFcdTdCOTdcdTkwM0JcdThGOTFcclxuICAgIFx1NTdGQVx1N0M3Qlx1RkYwQ1x1NEUwRFx1OEQxRlx1OEQyM1x1N0Y1MVx1NjgzQ1x1NzY4NFx1NEVBNFx1NjYxM1x1OEJBMVx1N0I5N1x1RkYwQ1x1NUMwMVx1ODhDNVx1N0VERlx1NEUwMFx1NzY4NFx1NjNBNVx1NTNFM1xyXG4qL1xyXG5pbXBvcnQgeyBNZDUgfSBmcm9tIFwidHMtbWQ1L2Rpc3QvbWQ1XCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nU2V0dGluZ3MsIEdSSURfQ09MT1JfU1RPQ0tfT1ZFUlZJRVcsIEdSSURfQ09MT1JfQlVZX09WRVJWSUVXLCBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcgfSBmcm9tIFwiLi9zZXR0aW5nc1wiXHJcbmltcG9ydCB7IFBFUkZJVF9UWVBFX05BTUVfU1RSIH0gZnJvbSBcIi4vbGFuZ19zdHJcIjtcclxuaW1wb3J0IHsgTXlGbG9vciwgTXlDZWlsLCBUb1BlcmNlbnQsIFRvTnVtYmVyLCBUb1RyYWRpbmdHYXAsIFRpbWVEdWFyaW9uLCBBdmVyYWdlUHJpY2VTdHIsIEZpeGVkUHJpY2UsIFRvUGVyY2VudFN0ciwgUHJvcG9ydGlvblBjdFN0ciB9IGZyb20gXCIuL215bWF0aFwiO1xyXG5pbXBvcnQgeyBQbHVnaW5FbnYgfSBmcm9tIFwiLi9wbHVnaW5fZW52XCI7XHJcbmltcG9ydCB7IERlYnVnTG9nIH0gZnJvbSBcIi4vcmVtb3RlX3V0aWxcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR3JpZFRyYWRpbmcgXHJcbntcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuICAgIGdyaWRfc2V0dGluZ3M6IEdyaWRUcmFkaW5nU2V0dGluZ3M7XHJcbiAgICBpc19lbXB0eTogYm9vbGVhbjtcclxuICAgIGlzX2RlYnVnOiBib29sZWFuO1xyXG4gICAgZGF0YV9tZDU6IHN0cmluZztcclxuICAgIHN0b2NrX3RhYmxlOiBzdHJpbmcgW11bXTtcclxuICAgIHBhcmFtX3RhYmxlOiBzdHJpbmcgW11bXTtcclxuICAgIHRyYWRpbmdfdGFibGU6IHN0cmluZyBbXVtdO1xyXG4gICAgdHJhZGluZ19hbmFseXNpczogc3RyaW5nIFtdW107XHJcbiAgICB0cmFkaW5nX3JlY29yZDogc3RyaW5nIFtdW107XHJcbiAgICB0cmFkaW5nX2luY29tZTogc3RyaW5nIFtdW107XHJcbiAgICBob2xkaW5nX2FuYWx5c2lzOiBzdHJpbmcgW11bXTtcclxuICAgIGhvbGRpbmdfcmVjb3JkOiBzdHJpbmcgW11bXTtcclxuICAgIHN0b2NrX2FuYWx5c2lzOiBzdHJpbmcgW11bXTtcclxuICAgIGRlYnVnX2xvZzogc3RyaW5nIFtdW107XHJcbiAgICBtb2RlX3R5cGU6IHN0cmluZztcclxuXHJcbiAgICB0YXJnZXRfc3RvY2s6IG51bWJlcjtcclxuICAgIHN0b2NrX25hbWU6IHN0cmluZztcclxuICAgIG1hcmtldF9jb2RlOiBzdHJpbmc7XHJcbiAgICBjdXJyZW50X3ByaWNlOiBudW1iZXI7XHJcbiAgICByZW1vdGVfY3VycmVudF9wcmljZTogbnVtYmVyO1xyXG4gICAgdGFyZ2V0X3ByaWNlOiBudW1iZXI7XHJcbiAgICBlbXB0eV9wcmljZTogbnVtYmVyO1xyXG4gICAgY2xlYXJfcHJpY2U6IG51bWJlcjtcclxuICAgIGNsZWFyX2F2Z19wcmljZTogbnVtYmVyO1xyXG4gICAgcmF3X3RyYWRpbmdfcmVjb3JkOiBzdHJpbmcgW11bXTtcclxuICAgIGNsZWFyX3NlbGxfcmVjb3JkOiBNYXA8c3RyaW5nLCBudW1iZXI+O1xyXG4gICAgYnV5X2dyaWRfcmVjb3JkOiBzdHJpbmcgW107XHJcbiAgICBzZ3JpZF9zdGVwX3RhYmxlOiBzdHJpbmcgW11bXTtcclxuICAgIG1ncmlkX3N0ZXBfdGFibGU6IHN0cmluZyBbXVtdO1xyXG4gICAgbGdyaWRfc3RlcF90YWJsZTogc3RyaW5nIFtdW107XHJcblxyXG4gICAgdG90YWxfcmV0YWluOiBudW1iZXI7XHJcbiAgICByZXRhaW5fY29zdDogbnVtYmVyO1xyXG4gICAgdG90YWxfaG9sZDogbnVtYmVyO1xyXG4gICAgdG90YWxfY29zdDogbnVtYmVyO1xyXG4gICAgYnV5X3RyaWdnZXJlZF9yb3dzOiBudW1iZXIgW107XHJcbiAgICBzZWxsX3RyaWdnZXJlZF9yb3dzOiBudW1iZXIgW107XHJcbiAgICBidXlfbW9uaXRvcl9yb3dzOiBudW1iZXIgW107XHJcbiAgICBzZWxsX21vbml0b3Jfcm93czogbnVtYmVyIFtdO1xyXG4gICAgZGlzYWJsZV9yb3dzOiBudW1iZXIgW107XHJcblxyXG4gICAgc3RvY2tfb3ZlcnZpZXc6IHN0cmluZyBbXTtcclxuICAgIHN0b2NrX2J1eV9vdmVydmlldzogc3RyaW5nIFtdW107XHJcbiAgICBzdG9ja19zZWxsX292ZXJ2aWV3OiBzdHJpbmcgW11bXTtcclxuICAgIHN0b2NrX3Bhc3NpdmVfZmlsbGVkX3JlY29yZDogc3RyaW5nIFtdW107XHJcbiAgICBzdG9ja19hY3RpdmVfZmlsbGVkX3JlY29yZDogc3RyaW5nIFtdW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucGx1Z2luX2VudiA9IHBsdWdpbl9lbnY7XHJcbiAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzID0gcGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLkNsb25lKCk7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2cgPSBbXVxyXG4gICAgICAgIHRoaXMuZGF0YV9tZDUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMuaXNfZW1wdHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNfZGVidWcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdEdyaWRUcmFkaW5nKGRhdGE6IHN0cmluZylcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgVXBkYXRlUmVtb3RlUHJpY2UocmVtb3RlX3ByaWNlOiBudW1iZXIpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIERlYnVnTG9nKGxldmVsOiBzdHJpbmcsIGxvZ19zdHI6IHN0cmluZywgZXh0cmFfaW5mbzogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nLnB1c2goW2xldmVsLCBsb2dfc3RyLCBleHRyYV9pbmZvXSk7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0VHJhZGluZ1RpdGxlKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b2NrX25hbWUgKyBcIihcIiArIFN0cmluZyh0aGlzLnRhcmdldF9zdG9jaykgKyBcIilcIjtcclxuICAgIH1cclxuXHJcbiAgICBJc1N0b2NrKCk6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5pc19lbXB0eSA9PSBmYWxzZSAmJiAodGhpcy5tYXJrZXRfY29kZSA9PSBcInN6XCIgfHwgdGhpcy5tYXJrZXRfY29kZSA9PSBcInNoXCIpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdPdmVydmlldygpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zdG9ja19vdmVydmlldyA9IFtHUklEX0NPTE9SX1NUT0NLX09WRVJWSUVXLCBTdHJpbmcodGhpcy50YXJnZXRfc3RvY2spLCB0aGlzLnN0b2NrX25hbWUsIHRoaXMudGFyZ2V0X3ByaWNlLnRvRml4ZWQoMyksIHRoaXMuY3VycmVudF9wcmljZS50b0ZpeGVkKDMpLFxyXG4gICAgICAgICAgICAgICAgVG9QZXJjZW50KHRoaXMuY3VycmVudF9wcmljZSAvIHRoaXMudGFyZ2V0X3ByaWNlLCAxKSwgU3RyaW5nKHRoaXMudG90YWxfaG9sZCksIFN0cmluZyh0aGlzLnRvdGFsX2Nvc3QpLFxyXG4gICAgICAgICAgICAgICAgVG9UcmFkaW5nR2FwKHRoaXMudG90YWxfY29zdCwgdGhpcy50b3RhbF9ob2xkICogdGhpcy5jdXJyZW50X3ByaWNlLCAyKSwgdGhpcy50cmFkaW5nX2luY29tZVs1XVsxMF1dO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfYnV5X292ZXJ2aWV3ID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuYnV5X21vbml0b3Jfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLmJ1eV9tb25pdG9yX3Jvd3MubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5idXlfbW9uaXRvcl9yb3dzW2lkeF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFkaW5nX2dhcCA9IFRvVHJhZGluZ0dhcCh0aGlzLmN1cnJlbnRfcHJpY2UsIE51bWJlcih0aGlzLnRyYWRpbmdfdGFibGVbcm93XVszXSksIDIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9ja19idXlfb3ZlcnZpZXcucHVzaChbR1JJRF9DT0xPUl9CVVlfT1ZFUlZJRVcsIFN0cmluZyh0aGlzLnRhcmdldF9zdG9jayksIHRoaXMuc3RvY2tfbmFtZSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bMF0sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVsyXSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bM10sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzRdLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVs1XSwgdHJhZGluZ19nYXBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0b2NrX3NlbGxfb3ZlcnZpZXcgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5zZWxsX21vbml0b3Jfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuc2VsbF9tb25pdG9yX3Jvd3NbaWR4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWRpbmdfZ2FwID0gVG9UcmFkaW5nR2FwKHRoaXMuY3VycmVudF9wcmljZSwgTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzddKSwgMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b2NrX3NlbGxfb3ZlcnZpZXcucHVzaChbR1JJRF9DT0xPUl9TRUxMX09WRVJWSUVXLCBTdHJpbmcodGhpcy50YXJnZXRfc3RvY2spLCB0aGlzLnN0b2NrX25hbWUsIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzBdLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bNl0sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzddLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVs4XSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bOV0sIHRyYWRpbmdfZ2FwXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmQubGVuZ3RoID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFwiXHU2ODA3XHU3Njg0XHU0RUUzXHU1M0Y3XCIsIFwiXHU2ODA3XHU3Njg0XHU1NDBEXHU3OUYwXCIsIFwiXHU3RjUxXHU2ODNDXHU3OUNEXHU3QzdCXCIsIFwiXHU0RUE0XHU2NjEzXHU2NUU1XHU2NzFGXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUY3XHU2ODNDXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUZEXHU2NTcwXCIsIFwiXHU0RTcwXHU1MTY1XHU5MUQxXHU5ODlEXCIsIFwiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFwiXHU2MzAxXHU0RUQzXHU2NTM2XHU3NkNBXCIsIFwiXHU1MzU2XHU1MUZBXHU0RUZEXHU2NTcwXCIsIFwiXHU3RDJGXHU3OUVGXHU3Qjc5XHU3ODAxXCJcclxuICAgICAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLnN0b2NrX2FjdGl2ZV9maWxsZWRfcmVjb3JkLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmRbaWR4XTtcclxuICAgICAgICAgICAgICAgIHJvd1s4XSA9IFN0cmluZyh0aGlzLmN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgcm93WzldID0gVG9UcmFkaW5nR2FwKE51bWJlcihyb3dbNV0pLCB0aGlzLmN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgcm93WzEwXSA9IFN0cmluZyhNeUNlaWwoTnVtYmVyKHJvd1s3XSkgLyB0aGlzLmN1cnJlbnRfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5fQkFUQ0hfQ09VTlQpKTtcclxuICAgICAgICAgICAgICAgIHJvd1sxMV0gPSBTdHJpbmcoTnVtYmVyKHJvd1s2XSkgLSBOdW1iZXIocm93WzEwXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zdG9ja19wYXNzaXZlX2ZpbGxlZF9yZWNvcmQubGVuZ3RoID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFwiXHU2ODA3XHU3Njg0XHU0RUUzXHU1M0Y3XCIsIFwiXHU2ODA3XHU3Njg0XHU1NDBEXHU3OUYwXCIsIFwiXHU3RjUxXHU2ODNDXHU3OUNEXHU3QzdCXCIsIFwiXHU0RUY3XHU2ODNDXHU2ODYzXHU0RjREXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUY3XHU2ODNDXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUZEXHU2NTcwXCIsIFwiXHU0RTcwXHU1MTY1XHU5MUQxXHU5ODlEXCIsIFwiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFwiXHU1RjUzXHU1MjREXHU4RENDXHU1RTQ1XCIsIFwiXHU1MzU2XHU1MUZBXHU0RUY3XHU2ODNDXCIsIFwiXHU1MzU2XHU1MUZBXHU2REE4XHU1RTQ1XCJcclxuICAgICAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLnN0b2NrX3Bhc3NpdmVfZmlsbGVkX3JlY29yZC5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLnN0b2NrX3Bhc3NpdmVfZmlsbGVkX3JlY29yZFtpZHhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JpZF9yb3cgPSB0aGlzLkZpbmRUcmFkaW5nR3JpZFJvdyhyb3dbM10pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfcm93Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzNdID0gZ3JpZF9yb3dbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzRdID0gZ3JpZF9yb3dbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzVdID0gZ3JpZF9yb3dbM107XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzZdID0gZ3JpZF9yb3dbNF07XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzddID0gZ3JpZF9yb3dbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzhdID0gU3RyaW5nKHRoaXMuY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzldID0gVG9UcmFkaW5nR2FwKE51bWJlcihyb3dbNV0pLCB0aGlzLmN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd1sxMF0gPSBncmlkX3Jvd1s3XTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbMTFdID0gVG9UcmFkaW5nR2FwKHRoaXMuY3VycmVudF9wcmljZSwgTnVtYmVyKHJvd1sxMF0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBQYXJzZVJhd0RhdGEoZGF0YTogc3RyaW5nKTogYm9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IG5ld19tZDUgPSBNZDUuaGFzaFN0cihkYXRhKTtcclxuICAgICAgICBpZiAobmV3X21kNSA9PT0gdGhpcy5kYXRhX21kNSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhX21kNSA9IG5ld19tZDU7XHJcbiAgICAgICAgLy8gMTU5ODY5LFx1NkUzOFx1NjIwRkVURixzeiwxLDAuOTVcclxuICAgICAgICBjb25zdCBsaW5lcyA9IGRhdGEuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgY29uc3Qgc3RycyA9IGxpbmVzWzBdLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICB0aGlzLnRhcmdldF9zdG9jayA9IE51bWJlcihzdHJzWzFdKTtcclxuICAgICAgICB0aGlzLnN0b2NrX25hbWUgPSBzdHJzWzJdO1xyXG4gICAgICAgIGlmICh0aGlzLnN0b2NrX25hbWUgPT0gXCJERUJVR1RFU1RcIilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNfZGVidWcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1hcmtldF9jb2RlID0gc3Ryc1szXTtcclxuICAgICAgICB0aGlzLnRhcmdldF9wcmljZSA9IE51bWJlcihzdHJzWzRdKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRfcHJpY2UgPSBOdW1iZXIoc3Ryc1s1XSk7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA9IHRoaXMucGx1Z2luX2Vudi5HZXRTdG9ja1JlbW90ZVByaWNlKHN0cnNbMV0pO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9wcmljZSA9IHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEJBU0UsMTAwMDAsMC42NywwLjAwNSwwLjAwMSwxMDAsMC4xXHJcbiAgICAgICAgLy8gU1RFUCwwLjA1LDAuMDUsNCwwLjIyLDAuMiwyLDAuNTIsMC41LDFcclxuICAgICAgICAvLyBCVVksMjAyNC0wMS0yMyxcdTVDMEZcdTdGNTEwXHJcbiAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzID0gdGhpcy5wbHVnaW5fZW52LmdyaWRfc2V0dGluZ3MuQ2xvbmUoKTtcclxuICAgICAgICB0aGlzLnJhd190cmFkaW5nX3JlY29yZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuYnV5X2dyaWRfcmVjb3JkID0gW107XHJcbiAgICAgICAgdGhpcy5zZ3JpZF9zdGVwX3RhYmxlID0gW107XHJcbiAgICAgICAgdGhpcy5tZ3JpZF9zdGVwX3RhYmxlID0gW107XHJcbiAgICAgICAgdGhpcy5sZ3JpZF9zdGVwX3RhYmxlID0gW107XHJcbiAgICAgICAgdGhpcy5jbGVhcl9zZWxsX3JlY29yZCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+O1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0xOyBpZHggPCBsaW5lcy5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RycyA9IGxpbmVzW2lkeF0uc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBpZiAoc3Ryc1swXSA9PSBcIkJVWVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhd190cmFkaW5nX3JlY29yZC5wdXNoKFtzdHJzWzBdLCBzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV9ncmlkX3JlY29yZC5wdXNoKHN0cnNbMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiU0VMTFwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhd190cmFkaW5nX3JlY29yZC5wdXNoKFtzdHJzWzBdLCBzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV9ncmlkX3JlY29yZC5yZW1vdmUoc3Ryc1syXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJTSEFSRVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhd190cmFkaW5nX3JlY29yZC5wdXNoKFtzdHJzWzBdLCBzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJCQVNFXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncy5VbnBhY2tCYXNlKHN0cnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiU1RFUFwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuVW5wYWNrU3RlcChzdHJzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3Ryc1swXSA9PSBcIlNHUklEXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2dyaWRfc3RlcF90YWJsZS5wdXNoKFtzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJNR1JJRFwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1ncmlkX3N0ZXBfdGFibGUucHVzaChbc3Ryc1sxXSwgc3Ryc1syXSwgc3Ryc1szXSwgc3Ryc1s0XV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiTEdSSURcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZ3JpZF9zdGVwX3RhYmxlLnB1c2goW3N0cnNbMV0sIHN0cnNbMl0sIHN0cnNbM10sIHN0cnNbNF1dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBJbml0U3RvY2tUYWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU2NzAwXHU5QUQ4XHU1MzU2XHU1MUZBXHU0RUY3XHU0RTNBXHU2RTA1XHU3RjUxXHU0RUY3XHJcbiAgICAgICAgdGhpcy5lbXB0eV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIDEuMCArIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVCwgdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OKTtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKE51bWJlcih0aGlzLnRyYWRpbmdfdGFibGVbaWR4XVs3XSkgPiB0aGlzLmVtcHR5X3ByaWNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtcHR5X3ByaWNlID0gTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVtpZHhdWzddKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBcdTZFMDVcdTRFRDNcdTVFNzNcdTU3NDdcdTRFRjdcdTRFMEVcdTZFMDVcdTRFRDNcdTY3MDBcdTlBRDhcdTRFRjdcclxuICAgICAgICBjb25zdCBjbGVhcl9wY3QgPSB0aGlzLmdyaWRfc2V0dGluZ3MuQ0xFQVJfU1RFUF9QQ1Q7XHJcbiAgICAgICAgdGhpcy5jbGVhcl9hdmdfcHJpY2UgPSBOdW1iZXIoKCh0aGlzLkNhbGNDbGVhclByaWNlKGNsZWFyX3BjdCwgMSkgKyB0aGlzLkNhbGNDbGVhclByaWNlKGNsZWFyX3BjdCwgMikgKyB0aGlzLkNhbGNDbGVhclByaWNlKGNsZWFyX3BjdCwgMykpIC8gMykudG9GaXhlZCh0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT04pKTtcclxuICAgICAgICB0aGlzLmNsZWFyX3ByaWNlID0gdGhpcy5DYWxjQ2xlYXJQcmljZShjbGVhcl9wY3QsIDMpO1xyXG4gICAgICAgIGNvbnN0IG1pbmlfcHJpY2UgPSBGaXhlZFByaWNlKHRoaXMudGFyZ2V0X3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOSU1VTV9CVVlfUENULCB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT04pO1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5CT1RUT01fQlVZX1BDVCwgdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OKTtcclxuICAgICAgICB0aGlzLnN0b2NrX3RhYmxlID0gW1xyXG4gICAgICAgICAgICBbXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgU3RyaW5nKHRoaXMudGFyZ2V0X3N0b2NrKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NjgwN1x1NzY4NFx1NTQwRFx1NzlGMFwiLCB0aGlzLnN0b2NrX25hbWVdLFxyXG4gICAgICAgICAgICBbXCJcdTdGNTFcdTY4M0NcdTZBMjFcdTVGMEZcIiwgdGhpcy5tb2RlX3R5cGVdLFxyXG4gICAgICAgICAgICBbXCJcdTk5OTZcdTdGNTFcdTRFRjdcdTY4M0NcIiwgU3RyaW5nKHRoaXMudGFyZ2V0X3ByaWNlKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NUY1M1x1NTI0RFx1NEVGN1x1NjgzQ1wiLCBTdHJpbmcodGhpcy5jdXJyZW50X3ByaWNlKSwgXCJcdTRFRjdcdTY4M0NcdTc2N0VcdTUyMDZcdTRGNERcIiwgVG9QZXJjZW50KHRoaXMuY3VycmVudF9wcmljZSAvIHRoaXMudGFyZ2V0X3ByaWNlLCAxKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NTZERVx1OEMwM1x1NEVGN1x1NjgzQ1wiLCBTdHJpbmcoYm90dG9tX3ByaWNlKSwgXCJcdTRFRjdcdTY4M0NcdTc2N0VcdTUyMDZcdTRGNERcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5CT1RUT01fQlVZX1BDVCwgMSldLFxyXG4gICAgICAgICAgICBbXCJcdTY3MDBcdTRGNEVcdTRFRjdcdTY4M0NcIiwgU3RyaW5nKG1pbmlfcHJpY2UpLCBcIlx1NEVGN1x1NjgzQ1x1NzY3RVx1NTIwNlx1NEY0RFwiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLk1JTklNVU1fQlVZX1BDVCwgMSldLFxyXG4gICAgICAgICAgICBbXCJcdTUwNUNcdTY4M0NcdThEQ0NcdTVFNDVcIiwgVG9UcmFkaW5nR2FwKHRoaXMuY3VycmVudF9wcmljZSwgbWluaV9wcmljZSksIFwiXHU2RTA1XHU2ODNDXHU2REE4XHU1RTQ1XCIsIFRvVHJhZGluZ0dhcCh0aGlzLmN1cnJlbnRfcHJpY2UsIHRoaXMuZW1wdHlfcHJpY2UsIDEpXSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRHcmlkUGFyYW0oKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucGFyYW1fdGFibGUgPSBbXHJcbiAgICAgICAgICAgIFtcIlx1OTk5Nlx1N0Y1MVx1NzZFRVx1NjgwN1x1OTFEMVx1OTg5RFwiLCBTdHJpbmcodGhpcy5ncmlkX3NldHRpbmdzLk9ORV9HUklEX0xJTUlUKSwgXCJcdTY3MDBcdTU5MjdcdTU2REVcdTY0QTRcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfU0xVTVBfUENUKSwgXCJcdTY3MDBcdTU5MjdcdTZEQThcdThEQ0NcdTVFNDVcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfUklTRV9QQ1QpXSxcclxuICAgICAgICAgICAgW1wiXHU4OUU2XHU1M0QxXHU0RUY3XHU1MkEwXHU3MEI5XCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuVFJJR0dFUl9BRERfUE9JTlQpLCBcIlx1NkJDRlx1NjI0Qlx1NEVGRFx1NjU3MFx1OTg5RFwiLCBTdHJpbmcodGhpcy5ncmlkX3NldHRpbmdzLk1JTl9CQVRDSF9DT1VOVCksIFwiXHU0RUE0XHU2NjEzXHU0RUY3XHU3Q0JFXHU1RUE2XCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT04pXSxcclxuICAgICAgICAgICAgW1wiXHU1QzBGXHU3RjUxXHU2QjY1XHU4RkRCXHU1MDNDXCIsIFRvUGVyY2VudCh0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1QpLCBcIlx1NEUyRFx1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX1NURVBfUENUKSwgXCJcdTU5MjdcdTdGNTFcdTZCNjVcdThGREJcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCldLFxyXG4gICAgICAgICAgICBbXCJcdTYyOTVcdTUxNjVcdThGRkRcdTUyQTBcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9BRERfUENUKSwgXCJcdTYyOTVcdTUxNjVcdThGRkRcdTUyQTBcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9BRERfUENUKSwgXCJcdTYyOTVcdTUxNjVcdThGRkRcdTUyQTBcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9BRERfUENUKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiLCBTdHJpbmcodGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX1JFVEFJTl9DT1VOVCksIFwiXHU0RkREXHU3NTU5XHU1MjI5XHU2REE2XHU2NTcwXCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfUkVUQUlOX0NPVU5UKSwgXCJcdTRGRERcdTc1NTlcdTUyMjlcdTZEQTZcdTY1NzBcIiwgU3RyaW5nKHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9SRVRBSU5fQ09VTlQpXSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRUcmFkaW5nQW5hbHlzaXMoKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHByaWNlID0gdGhpcy50YXJnZXRfcHJpY2U7XHJcbiAgICAgICAgY29uc3QgcmlzZV9wY3QgPSB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1Q7XHJcbiAgICAgICAgY29uc3QgdGFibGU6QXJyYXk8QXJyYXk8c3RyaW5nPj4gPSB0aGlzLnRyYWRpbmdfdGFibGU7XHJcbiAgICAgICAgZnVuY3Rpb24gQW5hbHlzaXMoc2x1bXBfcGN0OiBudW1iZXIpIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRvdGFsX2Nvc3QgPSAwO1xyXG4gICAgICAgICAgICBsZXQgdG90YWxfYW1vdW50ID0gMDtcclxuICAgICAgICAgICAgbGV0IHRvdGFsX3NlbGwgPSAwO1xyXG4gICAgICAgICAgICBsZXQgdG90YWxfZ2FpbiA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbl9wcmljZSA9IHByaWNlICogKDEgLSBzbHVtcF9wY3QpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhfcHJpY2UgPSBwcmljZSAqICgxICsgcmlzZV9wY3QpO1xyXG5cclxuICAgICAgICAgICAgdGFibGUuZm9yRWFjaCgocm93OkFycmF5PHN0cmluZz4sIGk6bnVtYmVyKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgVG9OdW1iZXIocm93WzFdKSA+PSAxLjAgLSBzbHVtcF9wY3QpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxfY29zdCA9IHRvdGFsX2Nvc3QgKyBOdW1iZXIocm93WzVdKTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9hbW91bnQgPSB0b3RhbF9hbW91bnQgKyBOdW1iZXIocm93WzRdKTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9nYWluID0gdG90YWxfZ2FpbiArIE51bWJlcihyb3dbOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX3NlbGwgPSB0b3RhbF9zZWxsICsgTnVtYmVyKHJvd1s4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBjb3N0X3ByaWNlID0gKHRvdGFsX2Nvc3QgLSB0b3RhbF9nYWluKSAvICh0b3RhbF9hbW91bnQgLSB0b3RhbF9zZWxsKTtcclxuICAgICAgICAgICAgY29uc3QgZ2Fpbl9tb25leSA9IE1hdGguZmxvb3IobWF4X3ByaWNlICogKHRvdGFsX2Ftb3VudCAtIHRvdGFsX3NlbGwpIC0gKHRvdGFsX2Nvc3QgLSB0b3RhbF9nYWluKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbVG9QZXJjZW50KHNsdW1wX3BjdCkgKyBcIihcIiArIG1pbl9wcmljZS50b0ZpeGVkKDMpICsgXCIpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRvdGFsX2Nvc3QpLCBTdHJpbmcodG90YWxfYW1vdW50KSwgU3RyaW5nKE1hdGguY2VpbCh0b3RhbF9hbW91bnQgKiBtaW5fcHJpY2UpKSxcclxuICAgICAgICAgICAgICAgICAgICAodG90YWxfY29zdC90b3RhbF9hbW91bnQpLnRvRml4ZWQoMyksIFN0cmluZyhNYXRoLmNlaWwodG90YWxfY29zdCAtIHRvdGFsX2Ftb3VudCAqIG1pbl9wcmljZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICgodG90YWxfY29zdCAtIHRvdGFsX2Ftb3VudCAqIG1pbl9wcmljZSkgLyB0b3RhbF9jb3N0ICogMTAwKS50b0ZpeGVkKDIpICsgXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgKCh0b3RhbF9jb3N0IC8gdG90YWxfYW1vdW50IC0gbWluX3ByaWNlKSAvIG1pbl9wcmljZSAqIDEwMCkudG9GaXhlZCgyKSArIFwiJVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyh0b3RhbF9hbW91bnQgLSB0b3RhbF9zZWxsKSwgU3RyaW5nKE1hdGguZmxvb3IobWF4X3ByaWNlICogKHRvdGFsX2Ftb3VudCAtIHRvdGFsX3NlbGwpKSksIFN0cmluZyh0b3RhbF9jb3N0IC0gdG90YWxfZ2FpbiksXHJcbiAgICAgICAgICAgICAgICAgICAgY29zdF9wcmljZS50b0ZpeGVkKDMpLCAoKG1heF9wcmljZSAtIGNvc3RfcHJpY2UpIC8gY29zdF9wcmljZSAqIDEwMCkudG9GaXhlZCgyKSArIFwiJVwiLCBTdHJpbmcoZ2Fpbl9tb25leSksIChnYWluX21vbmV5IC8gdG90YWxfY29zdCAqIDEwMCkudG9GaXhlZCgyKSArIFwiJVwiXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHJhZGluZ19hbmFseXNpcyA9IFtcclxuICAgICAgICAgICAgW1wiXHU0RThGXHU2MzVGXHU1MjA2XHU2NzkwXCIsIFwiXHU1NkRFXHU2NEE0XHU2QkQ0XHU0RjhCXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYyOTVcdTUxNjVcdThENDRcdTkxRDFcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjMwMVx1NEVEM1x1NEVGRFx1OTg5RFwiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYzMDFcdTRFRDNcdTYyMTBcdTY3MkNcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NEU4Rlx1NjM1Rlx1OTFEMVx1OTg5RFwiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU0RThGXHU2MzVGXHU2QkQ0XHU0RjhCXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYyNDBcdTk3MDBcdTZEQThcdTVFNDVcIl0sXHJcbiAgICAgICAgICAgIFtcIlx1NTNDRFx1NUYzOVx1NzZDOFx1NTIyOVwiLCBcIlx1NjMwMVx1NEVEM1x1NEVGRFx1OTg5RFwiXSxcclxuICAgICAgICAgICAgWyhwcmljZSAqICgxICsgcmlzZV9wY3QpKS50b0ZpeGVkKDMpLCBcIlx1NjMwMVx1NEVEM1x1OTFEMVx1OTg5RFwiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYzMDFcdTRFRDNcdTYyMTBcdTY3MkNcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NkQ2RVx1NzZDOFx1NkJENFx1NEY4QlwiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU3RjUxXHU2ODNDXHU3NkM4XHU1MjI5XCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYwM0JcdTZENkVcdTc2QzhcdTZCRDRcIl0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2x1bXBfcGN0czogbnVtYmVyIFtdID0gWzIwLCAzMCwgNDAsIDUwLCA2MCwgNzAsIDgwXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBjdCBvZiBzbHVtcF9wY3RzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gQW5hbHlzaXMocGN0IC8gMTAwLjApO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHJlc3VsdC5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfYW5hbHlzaXNbaWR4XS5wdXNoKHJlc3VsdFtpZHhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBJbml0VHJhZGluZ1JlY29yZCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy50b3RhbF9yZXRhaW4gPSAwO1xyXG4gICAgICAgIHRoaXMucmV0YWluX2Nvc3QgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfY29zdCA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF9ob2xkID0gMDtcclxuICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkID0gW1tcIlx1NEVBNFx1NjYxM1x1NjVCOVx1NTQxMVwiLCBcIlx1NEVBNFx1NjYxM1x1NjVFNVx1NjcxRlwiLCBcIlx1N0Y1MVx1NjgzQ1x1N0M3Qlx1NTc4QlwiLCBcIlx1NEVBNFx1NjYxM1x1NEVGN1x1NjgzQ1wiLCBcIlx1NEVBNFx1NjYxM1x1ODBBMVx1NjU3MFwiLCBcIlx1NkQ4OFx1ODAxN1x1NjcyQ1x1OTFEMVwiLCBcIlx1N0QyRlx1NzlFRlx1N0I3OVx1NzgwMVwiLCBcIlx1NjMwMVx1NEVEM1x1NjVGNlx1OTU3RlwiXV07XHJcbiAgICAgICAgdGhpcy5zdG9ja19wYXNzaXZlX2ZpbGxlZF9yZWNvcmQgPSBbXTtcclxuICAgICAgICB0aGlzLnN0b2NrX2FjdGl2ZV9maWxsZWRfcmVjb3JkID0gW107XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3JlY29yZCA9IFtdO1xyXG4gICAgICAgIGxldCByYXdfcmVjb3JkID0gWy4uLiB0aGlzLnJhd190cmFkaW5nX3JlY29yZF07XHJcbiAgICAgICAgbGV0IGN1cnNvciA9IDA7XHJcbiAgICAgICAgbGV0IHJldGFpbl9zZWxsID0gMDtcclxuICAgICAgICB3aGlsZSAoY3Vyc29yIDwgcmF3X3JlY29yZC5sZW5ndGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAocmF3X3JlY29yZFtjdXJzb3JdWzBdID09IFwiQlVZXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBzY3Vyc29yID0gLTE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZHg9Y3Vyc29yOyBpZHg8cmF3X3JlY29yZC5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMF0gPT0gXCJTRUxMXCIgJiYgcmF3X3JlY29yZFtpZHhdWzJdID09IHJhd19yZWNvcmRbY3Vyc29yXVsyXSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjdXJzb3IgPSBpZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzY3Vyc29yID49IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU4QkExXHU3Qjk3XHU0RkREXHU3NTU5XHU0RUZEXHU2NTcwL1x1NTM2MFx1NzUyOFx1NjcyQ1x1OTFEMS9cdTYzMDFcdTRFRDNcdTY1RjZcdTk1RjRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXRhaW5fY291bnQgPSBNYXRoLmZsb29yKE51bWJlcihyYXdfcmVjb3JkW2N1cnNvcl1bNF0pIC0gTnVtYmVyKHJhd19yZWNvcmRbc2N1cnNvcl1bNF0pKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3N0X2NvdW50ID0gTWF0aC5mbG9vcihOdW1iZXIocmF3X3JlY29yZFtjdXJzb3JdWzNdKSAqIE51bWJlcihyYXdfcmVjb3JkW2N1cnNvcl1bNF0pIC0gTnVtYmVyKHJhd19yZWNvcmRbc2N1cnNvcl1bM10pICogTnVtYmVyKHJhd19yZWNvcmRbc2N1cnNvcl1bNF0pKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lX2QgPSBUaW1lRHVhcmlvbihyYXdfcmVjb3JkW2N1cnNvcl1bMV0sIHJhd19yZWNvcmRbc2N1cnNvcl1bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxfcmV0YWluID0gdGhpcy50b3RhbF9yZXRhaW4gKyByZXRhaW5fY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXRhaW5fY29zdCA9IHRoaXMucmV0YWluX2Nvc3QgKyBjb3N0X2NvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1OEJCMFx1NUY1NVx1NjIxMFx1NUJGOVx1NzY4NFx1NEU3MFx1NTM1Nlx1OEJCMFx1NUY1NVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbcmF3X3JlY29yZFtjdXJzb3JdWzBdLCByYXdfcmVjb3JkW2N1cnNvcl1bMV0sIHJhd19yZWNvcmRbY3Vyc29yXVsyXSwgcmF3X3JlY29yZFtjdXJzb3JdWzNdLCByYXdfcmVjb3JkW2N1cnNvcl1bNF0sIFN0cmluZyhjb3N0X2NvdW50KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbcmF3X3JlY29yZFtzY3Vyc29yXVswXSwgcmF3X3JlY29yZFtzY3Vyc29yXVsxXSwgcmF3X3JlY29yZFtzY3Vyc29yXVsyXSwgcmF3X3JlY29yZFtzY3Vyc29yXVszXSwgcmF3X3JlY29yZFtzY3Vyc29yXVs0XSwgXCItLVwiLCBTdHJpbmcocmV0YWluX2NvdW50KSwgU3RyaW5nKHRpbWVfZCkrXCJcdTU5MjlcIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd19yZWNvcmQuc3BsaWNlKGN1cnNvciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmF3X3JlY29yZC5zcGxpY2Uoc2N1cnNvciAtIDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcisrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDxyYXdfcmVjb3JkLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAocmF3X3JlY29yZFtpZHhdWzBdID09IFwiQlVZXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvc3RfY291bnQgPSBNYXRoLmZsb29yKE51bWJlcihyYXdfcmVjb3JkW2lkeF1bM10pICogTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3JlY29yZC5wdXNoKFtyYXdfcmVjb3JkW2lkeF1bMF0sIHJhd19yZWNvcmRbaWR4XVsxXSwgcmF3X3JlY29yZFtpZHhdWzJdLCByYXdfcmVjb3JkW2lkeF1bM10sIHJhd19yZWNvcmRbaWR4XVs0XSwgU3RyaW5nKGNvc3RfY291bnQpXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3QgKyBjb3N0X2NvdW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyYXdfcmVjb3JkW2lkeF1bM10pID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX2hvbGQgPSB0aGlzLnRvdGFsX2hvbGQgKyBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbaWR4XVswXSwgcmF3X3JlY29yZFtpZHhdWzFdLCByYXdfcmVjb3JkW2lkeF1bMl0sIHJhd19yZWNvcmRbaWR4XVszXSwgcmF3X3JlY29yZFtpZHhdWzRdXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKHJhd19yZWNvcmRbaWR4XVszXSkgPT0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b2NrX3Bhc3NpdmVfZmlsbGVkX3JlY29yZC5wdXNoKFtHUklEX0NPTE9SX0JVWV9PVkVSVklFVywgU3RyaW5nKHRoaXMudGFyZ2V0X3N0b2NrKSwgdGhpcy5zdG9ja19uYW1lLCByYXdfcmVjb3JkW2lkeF1bMl0sIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJhd19yZWNvcmRbaWR4XVsyXS5zdGFydHNXaXRoKFwiXHU4ODY1XHU0RUQzXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmQucHVzaChbR1JJRF9DT0xPUl9TRUxMX09WRVJWSUVXLCBTdHJpbmcodGhpcy50YXJnZXRfc3RvY2spLCB0aGlzLnN0b2NrX25hbWUsIHJhd19yZWNvcmRbaWR4XVsyXSwgcmF3X3JlY29yZFtpZHhdWzFdLCByYXdfcmVjb3JkW2lkeF1bM10sIHJhd19yZWNvcmRbaWR4XVs0XSwgU3RyaW5nKGNvc3RfY291bnQpLCBcIlwiLCBcIlwiLCBcIlwiXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMF0gPT0gXCJTSEFSRVwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMl0gPT0gXCJcdTdFQTJcdTUyMjlcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhaW5fY291bnQgPSBNYXRoLmZsb29yKE51bWJlcihyYXdfcmVjb3JkW2lkeF1bM10pICogTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbaWR4XVswXSwgcmF3X3JlY29yZFtpZHhdWzFdLCByYXdfcmVjb3JkW2lkeF1bMl0sIHJhd19yZWNvcmRbaWR4XVszXSwgcmF3X3JlY29yZFtpZHhdWzRdLCBcIi1cIiArIFN0cmluZyhnYWluX2NvdW50KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJldGFpbl9jb3N0ID0gdGhpcy5yZXRhaW5fY29zdCAtIGdhaW5fY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMl0gPT0gXCJcdTYyQzZcdTgwQTFcIilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbcmF3X3JlY29yZFtpZHhdWzBdLCByYXdfcmVjb3JkW2lkeF1bMV0sIHJhd19yZWNvcmRbaWR4XVsyXSwgcmF3X3JlY29yZFtpZHhdWzNdLCByYXdfcmVjb3JkW2lkeF1bNF0sIFwiLS1cIiwgcmF3X3JlY29yZFtpZHhdWzRdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxfcmV0YWluID0gdGhpcy50b3RhbF9yZXRhaW4gKyBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd19yZWNvcmRbaWR4XVswXSA9PSBcIlNFTExcIiAmJiByYXdfcmVjb3JkW2lkeF1bMl0uc3RhcnRzV2l0aChcIlx1NTIyOVx1NkRBNlwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG90YWxfcmV0YWluID0gdGhpcy50b3RhbF9yZXRhaW4gLSBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXRhaW5fY29zdCA9IHRoaXMucmV0YWluX2Nvc3QgLSBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzNdKSAqIE51bWJlcihyYXdfcmVjb3JkW2lkeF1bNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRhaW5fc2VsbCA9IHJldGFpbl9zZWxsICsgTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWxsX2NvdW50ID0gdGhpcy5jbGVhcl9zZWxsX3JlY29yZC5nZXQocmF3X3JlY29yZFtpZHhdWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGxfY291bnQgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxsX2NvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyX3NlbGxfcmVjb3JkLnNldChyYXdfcmVjb3JkW2lkeF1bMl0sIHNlbGxfY291bnQgKyBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzRdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbcmF3X3JlY29yZFtpZHhdWzBdLCByYXdfcmVjb3JkW2lkeF1bMV0sIHJhd19yZWNvcmRbaWR4XVsyXSwgcmF3X3JlY29yZFtpZHhdWzNdLCByYXdfcmVjb3JkW2lkeF1bNF1dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRvdGFsX2hvbGQgPSB0aGlzLnRvdGFsX2hvbGQgKyB0aGlzLnRvdGFsX3JldGFpbjtcclxuICAgICAgICB0aGlzLnRvdGFsX2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3QgKyB0aGlzLnJldGFpbl9jb3N0O1xyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsX2Nvc3QgIT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbXCJDb3N0XCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFN0cmluZyh0aGlzLnRvdGFsX2Nvc3QpLCBcIlwiLCBcIlwiXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsX3JldGFpbiAgPD0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvdGFsX2hvbGQgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW1wiUmV0YWluXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFN0cmluZyh0aGlzLnRvdGFsX2hvbGQpLCBcIlwiLCAgXCIwXCIsIFwiXCJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbXCJSZXRhaW5cIiwgXCJcIiwgXCJcIiwgXCJcIiwgU3RyaW5nKHRoaXMudG90YWxfaG9sZCksIFwiXCIsICBTdHJpbmcodGhpcy50b3RhbF9yZXRhaW4pLCBcIlwiXSk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudF9wY3QgPSBNeUNlaWwodGhpcy5jdXJyZW50X3ByaWNlIC8gdGhpcy50YXJnZXRfcHJpY2UsIDAuMDAxKTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleD0xOyBpbmRleDw9MzsgaW5kZXgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuR2VuZXJhdGVDbGVhclJvdyhQRVJGSVRfVFlQRV9OQU1FX1NUUiwgaW5kZXgsIHRoaXMuZ3JpZF9zZXR0aW5ncy5DTEVBUl9TVEVQX1BDVCwgTXlGbG9vcigodGhpcy50b3RhbF9yZXRhaW4gKyByZXRhaW5fc2VsbCkgLyAzLCAxMDApKTtcclxuICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlLnB1c2gocm93KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRfcGN0ICsgdGhpcy5ncmlkX3NldHRpbmdzLk1BWF9SSVNFX1BDVCA+PSBUb051bWJlcihyb3dbMV0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2godGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdJbmNvbWUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudHJhZGluZ19pbmNvbWUgPSBbXTtcclxuICAgICAgICB0aGlzLnRyYWRpbmdfaW5jb21lLnB1c2goW1wiXCIsIFwiXHU2MzAxXHU0RUQzXHU4MEExXHU2NTcwXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCIsIFwiXHU2MzAxXHU0RUQzXHU1NzQ3XHU0RUY3XCIsIFwiXHU1QjlFXHU5NjQ1XHU0RUY3XHU2ODNDXCIsIFwiXHU2MzAxXHU0RUQzXHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU4RDQ0XHU5MUQxXCIsIFwiXHU4RDI2XHU5NzYyXHU4RDQ0XHU5MUQxXCIsIFwiXHU2Mjk1XHU1MTY1XHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU0RUQzXHU0RjREXCJdKTtcclxuICAgICAgICB0aGlzLnRyYWRpbmdfaW5jb21lLnB1c2godGhpcy5HZW5lcmF0ZUluY29tZVJvdyhcIlx1N0QyRlx1OEJBMVx1N0I3OVx1NzgwMVwiLCB0aGlzLnRvdGFsX3JldGFpbiwgdGhpcy5yZXRhaW5fY29zdCwgdGhpcy5jdXJyZW50X3ByaWNlLCB0aGlzLnJldGFpbl9jb3N0LCAwLCAwKSk7XHJcblxyXG4gICAgICAgIC8vIFx1NUY1M1x1NTI0RFx1NjMwMVx1NEVEM1xyXG4gICAgICAgIHRoaXMuQ2FsY1RyYWRpbmdJbmNvbWUoXCJcdTVGNTNcdTUyNERcIiwgdGhpcy5jdXJyZW50X3ByaWNlIC8gdGhpcy50YXJnZXRfcHJpY2UsIHRoaXMuZW1wdHlfcHJpY2UsIHRoaXMuY2xlYXJfYXZnX3ByaWNlLCB0aGlzLmNsZWFyX3ByaWNlLCBmYWxzZSk7XHJcbiAgICAgICAgLy8gXHU3N0VEXHU2NzFGXHU1NkRFXHU4QzAzXHJcbiAgICAgICAgdGhpcy5DYWxjVHJhZGluZ0luY29tZShcIlx1NTZERVx1OEMwM1wiLCB0aGlzLmdyaWRfc2V0dGluZ3MuQk9UVE9NX0JVWV9QQ1QsIHRoaXMuZW1wdHlfcHJpY2UsIHRoaXMuY2xlYXJfYXZnX3ByaWNlLCB0aGlzLmNsZWFyX3ByaWNlKTtcclxuICAgICAgICAvLyBcdTY3MDBcdTU5MjdcdTU2REVcdTY0QTRcclxuICAgICAgICB0aGlzLkNhbGNUcmFkaW5nSW5jb21lKFwiXHU2NzAwXHU1OTI3XCIsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5JTVVNX0JVWV9QQ1QsIHRoaXMuZW1wdHlfcHJpY2UsIHRoaXMuY2xlYXJfYXZnX3ByaWNlLCB0aGlzLmNsZWFyX3ByaWNlKTtcclxuICAgIH1cclxuXHJcbiAgICBJbml0SG9sZGluZ0FuYWx5c2lzKClcclxuICAgIHtcclxuICAgICAgICBjb25zdCB0b3RhbF9ob2xkID0gdGhpcy50b3RhbF9ob2xkO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsX2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3Q7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OO1xyXG5cclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXMgPSBbXTtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXMucHVzaChbXCJcdTdCNzlcdTc4MDFcdTdDN0JcdTU3OEJcIiwgXCJcdTYzMDFcdTRFRDNcdTgwQTFcdTY1NzBcIiwgXCJcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcIiwgXCJcdTYzMDFcdTRFRDNcdTkxRDFcdTk4OURcIiwgXCJcdTYzMDFcdTRFRDNcdTU3NDdcdTRFRjdcIiwgXCJcdTVGNTNcdTUyNERcdTRFRjdcdTY4M0NcIiwgXCJcdTYzMDFcdTRFRDNcdTc2QzhcdTRFOEZcIiwgXCJcdTZFMDVcdTY4M0NcdTc2QzhcdTUyMjlcIiwgXCJcdTZFMDVcdTRFRDNcdTc2QzhcdTUyMjlcIiwgXCJcdTYzMDFcdTRFRDNcdTUzNjBcdTZCRDRcIiwgXCJcdTY3MkNcdTkxRDFcdTUzNjBcdTZCRDRcIl0pO1xyXG4gICAgICAgIC8vIFx1NjAzQlx1OTg5RFxyXG4gICAgICAgIHRoaXMuaG9sZGluZ19hbmFseXNpcy5wdXNoKFtcIlx1NjAzQlx1OTg5RFwiLF0pO1xyXG4gICAgICAgIC8vIFx1NUMwRlx1N0Y1MVxyXG4gICAgICAgIHRoaXMuQ2FsY0hvbGRpbmdQZXJjZW50KFwiXHU1QzBGXHU3RjUxXCIsIHRoaXMuZW1wdHlfcHJpY2UsIHRoaXMuY2xlYXJfYXZnX3ByaWNlKTtcclxuICAgICAgICAvLyBcdTRFMkRcdTdGNTFcclxuICAgICAgICB0aGlzLkNhbGNIb2xkaW5nUGVyY2VudChcIlx1NEUyRFx1N0Y1MVwiLCB0aGlzLmVtcHR5X3ByaWNlLCB0aGlzLmNsZWFyX2F2Z19wcmljZSk7XHJcbiAgICAgICAgLy8gXHU1OTI3XHU3RjUxXHJcbiAgICAgICAgdGhpcy5DYWxjSG9sZGluZ1BlcmNlbnQoXCJcdTU5MjdcdTdGNTFcIiwgdGhpcy5lbXB0eV9wcmljZSwgdGhpcy5jbGVhcl9hdmdfcHJpY2UpO1xyXG4gICAgICAgIC8vIFx1N0QyRlx1NzlFRlxyXG4gICAgICAgIGxldCBncmlkX3RvdGFsX2hvbGQgPSB0aGlzLnRvdGFsX3JldGFpbjtcclxuICAgICAgICBsZXQgZ3JpZF90b3RhbF9jb3N0ID0gdGhpcy5yZXRhaW5fY29zdDtcclxuICAgICAgICBsZXQgZ3JpZF9jdXJyZW50X3ZhbHVlID0gTWF0aC5mbG9vcihncmlkX3RvdGFsX2hvbGQgKiB0aGlzLmN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgIGxldCBncmlkX2VtcHR5X2luY29tZSA9IGdyaWRfdG90YWxfaG9sZCAqIHRoaXMuZW1wdHlfcHJpY2UgLSBncmlkX3RvdGFsX2Nvc3Q7XHJcbiAgICAgICAgbGV0IGdyaWRfY2xlYXJfaW5jb21lID0gZ3JpZF90b3RhbF9ob2xkICogdGhpcy5jbGVhcl9hdmdfcHJpY2UgLSBncmlkX3RvdGFsX2Nvc3Q7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX2FuYWx5c2lzLnB1c2goW1wiXHU3RDJGXHU3OUVGXCIsIFN0cmluZyhncmlkX3RvdGFsX2hvbGQpLCBTdHJpbmcoZ3JpZF90b3RhbF9jb3N0KSwgU3RyaW5nKGdyaWRfY3VycmVudF92YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBBdmVyYWdlUHJpY2VTdHIoZ3JpZF90b3RhbF9jb3N0LCBncmlkX3RvdGFsX2hvbGQsIHByZWNpc2lvbiksIHRoaXMuY3VycmVudF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcoZ3JpZF9jdXJyZW50X3ZhbHVlIC0gZ3JpZF90b3RhbF9jb3N0KSwgZ3JpZF9lbXB0eV9pbmNvbWUudG9GaXhlZCgwKSwgZ3JpZF9jbGVhcl9pbmNvbWUudG9GaXhlZCgwKSwgXHJcbiAgICAgICAgICAgICAgICBQcm9wb3J0aW9uUGN0U3RyKGdyaWRfdG90YWxfaG9sZCwgdG90YWxfaG9sZCwgMiksIFByb3BvcnRpb25QY3RTdHIoZ3JpZF90b3RhbF9jb3N0LCB0b3RhbF9jb3N0LCAyKV0pO1xyXG4gICAgICAgIC8vIFx1ODg2NVx1NEVEM1xyXG4gICAgICAgIGdyaWRfdG90YWxfaG9sZCA9IDA7XHJcbiAgICAgICAgZ3JpZF90b3RhbF9jb3N0ID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuaG9sZGluZ19yZWNvcmQubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bMl0uc3RhcnRzV2l0aChcIlx1ODg2NVx1NEVEM1wiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ3JpZF90b3RhbF9ob2xkICs9IE51bWJlcih0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bNF0pO1xyXG4gICAgICAgICAgICAgICAgZ3JpZF90b3RhbF9jb3N0ICs9IE51bWJlcih0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bM10pICogTnVtYmVyKHRoaXMuaG9sZGluZ19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JpZF90b3RhbF9jb3N0ID0gTWF0aC5jZWlsKGdyaWRfdG90YWxfY29zdCk7XHJcbiAgICAgICAgZ3JpZF9jdXJyZW50X3ZhbHVlID0gTWF0aC5mbG9vcihncmlkX3RvdGFsX2hvbGQgKiB0aGlzLmN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgIGdyaWRfZW1wdHlfaW5jb21lID0gZ3JpZF90b3RhbF9ob2xkICogdGhpcy5lbXB0eV9wcmljZSAtIGdyaWRfdG90YWxfY29zdDtcclxuICAgICAgICBncmlkX2NsZWFyX2luY29tZSA9IGdyaWRfdG90YWxfaG9sZCAqIHRoaXMuY2xlYXJfYXZnX3ByaWNlIC0gZ3JpZF90b3RhbF9jb3N0O1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19hbmFseXNpcy5wdXNoKFtcIlx1ODg2NVx1NEVEM1wiLCBTdHJpbmcoZ3JpZF90b3RhbF9ob2xkKSwgU3RyaW5nKGdyaWRfdG90YWxfY29zdCksIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgQXZlcmFnZVByaWNlU3RyKGdyaWRfdG90YWxfY29zdCwgZ3JpZF90b3RhbF9ob2xkLCBwcmVjaXNpb24pLCB0aGlzLmN1cnJlbnRfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nKGdyaWRfY3VycmVudF92YWx1ZSAtIGdyaWRfdG90YWxfY29zdCksIGdyaWRfZW1wdHlfaW5jb21lLnRvRml4ZWQoMCksIGdyaWRfY2xlYXJfaW5jb21lLnRvRml4ZWQoMCksIFxyXG4gICAgICAgICAgICAgICAgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2hvbGQsIHRvdGFsX2hvbGQsIDIpLCBQcm9wb3J0aW9uUGN0U3RyKGdyaWRfdG90YWxfY29zdCwgdG90YWxfY29zdCwgMildKTtcclxuICAgICAgICAvLyBcdTYwM0JcdTk4OURcclxuICAgICAgICBncmlkX3RvdGFsX2hvbGQgPSAwO1xyXG4gICAgICAgIGdyaWRfdG90YWxfY29zdCA9IDA7XHJcbiAgICAgICAgZ3JpZF9jdXJyZW50X3ZhbHVlID0gMDtcclxuICAgICAgICBncmlkX2VtcHR5X2luY29tZSA9IDA7XHJcbiAgICAgICAgZ3JpZF9jbGVhcl9pbmNvbWUgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0yOyBpZHg8dGhpcy5ob2xkaW5nX2FuYWx5c2lzLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBncmlkX3RvdGFsX2hvbGQgKz0gTnVtYmVyKHRoaXMuaG9sZGluZ19hbmFseXNpc1tpZHhdWzFdKTtcclxuICAgICAgICAgICAgZ3JpZF90b3RhbF9jb3N0ICs9IE51bWJlcih0aGlzLmhvbGRpbmdfYW5hbHlzaXNbaWR4XVsyXSk7XHJcbiAgICAgICAgICAgIGdyaWRfY3VycmVudF92YWx1ZSArPSBOdW1iZXIodGhpcy5ob2xkaW5nX2FuYWx5c2lzW2lkeF1bM10pO1xyXG4gICAgICAgICAgICBncmlkX2VtcHR5X2luY29tZSArPSBOdW1iZXIodGhpcy5ob2xkaW5nX2FuYWx5c2lzW2lkeF1bN10pO1xyXG4gICAgICAgICAgICBncmlkX2NsZWFyX2luY29tZSArPSBOdW1iZXIodGhpcy5ob2xkaW5nX2FuYWx5c2lzW2lkeF1bOF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXNbMV0gPSBbXCJcdTYwM0JcdTk4OURcIiwgU3RyaW5nKGdyaWRfdG90YWxfaG9sZCksIFN0cmluZyhncmlkX3RvdGFsX2Nvc3QpLCBTdHJpbmcoZ3JpZF9jdXJyZW50X3ZhbHVlKSxcclxuICAgICAgICAgICAgICAgIEF2ZXJhZ2VQcmljZVN0cihncmlkX3RvdGFsX2Nvc3QsIGdyaWRfdG90YWxfaG9sZCwgcHJlY2lzaW9uKSwgdGhpcy5jdXJyZW50X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUgLSBncmlkX3RvdGFsX2Nvc3QpLCBncmlkX2VtcHR5X2luY29tZS50b0ZpeGVkKDApLCBncmlkX2NsZWFyX2luY29tZS50b0ZpeGVkKDApLCBcclxuICAgICAgICAgICAgICAgIFByb3BvcnRpb25QY3RTdHIoZ3JpZF90b3RhbF9ob2xkLCB0b3RhbF9ob2xkLCAyKSwgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2Nvc3QsIHRvdGFsX2Nvc3QsIDIpXTtcclxuICAgIH1cclxuXHJcbiAgICBDYWxjSG9sZGluZ1BlcmNlbnQoZ3JpZF90eXBlOiBzdHJpbmcsIGVtcHR5X3ByaWNlOiBudW1iZXIsIGNsZWFyX2F2Z19wcmljZTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHRvdGFsX2hvbGQgPSB0aGlzLnRvdGFsX2hvbGQ7XHJcbiAgICAgICAgY29uc3QgdG90YWxfY29zdCA9IHRoaXMudG90YWxfY29zdDtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGdyaWRfdG90YWxfaG9sZCA9IDA7IC8vIFx1NjMwMVx1NEVEM1x1ODBBMVx1NjU3MFxyXG4gICAgICAgIGxldCBncmlkX3RvdGFsX2Nvc3QgPSAwOyAvLyBcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcclxuICAgICAgICBsZXQgZ3JpZF9lbXB0eV9pbmNvbWUgPSAwOyAvLyBcdTZFMDVcdTY4M0NcdTc2QzhcdTUyMjlcclxuICAgICAgICBsZXQgZ3JpZF9jbGVhcl9pbmNvbWUgPSAwOyAvLyBcdTZFMDVcdTRFRDNcdTc2QzhcdTUyMjlcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuaG9sZGluZ19yZWNvcmQubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bMl0uc3RhcnRzV2l0aChncmlkX3R5cGUpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmlkX2hvbGQgPSBOdW1iZXIodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRfY29zdCA9IE51bWJlcih0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bM10pICogTnVtYmVyKHRoaXMuaG9sZGluZ19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICBncmlkX3RvdGFsX2hvbGQgKz0gZ3JpZF9ob2xkO1xyXG4gICAgICAgICAgICAgICAgZ3JpZF90b3RhbF9jb3N0ICs9IGdyaWRfY29zdDtcclxuICAgICAgICAgICAgICAgIGxldCBncmlkX3JvdyA9IHRoaXMuRmluZFRyYWRpbmdHcmlkUm93KHRoaXMuaG9sZGluZ19yZWNvcmRbaWR4XVsyXSk7IC8vIDcgOCA5IFwiXHU1MzU2XHU1MUZBXHU0RUY3XHU2ODNDXCIsIFwiXHU1MzU2XHU1MUZBXHU0RUZEXHU2NTcwXCIsIFwiXHU1MzU2XHU1MUZBXHU5MUQxXHU5ODlEXCJcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVtcHR5X2luY29tZSA9IE51bWJlcihncmlkX3Jvd1s5XSkgKyAoZ3JpZF9ob2xkIC0gTnVtYmVyKGdyaWRfcm93WzhdKSkgKiBlbXB0eV9wcmljZSAtIGdyaWRfY29zdDtcclxuICAgICAgICAgICAgICAgIGdyaWRfZW1wdHlfaW5jb21lICs9IGVtcHR5X2luY29tZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFyX2luY29tZSA9IE51bWJlcihncmlkX3Jvd1s5XSkgKyAoZ3JpZF9ob2xkIC0gTnVtYmVyKGdyaWRfcm93WzhdKSkgKiBjbGVhcl9hdmdfcHJpY2UgLSBncmlkX2Nvc3Q7XHJcbiAgICAgICAgICAgICAgICBncmlkX2NsZWFyX2luY29tZSArPSBjbGVhcl9pbmNvbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JpZF90b3RhbF9jb3N0ID0gTWF0aC5jZWlsKGdyaWRfdG90YWxfY29zdCk7XHJcbiAgICAgICAgbGV0IGdyaWRfY3VycmVudF92YWx1ZSA9IE1hdGguZmxvb3IoZ3JpZF90b3RhbF9ob2xkICogdGhpcy5jdXJyZW50X3ByaWNlKTtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXMucHVzaChbZ3JpZF90eXBlLCBTdHJpbmcoZ3JpZF90b3RhbF9ob2xkKSwgU3RyaW5nKGdyaWRfdG90YWxfY29zdCksIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgQXZlcmFnZVByaWNlU3RyKGdyaWRfdG90YWxfY29zdCwgZ3JpZF90b3RhbF9ob2xkLCBwcmVjaXNpb24pLCB0aGlzLmN1cnJlbnRfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nKGdyaWRfY3VycmVudF92YWx1ZSAtIGdyaWRfdG90YWxfY29zdCksIGdyaWRfZW1wdHlfaW5jb21lLnRvRml4ZWQoMCksIGdyaWRfY2xlYXJfaW5jb21lLnRvRml4ZWQoMCksIFxyXG4gICAgICAgICAgICAgICAgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2hvbGQsIHRvdGFsX2hvbGQsIDIpLCBQcm9wb3J0aW9uUGN0U3RyKGdyaWRfdG90YWxfY29zdCwgdG90YWxfY29zdCwgMildKTtcclxuICAgIH1cclxuXHJcbiAgICBDYWxjVHJhZGluZ0luY29tZSh0aXRsZV90eHQ6IHN0cmluZywgc2x1bXBfcGN0OiBudW1iZXIsIGVtcHR5X3ByaWNlOiBudW1iZXIsIGNsZWFyX2F2Z19wcmljZTogbnVtYmVyLCBjbGVhcl9wcmljZTogbnVtYmVyLCBuZWVkX3NsdW1wOiBib29sZWFuID0gdHJ1ZSlcclxuICAgIHtcclxuICAgICAgICBsZXQgdG90YWxfY29zdCA9IHRoaXMudG90YWxfY29zdDtcclxuICAgICAgICBsZXQgdG90YWxfY291bnQgPSB0aGlzLnRvdGFsX2hvbGQ7XHJcbiAgICAgICAgbGV0IGVtcHR5X2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3Q7XHJcbiAgICAgICAgbGV0IGVtcHR5X2NvdW50ID0gdGhpcy50b3RhbF9ob2xkO1xyXG4gICAgICAgIGxldCBjbGVhcl9pbmNvbWVfbWF4ID0gMDtcclxuICAgICAgICBsZXQgdG90YWxfc2VsbF9jb3N0ID0gMDtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlLmZvckVhY2goKHJvdzpBcnJheTxzdHJpbmc+LCBpOm51bWJlcikgPT5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWRpbmdfdGFibGVbaV1bMF0uc3RhcnRzV2l0aChcIlx1NTIyOVx1NkRBNlwiKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJfaW5jb21lX21heCA9IGNsZWFyX2luY29tZV9tYXggKyBOdW1iZXIodGhpcy50cmFkaW5nX3RhYmxlW2ldWzldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbaV1bMF0pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtcHR5X2Nvc3QgPSBlbXB0eV9jb3N0IC0gTnVtYmVyKHJvd1s5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1wdHlfY291bnQgPSBlbXB0eV9jb3VudCAtIE51bWJlcihyb3dbOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyX2luY29tZV9tYXggPSBjbGVhcl9pbmNvbWVfbWF4ICsgKE51bWJlcihyb3dbNF0pIC0gTnVtYmVyKHJvd1s4XSkpICogY2xlYXJfYXZnX3ByaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX3NlbGxfY29zdCA9IHRvdGFsX3NlbGxfY29zdCArIE51bWJlcihyb3dbOV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiBUb051bWJlcihyb3dbMV0pID49IHNsdW1wX3BjdCAmJiBuZWVkX3NsdW1wKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfY29zdCA9IHRvdGFsX2Nvc3QgKyBOdW1iZXIocm93WzVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxfY291bnQgPSB0b3RhbF9jb3VudCArIE51bWJlcihyb3dbNF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlfY29zdCA9IGVtcHR5X2Nvc3QgKyBOdW1iZXIocm93WzVdKSAtIE51bWJlcihyb3dbOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eV9jb3VudCA9IGVtcHR5X2NvdW50ICsgTnVtYmVyKHJvd1s0XSkgLSBOdW1iZXIocm93WzhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfaW5jb21lX21heCA9IGNsZWFyX2luY29tZV9tYXggKyAoTnVtYmVyKHJvd1s0XSkgLSBOdW1iZXIocm93WzhdKSkgKiBjbGVhcl9hdmdfcHJpY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsX3NlbGxfY29zdCA9IHRvdGFsX3NlbGxfY29zdCArIE51bWJlcihyb3dbOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNsZWFyX2luY29tZV9tYXggPSBNYXRoLmZsb29yKGNsZWFyX2luY29tZV9tYXggLSBlbXB0eV9jb3N0KTtcclxuICAgICAgICAvLyBbXCJcIiwgXCJcdTYzMDFcdTRFRDNcdTgwQTFcdTY1NzBcIiwgXCJcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcIiwgXCJcdTYzMDFcdTRFRDNcdTkxRDFcdTk4OURcIiwgXCJcdTYzMDFcdTRFRDNcdTU3NDdcdTRFRjdcIiwgXCJcdTVCOUVcdTk2NDVcdTRFRjdcdTY4M0NcIiwgXCJcdTYzMDFcdTRFRDNcdTc2QzhcdTRFOEZcIiwgXCJcdTYyOTVcdTUxNjVcdThENDRcdTkxRDFcIiwgXCJcdThEMjZcdTk3NjJcdThENDRcdTkxRDFcIiwgXCJcdTYyOTVcdTUxNjVcdTc2QzhcdTRFOEZcIiwgXCJcdTYyOTVcdTUxNjVcdTRFRDNcdTRGNERcIl1cclxuICAgICAgICB0aGlzLnRyYWRpbmdfaW5jb21lLnB1c2godGhpcy5HZW5lcmF0ZUluY29tZVJvdyh0aXRsZV90eHQgKyBcIlx1NjMwMVx1NEVEM1wiLCB0b3RhbF9jb3VudCwgdG90YWxfY29zdCwgdGhpcy50YXJnZXRfcHJpY2UgKiBzbHVtcF9wY3QsIHRvdGFsX2Nvc3QsIHRoaXMudG90YWxfY29zdCwgMCkpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ19pbmNvbWUucHVzaCh0aGlzLkdlbmVyYXRlSW5jb21lUm93KHRpdGxlX3R4dCArIFwiXHU2RTA1XHU2ODNDXCIsIGVtcHR5X2NvdW50LCBlbXB0eV9jb3N0LCBlbXB0eV9wcmljZSwgdG90YWxfY29zdCwgMCwgdG90YWxfc2VsbF9jb3N0KSk7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX2luY29tZS5wdXNoKFt0aXRsZV90eHQgKyBcIlx1NkUwNVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIi1cIiwgY2xlYXJfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLCBTdHJpbmcoY2xlYXJfaW5jb21lX21heCksIFN0cmluZyh0b3RhbF9jb3N0KSwgXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRvdGFsX3NlbGxfY29zdCArIGVtcHR5X2Nvc3QgKyBjbGVhcl9pbmNvbWVfbWF4KSwgVG9UcmFkaW5nR2FwKHRvdGFsX2Nvc3QsIHRvdGFsX3NlbGxfY29zdCArIGVtcHR5X2Nvc3QgKyBjbGVhcl9pbmNvbWVfbWF4LCAyKSwgXCItXCJdKTtcclxuICAgIH1cclxuXHJcbiAgICBHZW5lcmF0ZUNsZWFyUm93KGdyaWRfbmFtZTogc3RyaW5nLCBpZHg6IG51bWJlciwgZ3JpZF9zdGVwX3BjdDogbnVtYmVyLCBzZWxsX2NvdW50OiBudW1iZXIpOiBzdHJpbmdbXVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTjtcclxuICAgICAgICBjb25zdCBwcmljZV9zdGVwID0gTWF0aC5mbG9vcigoMTAwICsgTWF0aC5mbG9vcihncmlkX3N0ZXBfcGN0ICogMTAwKSkgKiogaWR4IC8gMTAwICoqIChpZHggLTEpKSAvIDEwMDtcclxuICAgICAgICBjb25zdCBzZWxsX3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgcHJpY2Vfc3RlcCwgcHJlY2lzaW9uKTtcclxuICAgICAgICBsZXQgY2xlYXJfY291bnQgPSB0aGlzLmNsZWFyX3NlbGxfcmVjb3JkLmdldChncmlkX25hbWUgKyBTdHJpbmcoaWR4KSk7XHJcbiAgICAgICAgaWYgKGNsZWFyX2NvdW50ID09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNsZWFyX2NvdW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtncmlkX25hbWUgKyBTdHJpbmcoaWR4KSwgVG9QZXJjZW50KHByaWNlX3N0ZXApLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCAoc2VsbF9wcmljZSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgc2VsbF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksIFN0cmluZyhzZWxsX2NvdW50IC0gY2xlYXJfY291bnQpLCBTdHJpbmcoTWF0aC5jZWlsKHNlbGxfcHJpY2UgKiAoc2VsbF9jb3VudCAtIGNsZWFyX2NvdW50KSkpLCBcIi1cIiwgXCIrXCIgKyBUb1BlcmNlbnQoZ3JpZF9zdGVwX3BjdCldXHJcbiAgICB9XHJcblxyXG4gICAgR2VuZXJhdGVJbmNvbWVSb3coZ3JpZF9uYW1lOiBzdHJpbmcsIHRvdGFsX2NvdW50OiBudW1iZXIsIHRvdGFsX2Nvc3Q6IG51bWJlciwgY3VycmVudF9wcmljZTogbnVtYmVyLCBtYXhfY29zdDogbnVtYmVyLCBjdXJyZW50X2Nvc3Q6IG51bWJlciwgc2VsbF92YWx1ZTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFtcIlwiLCBcIlx1NjMwMVx1NEVEM1x1ODBBMVx1NjU3MFwiLCBcIlx1NTM2MFx1NzUyOFx1NjcyQ1x1OTFEMVwiLCBcIlx1NjMwMVx1NEVEM1x1OTFEMVx1OTg5RFwiLCBcIlx1NjMwMVx1NEVEM1x1NTc0N1x1NEVGN1wiLCBcIlx1NUI5RVx1OTY0NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NjMwMVx1NEVEM1x1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1OEQ0NFx1OTFEMVwiLCBcIlx1OEQyNlx1OTc2Mlx1OEQ0NFx1OTFEMVwiLCBcIlx1NjI5NVx1NTE2NVx1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1NEVEM1x1NEY0RFwiXVxyXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTjtcclxuICAgICAgICBjb25zdCBjdXJyZW50X3ZhbHVlID0gTXlGbG9vcih0b3RhbF9jb3VudCAqIGN1cnJlbnRfcHJpY2UsIDEpO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsX2luY29tZSA9IGN1cnJlbnRfdmFsdWUgLSB0b3RhbF9jb3N0O1xyXG4gICAgICAgIGxldCBwb3NpdGlvbiA9IFRvUGVyY2VudChjdXJyZW50X2Nvc3QgLyBtYXhfY29zdCk7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRfY29zdCA9PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBcIi1cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtncmlkX25hbWUsIFN0cmluZyh0b3RhbF9jb3VudCksIFN0cmluZyh0b3RhbF9jb3N0KSwgU3RyaW5nKGN1cnJlbnRfdmFsdWUpLCAodG90YWxfY29zdCAvIE1hdGgubWF4KHRvdGFsX2NvdW50LCAxKSkudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksIFN0cmluZyh0b3RhbF9pbmNvbWUpLCBTdHJpbmcobWF4X2Nvc3QpLCAgU3RyaW5nKHNlbGxfdmFsdWUgKyBjdXJyZW50X3ZhbHVlKSwgVG9UcmFkaW5nR2FwKG1heF9jb3N0LCB0b3RhbF9pbmNvbWUgKyBtYXhfY29zdCwgMiksIHBvc2l0aW9uXTtcclxuICAgIH1cclxuXHJcbiAgICBDYWxjQ2xlYXJQcmljZShzdGVwX3BjdDogbnVtYmVyLCBzdGVwX2lkeDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTjtcclxuICAgICAgICBjb25zdCBwcmljZV9zdGVwID0gTWF0aC5mbG9vcigoMTAwICsgTWF0aC5mbG9vcihzdGVwX3BjdCAqIDEwMCkpICoqIHN0ZXBfaWR4IC8gMTAwICoqIChzdGVwX2lkeCAtMSkpIC8gMTAwO1xyXG4gICAgICAgIHJldHVybiBGaXhlZFByaWNlKHRoaXMudGFyZ2V0X3ByaWNlLCBwcmljZV9zdGVwLCBwcmVjaXNpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIElzTmVlZE1vbml0b3IodGFibGVfaW5kZXg6IG51bWJlciwgaXNfc2VsbDogYm9vbGVhbiwgY3VycmVudF9wcmljZTogbnVtYmVyLCBtYXhfcmlzZV9wY3Q6IG51bWJlcik6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICBpZiAoaXNfc2VsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1ODk4MVx1NjMwMlx1NTM1Nlx1NTFGQVx1NzZEMVx1NjNBN1x1NTM1NVxyXG4gICAgICAgICAgICBjb25zdCBzZWxsX3ByaWNlID0gTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVt0YWJsZV9pbmRleF1bN10pO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudF9wcmljZSAqICgxLjAgKyBtYXhfcmlzZV9wY3QpID49IHNlbGxfcHJpY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1ODk4MVx1NjMwMlx1NEU3MFx1NTE2NVx1NzZEMVx1NjNBN1x1NTM1NVxyXG4gICAgICAgICAgICBjb25zdCBidXlfcHJpY2UgPSBOdW1iZXIodGhpcy50cmFkaW5nX3RhYmxlW3RhYmxlX2luZGV4XVszXSk7XHJcbiAgICAgICAgICAgIGlmIChidXlfcHJpY2UgPCB0aGlzLnRhcmdldF9wcmljZSAqIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5JTVVNX0JVWV9QQ1QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3VycmVudF9wcmljZSAqICgxLjAgLSBtYXhfcmlzZV9wY3QpIDw9IGJ1eV9wcmljZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSXNEaXNhYmxlUm93KHRhYmxlX2luZGV4OiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcHJpY2VfcGN0ID0gVG9OdW1iZXIodGhpcy50cmFkaW5nX3RhYmxlW3RhYmxlX2luZGV4XVsxXSk7XHJcbiAgICAgICAgaWYgKHByaWNlX3BjdCA8IHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5JTVVNX0JVWV9QQ1QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBGaW5kVHJhZGluZ0dyaWRSb3coZ3JpZF9uYW1lOiBzdHJpbmcpOiBzdHJpbmcgW11cclxuICAgIHtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHJhZGluZ190YWJsZVtpZHhdWzBdID09IGdyaWRfbmFtZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhZGluZ190YWJsZVtpZHhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBTb3J0VHJhZGluZ1RhYmxlKClcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aCA8PSAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGUucHVzaChbXCJcdTUwNUNcdTZCNjJcdTdFQkZcIiwgXCIwJVwiLF0pO1xyXG4gICAgICAgIGxldCBtb3ZlX2lkeCA9IDA7XHJcbiAgICAgICAgbGV0IG1vdmVfcm93ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHJhZGluZ190YWJsZVtpZHhdWzFdID09IFwiMCVcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KGlkeCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1vdmVfaWR4ID0gaWR4O1xyXG4gICAgICAgICAgICAgICAgbW92ZV9yb3cgPSB0aGlzLnRyYWRpbmdfdGFibGVbbW92ZV9pZHhdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaWR4Mj1tb3ZlX2lkeDsgaWR4Mjx0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoIC0gMTsgaWR4MisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtpZHgyXSA9IHRoaXMudHJhZGluZ190YWJsZVtpZHgyICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV5X21vbml0b3Jfcm93cy5pbmRleE9mKGlkeDIrMSkgIT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3NbdGhpcy5idXlfbW9uaXRvcl9yb3dzLmluZGV4T2YoaWR4MisxKV0gPSBpZHgyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MuaW5kZXhPZihpZHgyKzEpICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MuaW5kZXhPZihpZHgyKzEpXSA9IGlkeDI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLmluZGV4T2YoaWR4MisxKSAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3NbdGhpcy5zZWxsX21vbml0b3Jfcm93cy5pbmRleE9mKGlkeDIrMSldID0gaWR4MjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5pbmRleE9mKGlkeDIrMSkgIT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmluZGV4T2YoaWR4MisxKV0gPSBpZHgyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVt0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoLTFdID0gbW92ZV9yb3c7XHJcbiAgICAgICAgICAgICAgICBpZHgtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsICIvKlxyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU4QkExXHU3Qjk3XHU5MDNCXHU4RjkxXHVGRjBDXHU2QTIxXHU1RjBGMVx1RkYwQ1x1OUVEOFx1OEJBNFx1NkEyMVx1NUYwRlxyXG4gICAgXHU2MzA5XHU3MTY3XHU1QzBGXHU0RTJEXHU1OTI3XHU0RTBEXHU1NDBDXHU3Njg0XHU2MzA3XHU1QjlBXHU2QjY1XHU4RkRCXHU1MDNDXHJcbiovXHJcbmltcG9ydCB7IFNHUklEX1RZUEVfTkFNRV9TVFIsIE1HUklEX1RZUEVfTkFNRV9TVFIsIExHUklEX1RZUEVfTkFNRV9TVFIsIFBFUkZJVF9UWVBFX05BTUVfU1RSIH0gZnJvbSBcIi4vbGFuZ19zdHJcIjtcclxuaW1wb3J0IHsgTXlGbG9vciwgTXlDZWlsLCBUb1BlcmNlbnQsIFRvTnVtYmVyLCBUb1RyYWRpbmdHYXAsIEZpeGVkUHJpY2UsIFRvUGVyY2VudFN0ciB9IGZyb20gXCIuL215bWF0aFwiO1xyXG5pbXBvcnQgeyBQbHVnaW5FbnYgfSBmcm9tIFwiLi9wbHVnaW5fZW52XCI7XHJcbmltcG9ydCB7IERlYnVnTG9nIH0gZnJvbSBcIi4vcmVtb3RlX3V0aWxcIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmcgfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR3JpZFRyYWRpbmdNb2RlT25lIGV4dGVuZHMgR3JpZFRyYWRpbmcgXHJcbntcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwbHVnaW5fZW52OiBQbHVnaW5FbnYpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIocGx1Z2luX2VudilcclxuICAgICAgICB0aGlzLm1vZGVfdHlwZSA9IFwiT25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdEdyaWRUcmFkaW5nKGRhdGE6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5QYXJzZVJhd0RhdGEoZGF0YSkgfHwgdGhpcy5pc19lbXB0eSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNfZW1wdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0R3JpZFBhcmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRTdG9ja1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdSZWNvcmQoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0SG9sZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdJbmNvbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuU29ydFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBVcGRhdGVSZW1vdGVQcmljZShyZW1vdGVfcHJpY2U6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID0gcmVtb3RlX3ByaWNlO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID4gMCAmJiB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlICE9IHRoaXMuY3VycmVudF9wcmljZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9wcmljZSA9IHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2U7XHJcbiAgICAgICAgICAgIHRoaXMuaXNfZW1wdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0R3JpZFBhcmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRTdG9ja1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdSZWNvcmQoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0SG9sZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdJbmNvbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuU29ydFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBJbml0VHJhZGluZ1RhYmxlKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzID0gW11cclxuICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGUgPSBbXVxyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZVswXSA9IFtcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVGN1x1NjgzQ1x1Njg2M1x1NEY0RFwiLCBcIlx1NEU3MFx1NTE2NVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGRFx1NjU3MFwiLCBcIlx1NEU3MFx1NTE2NVx1OTFEMVx1OTg5RFwiLCBcIlx1NTM1Nlx1NTFGQVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGN1x1NjgzQ1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGRFx1NjU3MFwiLCBcIlx1NTM1Nlx1NTFGQVx1OTFEMVx1OTg5RFwiLCBcIlx1NzZGOFx1NUJGOVx1OERDQ1x1NUU0NVwiLCBcIlx1NzZGOFx1NUJGOVx1NkRBOFx1NUU0NVwiXTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NvdW50ID0gTWF0aC5mbG9vcih0aGlzLmdyaWRfc2V0dGluZ3MuTUFYX1NMVU1QX1BDVCAvIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVCk7XHJcbiAgICAgICAgY29uc3QgbWNvdW50ID0gTWF0aC5mbG9vcih0aGlzLmdyaWRfc2V0dGluZ3MuTUFYX1NMVU1QX1BDVCAvIHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9TVEVQX1BDVCk7XHJcbiAgICAgICAgY29uc3QgbGNvdW50ID0gTWF0aC5mbG9vcih0aGlzLmdyaWRfc2V0dGluZ3MuTUFYX1NMVU1QX1BDVCAvIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCk7XHJcbiAgICAgICAgY29uc3QgbWF4X3Jpc2VfcGN0ID0gdGhpcy5ncmlkX3NldHRpbmdzLk1BWF9SSVNFX1BDVDtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PD1zY291bnQ7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW2lkeCArIDFdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyhTR1JJRF9UWVBFX05BTUVfU1RSLCBpZHgsIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfUkVUQUlOX0NPVU5ULCB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfQUREX1BDVCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW2lkeCArIDFdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKGlkeCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhpZHggKyAxKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NUMwRlx1N0Y1MVxyXG4gICAgICAgICAgICBjb25zdCBsYXN0X2J1eSA9IHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzW3RoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGFzdF9idXkgPCBzY291bnQgKyAxKSB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChsYXN0X2J1eSArIDEpO1xyXG4gICAgICAgICAgICBsZXQgbGFzdF9zZWxsID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnBvcCgpO1xyXG4gICAgICAgICAgICBpZiAobGFzdF9zZWxsKSB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsKTtcclxuICAgICAgICAgICAgLy9pZiAodGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIGlmIChmYWxzZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX3MgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfcywgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NUMwRlx1N0Y1MVx1NzY4NFx1OTk5Nlx1N0Y1MVx1NEU3MFx1NTE2NVxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdF9idXkgPSAxO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGZpcnN0X2J1eSwgZmFsc2UsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goZmlyc3RfYnV5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD1tY291bnQ7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW3Njb3VudCArIDEgKyBpZHhdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyhNR1JJRF9UWVBFX05BTUVfU1RSLCBpZHgsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9TVEVQX1BDVCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfUkVUQUlOX0NPVU5ULCB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfQUREX1BDVCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW3Njb3VudCArIDEgKyBpZHhdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzY291bnQgKyAxICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKHNjb3VudCArIDEgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU0RTJEXHU3RjUxXHU0RTcwXHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKHNjb3VudCArIDEgKyBpZHgsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goc2NvdW50ICsgMSArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KHNjb3VudCArIDEgKyBpZHgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVfcm93cy5wdXNoKHNjb3VudCArIDEgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMCAmJiB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdID4gc2NvdW50ICsgMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NTM1Nlx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfbSA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX20sIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnJlbW92ZShsYXN0X3NlbGxfbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGlkeD0xOyBpZHg8PWxjb3VudDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbc2NvdW50ICsgMSArIG1jb3VudCArIGlkeF0gPSB0aGlzLkdlbmVyYXRlT25lUm93KExHUklEX1RZUEVfTkFNRV9TVFIsIGlkeCwgdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENULFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9SRVRBSU5fQ09VTlQsIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9BRERfUENUKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbc2NvdW50ICsgMSArIG1jb3VudCArIGlkeF1bMF0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5wdXNoKHNjb3VudCArIDEgKyBtY291bnQgKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnB1c2goc2NvdW50ICsgMSArIG1jb3VudCArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTU5MjdcdTdGNTFcdTRFNzBcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3Ioc2NvdW50ICsgMSArIG1jb3VudCwgZmFsc2UsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChzY291bnQgKyAxICsgbWNvdW50ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coc2NvdW50ICsgMSArIG1jb3VudCArIGlkeCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goc2NvdW50ICsgMSArIG1jb3VudCArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwICYmIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV0gPiBzY291bnQgKyAxICsgbWNvdW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1MzU2XHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9sID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfbCwgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucmVtb3ZlKGxhc3Rfc2VsbF9sKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgR2VuZXJhdGVPbmVSb3coZ3JpZF9uYW1lOiBzdHJpbmcsIGlkeDogbnVtYmVyLCBncmlkX3N0ZXBfcGN0OiBudW1iZXIsIGdyaWRfcmV0YWluX2NvdW50OiBudW1iZXIsIGdyaWRfYWRkX3BjdDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTjtcclxuICAgICAgICBjb25zdCBidXlfcHJpY2Vfc3RlcCA9IDEwMCAtIGlkeCAqIE1hdGguZmxvb3IoZ3JpZF9zdGVwX3BjdCAqIDEwMCk7XHJcbiAgICAgICAgY29uc3QgYnV5X3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgYnV5X3ByaWNlX3N0ZXAgLyAxMDAsIHByZWNpc2lvbik7XHJcbiAgICAgICAgY29uc3QgYnV5X2NvdW50ID0gTXlGbG9vcih0aGlzLmdyaWRfc2V0dGluZ3MuT05FX0dSSURfTElNSVQgKiAoMSArIGlkeCAqIGdyaWRfYWRkX3BjdCkgLyBidXlfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5fQkFUQ0hfQ09VTlQpXHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGxfcHJpY2Vfc3RlcCA9IGJ1eV9wcmljZV9zdGVwICsgTWF0aC5mbG9vcihncmlkX3N0ZXBfcGN0ICogMTAwKTtcclxuICAgICAgICBjb25zdCBzZWxsX3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgc2VsbF9wcmljZV9zdGVwIC8gMTAwLCBwcmVjaXNpb24pO1xyXG4gICAgICAgIGNvbnN0IHJldGFpbl9jb3VudCA9IChzZWxsX3ByaWNlIC0gYnV5X3ByaWNlKSAqIGJ1eV9jb3VudCAqIGdyaWRfcmV0YWluX2NvdW50O1xyXG4gICAgICAgIGNvbnN0IHNlbGxfY291bnQgPSBNeUZsb29yKChzZWxsX3ByaWNlICogYnV5X2NvdW50IC0gcmV0YWluX2NvdW50KSAvIHNlbGxfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5fQkFUQ0hfQ09VTlQpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2dyaWRfbmFtZSArIFN0cmluZyhpZHgpLCBUb1BlcmNlbnRTdHIoYnV5X3ByaWNlX3N0ZXApLCAoYnV5X3ByaWNlICsgdGhpcy5ncmlkX3NldHRpbmdzLlRSSUdHRVJfQUREX1BPSU5UKS50b0ZpeGVkKHByZWNpc2lvbiksIFxyXG4gICAgICAgICAgICAgICAgYnV5X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSwgU3RyaW5nKGJ1eV9jb3VudCksIFN0cmluZyhNYXRoLmNlaWwoYnV5X3ByaWNlICogYnV5X2NvdW50KSksXHJcbiAgICAgICAgICAgICAgICAoc2VsbF9wcmljZSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLCBzZWxsX3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhzZWxsX2NvdW50KSwgU3RyaW5nKE1hdGguY2VpbChzZWxsX3ByaWNlICogc2VsbF9jb3VudCkpLCBUb1RyYWRpbmdHYXAoc2VsbF9wcmljZSwgYnV5X3ByaWNlLCAxKSxcclxuICAgICAgICAgICAgICAgIFRvVHJhZGluZ0dhcChidXlfcHJpY2UsIHNlbGxfcHJpY2UsIDEpXTtcclxuICAgIH1cclxufSIsICIvKlxyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU4QkExXHU3Qjk3XHU5MDNCXHU4RjkxXHVGRjBDXHU2QTIxXHU1RjBGMlxyXG4gICAgXHU2QTIxXHU1RjBGMVx1NzY4NFx1NTdGQVx1Nzg0MFx1NEUwQVx1OTAxQVx1OEZDN1x1NTIwNlx1NkJCNVx1N0I1Nlx1NzU2NVx1NEY3Rlx1NUY5N1x1NUMwRlx1N0Y1MVx1NzY4NFx1NkI2NVx1OEZEQlx1NTAzQ1x1NjZGNFx1NTJBMFx1NTc0N1x1ODg2MVxyXG4qL1xyXG5pbXBvcnQgeyBTR1JJRF9UWVBFX05BTUVfU1RSLCBNR1JJRF9UWVBFX05BTUVfU1RSLCBMR1JJRF9UWVBFX05BTUVfU1RSIH0gZnJvbSBcIi4vbGFuZ19zdHJcIjtcclxuaW1wb3J0IHsgTXlGbG9vciwgTXlDZWlsLCBUb1BlcmNlbnQsIFRvTnVtYmVyLCBUb1RyYWRpbmdHYXAsIEZpeGVkUHJpY2UgfSBmcm9tIFwiLi9teW1hdGhcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52IH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xvZyB9IGZyb20gXCIuL3JlbW90ZV91dGlsXCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nIH0gZnJvbSBcIi4vZ3JpZF90cmFkaW5nXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRUcmFkaW5nTW9kZVR3byBleHRlbmRzIEdyaWRUcmFkaW5nIFxyXG57XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKHBsdWdpbl9lbnYpXHJcbiAgICAgICAgdGhpcy5tb2RlX3R5cGUgPSBcIlR3b1wiO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRHcmlkVHJhZGluZyhkYXRhOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuUGFyc2VSYXdEYXRhKGRhdGEpIHx8IHRoaXMuaXNfZW1wdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgVXBkYXRlUmVtb3RlUHJpY2UocmVtb3RlX3ByaWNlOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA9IHJlbW90ZV9wcmljZTtcclxuICAgICAgICBpZiAodGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA+IDAgJiYgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSAhPSB0aGlzLmN1cnJlbnRfcHJpY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfcHJpY2UgPSB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdUYWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLmRpc2FibGVfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlID0gW11cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbMF0gPSBbXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTUzNTZcdTUxRkFcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRkRcdTY1NzBcIiwgXCJcdTUzNTZcdTUxRkFcdTkxRDFcdTk4OURcIiwgXCJcdTc2RjhcdTVCRjlcdThEQ0NcdTVFNDVcIiwgXCJcdTc2RjhcdTVCRjlcdTZEQThcdTVFNDVcIl07XHJcblxyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZygxIC0gdGhpcy5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QpIC8gTWF0aC5sb2coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCkpICsgMTtcclxuICAgICAgICBjb25zdCBtYXhfcmlzZV9wY3QgPSB0aGlzLmdyaWRfc2V0dGluZ3MuTUFYX1JJU0VfUENUO1xyXG4gICAgICAgIC8vIFx1NUMwRlx1N0Y1MVxyXG4gICAgICAgIGxldCBpZHggPSAwO1xyXG4gICAgICAgIGxldCBtYXhfc2x1bXBfcGN0ID0gTWF0aC5yb3VuZCgoMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfU0xVTVBfUENUKSAqIDEwMCk7XHJcbiAgICAgICAgbGV0IHNlbGxfcHJpY2Vfc3RlcCA9IDEgKyB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1Q7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdGkgPSAxO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdF9zdGVwID0gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLnBvdygxIC0gdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENULCBpKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNsdW1wX3BjdCA9IE1hdGgucm91bmQoMTAwICogTWF0aC5wb3coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCwgaSArIDEpKTtcclxuICAgICAgICAgICAgbGV0IHN0ZXBfcGN0ID0gZmlyc3Rfc3RlcDtcclxuICAgICAgICAgICAgd2hpbGUgKHN0ZXBfcGN0ID4gc2x1bXBfcGN0ICYmIHN0ZXBfcGN0ID4gbWF4X3NsdW1wX3BjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW2lkeCArIDFdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyhTR1JJRF9UWVBFX05BTUVfU1RSLCBpZHgsIHN0ZXBfcGN0IC8gMTAwLCBzZWxsX3ByaWNlX3N0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9SRVRBSU5fQ09VTlQsIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9BRERfUENUKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbaWR4ICsgMV1bMF0pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coaWR4ICsgMSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGxfcHJpY2Vfc3RlcCA9IHN0ZXBfcGN0IC8gMTAwO1xyXG4gICAgICAgICAgICAgICAgc3RlcF9wY3QgPSBNYXRoLnJvdW5kKGZpcnN0X3N0ZXAgKiAoMSAtIHRpICogdGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX1NURVBfUENUKSk7XHJcbiAgICAgICAgICAgICAgICB0aSsrO1xyXG4gICAgICAgICAgICAgICAgaWR4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTVDMEZcdTdGNTFcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9idXkgPSB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93c1t0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKGxhc3RfYnV5IDwgdGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aCkgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9idXkgKyAxKTtcclxuICAgICAgICAgICAgbGV0IGxhc3Rfc2VsbCA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wb3AoKTtcclxuICAgICAgICAgICAgaWYgKGxhc3Rfc2VsbCkgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbCk7XHJcbiAgICAgICAgICAgIC8vaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICBpZiAoZmFsc2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9zID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX3MsIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTVDMEZcdTdGNTFcdTc2ODRcdTk5OTZcdTdGNTFcdTRFNzBcdTUxNjVcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RfYnV5ID0gMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihmaXJzdF9idXksIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKGZpcnN0X2J1eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gXHU0RTJEXHU3RjUxXHJcbiAgICAgICAgbGV0IHN0YXJ0X2luZGV4ID0gdGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aDtcclxuICAgICAgICBpZHggPSAwO1xyXG4gICAgICAgIHNlbGxfcHJpY2Vfc3RlcCA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdGkgPSAyO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdF9zdGVwID0gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLnBvdygxIC0gdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENULCBpKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNsdW1wX3BjdCA9IE1hdGgucm91bmQoMTAwICogTWF0aC5wb3coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCwgaSArIDEpKTtcclxuICAgICAgICAgICAgbGV0IHN0ZXBfcGN0ID0gTWF0aC5yb3VuZChmaXJzdF9zdGVwICogKDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1QpKTtcclxuICAgICAgICAgICAgd2hpbGUgKHN0ZXBfcGN0ID4gc2x1bXBfcGN0ICYmIHN0ZXBfcGN0ID4gbWF4X3NsdW1wX3BjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW3N0YXJ0X2luZGV4ICsgaWR4XSA9IHRoaXMuR2VuZXJhdGVPbmVSb3coTUdSSURfVFlQRV9OQU1FX1NUUiwgaWR4ICsgMSwgc3RlcF9wY3QgLyAxMDAsIHNlbGxfcHJpY2Vfc3RlcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX1JFVEFJTl9DT1VOVCwgdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX0FERF9QQ1QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KHN0YXJ0X2luZGV4ICsgaWR4KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbc3RhcnRfaW5kZXggKyBpZHhdWzBdKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU0RTJEXHU3RjUxXHU0RTcwXHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihzdGFydF9pbmRleCArIGlkeCwgZmFsc2UsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWxsX3ByaWNlX3N0ZXAgPSBzdGVwX3BjdCAvIDEwMDtcclxuICAgICAgICAgICAgICAgIHN0ZXBfcGN0ID0gTWF0aC5yb3VuZChmaXJzdF9zdGVwICogKDEgLSB0aSAqIHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9TVEVQX1BDVCkpO1xyXG4gICAgICAgICAgICAgICAgdGkrKztcclxuICAgICAgICAgICAgICAgIGlkeCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMCAmJiB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdID49IHN0YXJ0X2luZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1MzU2XHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9tID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfbSwgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucmVtb3ZlKGxhc3Rfc2VsbF9tKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gXHU1OTI3XHU3RjUxXHJcbiAgICAgICAgc3RhcnRfaW5kZXggPSB0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoO1xyXG4gICAgICAgIGlkeCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzZWxsX3ByaWNlX3N0ZXAgPSBNYXRoLnJvdW5kKDEwMCAqIE1hdGgucG93KDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QsIGkpKSAvIDEwMDtcclxuICAgICAgICAgICAgY29uc3Qgc3RlcF9wY3QgPSBNYXRoLnJvdW5kKDEwMCAqIE1hdGgucG93KDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QsIGkgKyAxKSk7XHJcbiAgICAgICAgICAgIGlmIChzdGVwX3BjdCA+IG1heF9zbHVtcF9wY3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF0gPSB0aGlzLkdlbmVyYXRlT25lUm93KExHUklEX1RZUEVfTkFNRV9TVFIsIGlkeCArIDEsIHN0ZXBfcGN0IC8gMTAwLCBzZWxsX3ByaWNlX3N0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9SRVRBSU5fQ09VTlQsIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9BRERfUENUKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhzdGFydF9pbmRleCArIGlkeCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW3N0YXJ0X2luZGV4ICsgaWR4XVswXSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NTkyN1x1N0Y1MVx1NEU3MFx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3Ioc3RhcnRfaW5kZXggKyBpZHgsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWR4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwICYmIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV0gPj0gc3RhcnRfaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTUzNTZcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX2wgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9sLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5yZW1vdmUobGFzdF9zZWxsX2wpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZW5lcmF0ZU9uZVJvdyhncmlkX25hbWU6IHN0cmluZywgaWR4OiBudW1iZXIsIGJ1eV9wcmljZV9zdGVwOiBudW1iZXIsIHNlbGxfcHJpY2Vfc3RlcDogbnVtYmVyLCBncmlkX3JldGFpbl9jb3VudDogbnVtYmVyLCBncmlkX2FkZF9wY3Q6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgYnV5X3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgYnV5X3ByaWNlX3N0ZXAsIHByZWNpc2lvbik7XHJcbiAgICAgICAgY29uc3QgYnV5X2NvdW50ID0gTXlGbG9vcih0aGlzLmdyaWRfc2V0dGluZ3MuT05FX0dSSURfTElNSVQgKiAoMSArIGlkeCAqIGdyaWRfYWRkX3BjdCkgLyBidXlfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5fQkFUQ0hfQ09VTlQpXHJcblxyXG4gICAgICAgIGNvbnN0IHNlbGxfcHJpY2UgPSBGaXhlZFByaWNlKHRoaXMudGFyZ2V0X3ByaWNlLCBzZWxsX3ByaWNlX3N0ZXAsIHByZWNpc2lvbik7XHJcbiAgICAgICAgY29uc3QgcmV0YWluX2NvdW50ID0gKHNlbGxfcHJpY2UgLSBidXlfcHJpY2UpICogYnV5X2NvdW50ICogZ3JpZF9yZXRhaW5fY291bnQ7XHJcbiAgICAgICAgY29uc3Qgc2VsbF9jb3VudCA9IE15Rmxvb3IoKHNlbGxfcHJpY2UgKiBidXlfY291bnQgLSByZXRhaW5fY291bnQpIC8gc2VsbF9wcmljZSwgdGhpcy5ncmlkX3NldHRpbmdzLk1JTl9CQVRDSF9DT1VOVCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbZ3JpZF9uYW1lICsgU3RyaW5nKGlkeCksIFRvUGVyY2VudChidXlfcHJpY2Vfc3RlcCksIChidXlfcHJpY2UgKyB0aGlzLmdyaWRfc2V0dGluZ3MuVFJJR0dFUl9BRERfUE9JTlQpLnRvRml4ZWQocHJlY2lzaW9uKSwgXHJcbiAgICAgICAgICAgICAgICBidXlfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLCBTdHJpbmcoYnV5X2NvdW50KSwgU3RyaW5nKE1hdGguY2VpbChidXlfcHJpY2UgKiBidXlfY291bnQpKSxcclxuICAgICAgICAgICAgICAgIChzZWxsX3ByaWNlIC0gdGhpcy5ncmlkX3NldHRpbmdzLlRSSUdHRVJfQUREX1BPSU5UKS50b0ZpeGVkKHByZWNpc2lvbiksIHNlbGxfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nKHNlbGxfY291bnQpLCBTdHJpbmcoTWF0aC5jZWlsKHNlbGxfcHJpY2UgKiBzZWxsX2NvdW50KSksIFRvVHJhZGluZ0dhcChzZWxsX3ByaWNlLCBidXlfcHJpY2UsIDEpLFxyXG4gICAgICAgICAgICAgICAgVG9UcmFkaW5nR2FwKGJ1eV9wcmljZSwgc2VsbF9wcmljZSwgMSldO1xyXG4gICAgfVxyXG5cclxufSIsICIvKlxyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU4QkExXHU3Qjk3XHU5MDNCXHU4RjkxXHVGRjBDXHU2QTIxXHU1RjBGM1xyXG4gICAgXHU3Mjc5XHU2QjhBXHU1Mzg2XHU1M0YyXHU1MzlGXHU1NkUwXHU1RTI2XHU2NzY1XHU3Njg0XHU0RTAwXHU0RTlCXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHVGRjBDXHU5NzAwXHU4OTgxXHU2MjRCXHU1MkE4XHU4QkJFXHU3RjZFXHU3RjUxXHU2ODNDXHU2QkNGXHU0RTJBXHU2ODNDXHU1QjUwXHU3Njg0XHU2QjY1XHU4RkRCXHU1MDNDXHJcbiovXHJcblxyXG5pbXBvcnQgeyBNeUZsb29yLCBNeUNlaWwsIFRvUGVyY2VudCwgVG9OdW1iZXIsIFRvVHJhZGluZ0dhcCwgRml4ZWRQcmljZSB9IGZyb20gXCIuL215bWF0aFwiO1xyXG5pbXBvcnQgeyBQbHVnaW5FbnYgfSBmcm9tIFwiLi9wbHVnaW5fZW52XCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nIH0gZnJvbSBcIi4vZ3JpZF90cmFkaW5nXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRUcmFkaW5nTW9kZVRocmVlIGV4dGVuZHMgR3JpZFRyYWRpbmcgXHJcbntcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKHBsdWdpbl9lbnYpXHJcbiAgICAgICAgdGhpcy5tb2RlX3R5cGUgPSBcIlRocmVlXCI7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdEdyaWRUcmFkaW5nKGRhdGE6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBpZiAodGhpcy5QYXJzZVJhd0RhdGEoZGF0YSkgfHwgdGhpcy5pc19lbXB0eSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNfZW1wdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0R3JpZFBhcmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRTdG9ja1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdSZWNvcmQoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0SG9sZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdJbmNvbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuU29ydFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBVcGRhdGVSZW1vdGVQcmljZShyZW1vdGVfcHJpY2U6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID0gcmVtb3RlX3ByaWNlO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID4gMCAmJiB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlICE9IHRoaXMuY3VycmVudF9wcmljZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9wcmljZSA9IHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2U7XHJcbiAgICAgICAgICAgIHRoaXMuaXNfZW1wdHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0R3JpZFBhcmFtKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRTdG9ja1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdSZWNvcmQoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0SG9sZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdJbmNvbWUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0FuYWx5c2lzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuU29ydFRyYWRpbmdUYWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBJbml0VHJhZGluZ1RhYmxlKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzID0gW11cclxuICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGUgPSBbXVxyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZVswXSA9IFtcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVGN1x1NjgzQ1x1Njg2M1x1NEY0RFwiLCBcIlx1NEU3MFx1NTE2NVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGRFx1NjU3MFwiLCBcIlx1NEU3MFx1NTE2NVx1OTFEMVx1OTg5RFwiLCBcIlx1NTM1Nlx1NTFGQVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGN1x1NjgzQ1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGRFx1NjU3MFwiLCBcIlx1NTM1Nlx1NTFGQVx1OTFEMVx1OTg5RFwiLCBcIlx1NzZGOFx1NUJGOVx1OERDQ1x1NUU0NVwiLCBcIlx1NzZGOFx1NUJGOVx1NkRBOFx1NUU0NVwiXTtcclxuXHJcbiAgICAgICAgY29uc3QgbWF4X3Jpc2VfcGN0ID0gdGhpcy5ncmlkX3NldHRpbmdzLk1BWF9SSVNFX1BDVDtcclxuICAgICAgICBsZXQgZ3JpZF9zZWxsX3BjdCA9IDEuMCArIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVFxyXG4gICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8dGhpcy5zZ3JpZF9zdGVwX3RhYmxlLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZ3JpZF9idXlfcGN0ID0gVG9OdW1iZXIodGhpcy5zZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMV0pXHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtpZHggKyAxXSA9IHRoaXMuR2VuZXJhdGVPbmVSb3codGhpcy5zZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMF0sIGdyaWRfYnV5X3BjdCwgZ3JpZF9zZWxsX3BjdCxcclxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIodGhpcy5zZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMl0pLCBOdW1iZXIodGhpcy5zZ3JpZF9zdGVwX3RhYmxlW2lkeF1bM10pKTtcclxuICAgICAgICAgICAgZ3JpZF9zZWxsX3BjdCA9IGdyaWRfYnV5X3BjdDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhpZHggKyAxKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW2lkeCArIDFdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKGlkeCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1QzBGXHU3RjUxXHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RfYnV5ID0gdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChsYXN0X2J1eSA8IHRoaXMuc2dyaWRfc3RlcF90YWJsZS5sZW5ndGgpIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKGxhc3RfYnV5ICsgMSk7XHJcbiAgICAgICAgICAgIGxldCBsYXN0X3NlbGwgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucG9wKCk7XHJcbiAgICAgICAgICAgIGlmIChsYXN0X3NlbGwpIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGwpO1xyXG4gICAgICAgICAgICAvL2lmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgaWYgKGZhbHNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfcyA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9zLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1QzBGXHU3RjUxXHU3Njg0XHU5OTk2XHU3RjUxXHU0RTcwXHU1MTY1XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0X2J1eSA9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IoZmlyc3RfYnV5LCBmYWxzZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChmaXJzdF9idXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydF9pbmRleCA9IHRoaXMuc2dyaWRfc3RlcF90YWJsZS5sZW5ndGggKyAxO1xyXG4gICAgICAgIGdyaWRfc2VsbF9wY3QgPSAxLjAgKyB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1Q7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLm1ncmlkX3N0ZXBfdGFibGUubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBncmlkX2J1eV9wY3QgPSBUb051bWJlcih0aGlzLm1ncmlkX3N0ZXBfdGFibGVbaWR4XVsxXSlcclxuICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW3N0YXJ0X2luZGV4ICsgaWR4XSA9IHRoaXMuR2VuZXJhdGVPbmVSb3codGhpcy5tZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMF0sIGdyaWRfYnV5X3BjdCwgZ3JpZF9zZWxsX3BjdCxcclxuICAgICAgICAgICAgICAgICAgICBOdW1iZXIodGhpcy5tZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMl0pLCBOdW1iZXIodGhpcy5tZ3JpZF9zdGVwX3RhYmxlW2lkeF1bM10pKTtcclxuICAgICAgICAgICAgZ3JpZF9zZWxsX3BjdCA9IGdyaWRfYnV5X3BjdDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KHN0YXJ0X2luZGV4ICsgaWR4KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYnV5X2dyaWRfcmVjb3JkLmluY2x1ZGVzKHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF1bMF0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NEUyRFx1N0Y1MVx1NEU3MFx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihzdGFydF9pbmRleCArIGlkeCwgZmFsc2UsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwICYmIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV0gPj0gc3RhcnRfaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTUzNTZcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX20gPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9tLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5yZW1vdmUobGFzdF9zZWxsX20pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9tKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzdGFydF9pbmRleCA9IHRoaXMuc2dyaWRfc3RlcF90YWJsZS5sZW5ndGggKyB0aGlzLm1ncmlkX3N0ZXBfdGFibGUubGVuZ3RoICsgMTtcclxuICAgICAgICBncmlkX3NlbGxfcGN0ID0gMS4wICsgdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENUO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8dGhpcy5sZ3JpZF9zdGVwX3RhYmxlLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZ3JpZF9idXlfcGN0ID0gVG9OdW1iZXIodGhpcy5sZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMV0pXHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF0gPSB0aGlzLkdlbmVyYXRlT25lUm93KHRoaXMubGdyaWRfc3RlcF90YWJsZVtpZHhdWzBdLCBncmlkX2J1eV9wY3QsIGdyaWRfc2VsbF9wY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHRoaXMubGdyaWRfc3RlcF90YWJsZVtpZHhdWzJdKSwgTnVtYmVyKHRoaXMubGdyaWRfc3RlcF90YWJsZVtpZHhdWzNdKSk7XHJcbiAgICAgICAgICAgIGdyaWRfc2VsbF9wY3QgPSBncmlkX2J1eV9wY3Q7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhzdGFydF9pbmRleCArIGlkeCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbc3RhcnRfaW5kZXggKyBpZHhdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTU5MjdcdTdGNTFcdTRFNzBcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3Ioc3RhcnRfaW5kZXggKyBpZHgsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDAgJiYgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXSA+PSBzdGFydF9pbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NTM1Nlx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfbCA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX2wsIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnJlbW92ZShsYXN0X3NlbGxfbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX2wpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdlbmVyYXRlT25lUm93KGdyaWRfbmFtZTogc3RyaW5nLCBncmlkX2J1eV9wY3Q6IG51bWJlciwgZ3JpZF9zZWxsX3BjdDogbnVtYmVyLCBncmlkX2FkZF9wY3Q6IG51bWJlciwgZ3JpZF9yZXRhaW5fY291bnQ6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgYnV5X3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgZ3JpZF9idXlfcGN0LCBwcmVjaXNpb24pO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9jb3VudCA9IE15Rmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk9ORV9HUklEX0xJTUlUICogKDEgKyBncmlkX2FkZF9wY3QpIC8gYnV5X3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKVxyXG5cclxuICAgICAgICBjb25zdCBzZWxsX3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgZ3JpZF9zZWxsX3BjdCwgcHJlY2lzaW9uKTtcclxuICAgICAgICBjb25zdCByZXRhaW5fY291bnQgPSAoc2VsbF9wcmljZSAtIGJ1eV9wcmljZSkgKiBidXlfY291bnQgKiBncmlkX3JldGFpbl9jb3VudDtcclxuICAgICAgICBjb25zdCBzZWxsX2NvdW50ID0gTXlGbG9vcigoc2VsbF9wcmljZSAqIGJ1eV9jb3VudCAtIHJldGFpbl9jb3VudCkgLyBzZWxsX3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtncmlkX25hbWUsIFRvUGVyY2VudChncmlkX2J1eV9wY3QpLCAoYnV5X3ByaWNlICsgdGhpcy5ncmlkX3NldHRpbmdzLlRSSUdHRVJfQUREX1BPSU5UKS50b0ZpeGVkKHByZWNpc2lvbiksIFxyXG4gICAgICAgICAgICAgICAgYnV5X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSwgU3RyaW5nKGJ1eV9jb3VudCksIFN0cmluZyhNYXRoLmNlaWwoYnV5X3ByaWNlICogYnV5X2NvdW50KSksXHJcbiAgICAgICAgICAgICAgICAoc2VsbF9wcmljZSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLCBzZWxsX3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhzZWxsX2NvdW50KSwgU3RyaW5nKE1hdGguY2VpbChzZWxsX3ByaWNlICogc2VsbF9jb3VudCkpLCBUb1RyYWRpbmdHYXAoc2VsbF9wcmljZSwgYnV5X3ByaWNlLCAxKSxcclxuICAgICAgICAgICAgICAgIFRvVHJhZGluZ0dhcChidXlfcHJpY2UsIHNlbGxfcHJpY2UsIDEpXTtcclxuICAgIH1cclxuXHJcbn0iLCAiLypcclxuICAgIFBsdWdpbiBydW50aW1lIGRhdGFcclxuKi9cclxuXHJcbmltcG9ydCB7IFBsdWdpbkJhc2VTZXR0aW5ncywgR3JpZFRyYWRpbmdTZXR0aW5ncywgUGFja1NldHRpbmdzLCBVbnBhY2tTZXR0aW5ncyB9IGZyb20gXCIuL3NldHRpbmdzXCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nIH0gZnJvbSBcIi4vZ3JpZF90cmFkaW5nXCI7XHJcbmltcG9ydCB7IERlYnVnTG9nIH0gZnJvbSBcIi4vcmVtb3RlX3V0aWxcIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmdNb2RlT25lIH0gZnJvbSBcIi4vZ3JpZF90cmFkaW5nX20xXCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nTW9kZVR3byB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ19tMlwiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZ01vZGVUaHJlZSB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ19tM1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVQREFURV9TVE9DS19TRVRUSU5HID0gXCJ1cGRhdGVfc3RvY2tfc2V0dGluZ1wiO1xyXG5leHBvcnQgY29uc3QgRkVUQ0hfQ1VSUkVOVF9QUklDRSA9IFwiZmV0Y2hfY3VycmVudF9wcmljZVwiO1xyXG5cclxudHlwZSBDYWxsYmFjayA9ICgpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY2xhc3MgUGx1Z2luRW52XHJcbntcclxuICAgIGlzX3NldHRpbmdzX2NoYW5nZWQ6IGJvb2xlYW47XHJcbiAgICBiYXNlX3NldHRpbmdzOiBQbHVnaW5CYXNlU2V0dGluZ3M7XHJcbiAgICBncmlkX3NldHRpbmdzOiBHcmlkVHJhZGluZ1NldHRpbmdzO1xyXG5cclxuICAgIGdyaWRfdHJhZGluZ19kaWN0OiBNYXA8c3RyaW5nLCBHcmlkVHJhZGluZz47XHJcbiAgICBzdG9ja19yZW1vdGVfcHJpY2VfZGljdDogTWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgIGV2ZW50X2NhbGxiYWNrX2RpY3Q6IE1hcDxzdHJpbmcsIE1hcDxudW1iZXIsIENhbGxiYWNrPj5cclxuICAgIF9ldmVudF9ndWlkOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaXNfc2V0dGluZ3NfY2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYmFzZV9zZXR0aW5ncyA9IG5ldyBQbHVnaW5CYXNlU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MgPSBuZXcgR3JpZFRyYWRpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgIHRoaXMuZ3JpZF90cmFkaW5nX2RpY3QgPSBuZXcgTWFwPHN0cmluZywgR3JpZFRyYWRpbmc+O1xyXG4gICAgICAgIHRoaXMuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3QgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgICAgICB0aGlzLmV2ZW50X2NhbGxiYWNrX2RpY3QgPSBuZXcgTWFwPHN0cmluZywgTWFwPG51bWJlciwgQ2FsbGJhY2s+PjtcclxuICAgICAgICB0aGlzLl9ldmVudF9ndWlkID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBHZXRBUElMaXNlbmNlKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2Vfc2V0dGluZ3MuREFUQV9BUElfTElDRU5DRTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRTdG9ja1JlbW90ZVByaWNlKHN0b2NrX25vOiBzdHJpbmcpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmljZSA9IHRoaXMuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3QuZ2V0KHN0b2NrX25vKTtcclxuICAgICAgICBpZiAocHJpY2UgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByaWNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdldEdyaWRUcmFkaW5nVHlwZUJ5U3RyaW5nKG1vZGU6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBpZiAobW9kZSA9PSBcIm1vZGVfdHdvXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL0RlYnVnTG9nKFwiR2V0R3JpZFRyYWRpbmdUeXBlQnlTdHJpbmcgcmV0dXJuIFR3byBcIiwgbW9kZSlcclxuICAgICAgICAgICAgcmV0dXJuIEdyaWRUcmFkaW5nTW9kZVR3bztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vZGUgPT0gXCJtb2RlX3RocmVlXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL0RlYnVnTG9nKFwiR2V0R3JpZFRyYWRpbmdUeXBlQnlTdHJpbmcgcmV0dXJuIFRocmVlIFwiLCBtb2RlKVxyXG4gICAgICAgICAgICByZXR1cm4gR3JpZFRyYWRpbmdNb2RlVGhyZWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFx1OUVEOFx1OEJBNFx1NEY3Rlx1NzUyOFx1NkEyMVx1NUYwRjFcclxuICAgICAgICAvL0RlYnVnTG9nKFwiR2V0R3JpZFRyYWRpbmdUeXBlQnlTdHJpbmcgcmV0dXJuIE9uZSBcIiwgbW9kZSlcclxuICAgICAgICByZXR1cm4gR3JpZFRyYWRpbmdNb2RlT25lO1xyXG4gICAgfVxyXG5cclxuICAgIEdldEFuZEdlbkdyaWRUcmFkaW5nKGdyaWRfbmFtZTogc3RyaW5nLCBtb2RlOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGdyaWRfdHJhZGluZyA9IHRoaXMuZ3JpZF90cmFkaW5nX2RpY3QuZ2V0KGdyaWRfbmFtZSlcclxuICAgICAgICBjb25zdCB0cmFkaW5nX21vZGUgPSB0aGlzLkdldEdyaWRUcmFkaW5nVHlwZUJ5U3RyaW5nKG1vZGUpXHJcbiAgICAgICAgaWYgKGdyaWRfdHJhZGluZyBpbnN0YW5jZW9mIHRyYWRpbmdfbW9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBncmlkX3RyYWRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyaWRfdHJhZGluZyA9IG5ldyB0cmFkaW5nX21vZGUodGhpcyk7XHJcbiAgICAgICAgdGhpcy5ncmlkX3RyYWRpbmdfZGljdC5zZXQoZ3JpZF9uYW1lLCBncmlkX3RyYWRpbmcpO1xyXG4gICAgICAgIHJldHVybiBncmlkX3RyYWRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgVW5zZXJpYWxpemVkU2V0dGluZ3MoZGF0YTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGxpbmVzID0gZGF0YS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICBpZiAobGluZXMubGVuZ3RoIDw9IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgVW5wYWNrU2V0dGluZ3ModGhpcy5iYXNlX3NldHRpbmdzLCBsaW5lcyk7XHJcbiAgICAgICAgVW5wYWNrU2V0dGluZ3ModGhpcy5ncmlkX3NldHRpbmdzLCBsaW5lcyk7XHJcbiAgICB9XHJcblxyXG4gICAgU2VyaWFsaXplZFNldHRpbmdzKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBQYWNrU2V0dGluZ3ModGhpcy5iYXNlX3NldHRpbmdzKSArIFBhY2tTZXR0aW5ncyh0aGlzLmdyaWRfc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIFB1Ymxpc2hFdmVudChldmVudF9uYW1lOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgLy9EZWJ1Z0xvZyhcIlB1Ymxpc2hFdmVudDogXCIsIGV2ZW50X25hbWUpO1xyXG4gICAgICAgIGNvbnN0IGNiX2RpY3QgPSB0aGlzLmV2ZW50X2NhbGxiYWNrX2RpY3QuZ2V0KGV2ZW50X25hbWUpXHJcbiAgICAgICAgaWYgKGNiX2RpY3QgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBbZ3VpZCwgZXZlbnRfY2JdIG9mIGNiX2RpY3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9EZWJ1Z0xvZyhcIlRyaWdnZXJFdmVudENiIGd1aWQ6IFwiLCBndWlkLCBcIiBjYjogXCIsIGV2ZW50X2NiLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRfY2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaChlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgU3Vic2NyaWJlRXZlbnQoZXZlbnRfbmFtZTogc3RyaW5nLCBldmVudF9jYjogQ2FsbGJhY2spOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICBjb25zdCBndWlkID0gdGhpcy5HZW5HVUlEKCk7XHJcbiAgICAgICAgbGV0IGNiX2RpY3QgPSB0aGlzLmV2ZW50X2NhbGxiYWNrX2RpY3QuZ2V0KGV2ZW50X25hbWUpO1xyXG4gICAgICAgIGlmIChjYl9kaWN0ID09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNiX2RpY3QgPSBuZXcgTWFwPG51bWJlciwgQ2FsbGJhY2s+O1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50X2NhbGxiYWNrX2RpY3Quc2V0KGV2ZW50X25hbWUsIGNiX2RpY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYl9kaWN0LnNldChndWlkLCBldmVudF9jYik7XHJcbiAgICAgICAgLy9EZWJ1Z0xvZyhcIlN1YnNjcmliZUV2ZW50OiBcIiwgZXZlbnRfbmFtZSwgXCIgZ3VpZDogXCIsIGd1aWQsIFwiIGNiOiBcIiwgZXZlbnRfY2IubmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGd1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgVW5zdWJzY3JpYmVFdmVudChldmVudF9uYW1lOiBzdHJpbmcsIGV2ZW50X2d1aWQ6IG51bWJlcik6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICBjb25zdCBjYl9kaWN0ID0gdGhpcy5ldmVudF9jYWxsYmFja19kaWN0LmdldChldmVudF9uYW1lKVxyXG4gICAgICAgIGlmIChjYl9kaWN0ID09IHVuZGVmaW5lZCB8fCAhY2JfZGljdC5oYXMoZXZlbnRfZ3VpZCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vRGVidWdMb2coXCJVbnN1YnNjcmliZUV2ZW50OiBcIiwgZXZlbnRfbmFtZSwgXCIgZ3VpZDogXCIsIGV2ZW50X2d1aWQpO1xyXG4gICAgICAgIHJldHVybiBjYl9kaWN0LmRlbGV0ZShldmVudF9ndWlkKTtcclxuICAgIH1cclxuXHJcbiAgICBHZW5HVUlEKCk6IG51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50X2d1aWQrKztcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRfZ3VpZDtcclxuICAgIH1cclxufVxyXG4iLCAiLypcclxuICAgIFx1NTkwNFx1NzQwNlx1NjRDRFx1NEY1Q1x1NjMwN1x1NEVFNFx1RkYwQ1x1OEQxRlx1OEQyM1x1ODlFM1x1Njc5MFx1NTE4NVx1NUJCOVx1NUU3Nlx1NzUxRlx1NjIxMFx1NjgzQ1x1NUYwRlx1NTMxNlx1N0VEM1x1Njc5Q1xyXG4qL1xyXG5cclxuaW1wb3J0IHsgc3Vic2NyaWJlIH0gZnJvbSBcImRpYWdub3N0aWNzX2NoYW5uZWxcIjtcclxuaW1wb3J0IHsgSXNOdW1lcmljIH0gZnJvbSBcIi4vbXltYXRoXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR3JpZENvbW1hbmRcclxue1xyXG4gICAgY29tbWFuZDogc3RyaW5nO1xyXG4gICAgY29tbWFuZF90eXBlOiBzdHJpbmc7XHJcbiAgICBjb21tYW5kX3BhcmFtMTogc3RyaW5nO1xyXG4gICAgY29tbWFuZF9wYXJhbTI6IGFueTsgXHJcbiAgICBkYXRhX3Jlc3VsdF9zdHI6IHN0cmluZztcclxuICAgIGRhdGFfcmVzdWx0X251bTogbnVtYmVyO1xyXG4gICAgZXJyb3JfY29kZTogbnVtYmVyO1xyXG4gICAgZXJyb3JfbXNnOiBzdHJpbmc7XHJcbiAgICByYXdfY29tbWFuZF90ZXh0OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY29tbWFuZCA9IFwibm9uZVwiO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZF90eXBlID0gXCJncmlkXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBFeGN1dGVHcmlkQ29tbWFuZChjbWRfc3RyOiBzdHJpbmcpOiBHcmlkQ29tbWFuZFxyXG57XHJcbiAgICBjb25zdCBzdHJzID0gY21kX3N0ci5zcGxpdChcIiBcIik7XHJcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IEdyaWRDb21tYW5kKCk7XHJcbiAgICBjb21tYW5kLmNvbW1hbmQgPSBzdHJzWzBdO1xyXG4gICAgY29tbWFuZC5yYXdfY29tbWFuZF90ZXh0ID0gY21kX3N0cjtcclxuICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT0gXCJhZGRfcmVjb3JkXCIpXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5jb21tYW5kX3BhcmFtMSA9IHN0cnNbMV07XHJcbiAgICAgICAgQWRkR3JpZFJlY29yZChjb21tYW5kKTtcclxuICAgIH1cclxuICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT0gXCJkZWxfcmVjb3JkXCIpXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5jb21tYW5kX3BhcmFtMSA9IHN0cnNbMV07XHJcbiAgICAgICAgRGVsR3JpZFJlY29yZChjb21tYW5kKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21tYW5kO1xyXG59XHJcblxyXG5mdW5jdGlvbiBBZGRHcmlkUmVjb3JkKGNvbW1hbmQ6IEdyaWRDb21tYW5kKVxyXG57XHJcbiAgICBjb25zdCBzdWJfc3RycyA9IGNvbW1hbmQuY29tbWFuZF9wYXJhbTEuc3BsaXQoXCIsXCIpO1xyXG4gICAgaWYgKHN1Yl9zdHJzLmxlbmd0aCAhPSA1KVxyXG4gICAge1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfY29kZSA9IC0xO1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfbXNnID0gXCJpbnZhbGlkIHBhcmFtXCJcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoc3ViX3N0cnNbMF0gIT0gXCJCVVlcIiAmJiBzdWJfc3Ryc1swXSAhPSBcIlNFTExcIiAmJiBzdWJfc3Ryc1swXSAhPSBcIlNIQVJFXCIpXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9jb2RlID0gLTE7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9tc2cgPSBcImludmFsaWQgcGFyYW1cIlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghc3ViX3N0cnNbMl0uc3RhcnRzV2l0aChcIlx1NUMwRlx1N0Y1MVwiKSAmJiAhc3ViX3N0cnNbMl0uc3RhcnRzV2l0aChcIlx1NEUyRFx1N0Y1MVwiKSAmJiAhc3ViX3N0cnNbMl0uc3RhcnRzV2l0aChcIlx1NTkyN1x1N0Y1MVwiKSAmJiAhc3ViX3N0cnNbMl0uc3RhcnRzV2l0aChcIlx1N0VBMlx1NTIyOVwiKSAmJiAhc3ViX3N0cnNbMl0uc3RhcnRzV2l0aChcIlx1NTIyOVx1NkRBNlwiKSlcclxuICAgIHtcclxuICAgICAgICBjb21tYW5kLmVycm9yX2NvZGUgPSAtMTtcclxuICAgICAgICBjb21tYW5kLmVycm9yX21zZyA9IFwiaW52YWxpZCBwYXJhbVwiXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29tbWFuZC5lcnJvcl9jb2RlID0gMDtcclxuICAgIGNvbW1hbmQuZGF0YV9yZXN1bHRfc3RyID0gXCJcXG5cIiArIGNvbW1hbmQuY29tbWFuZF9wYXJhbTE7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gRGVsR3JpZFJlY29yZChjb21tYW5kOiBHcmlkQ29tbWFuZClcclxue1xyXG4gICAgaWYgKElzTnVtZXJpYyhjb21tYW5kLmNvbW1hbmRfcGFyYW0xKSlcclxuICAgIHtcclxuICAgICAgICBjb21tYW5kLmVycm9yX2NvZGUgPSAwO1xyXG4gICAgICAgIGNvbW1hbmQuZGF0YV9yZXN1bHRfbnVtID0gTnVtYmVyKGNvbW1hbmQuY29tbWFuZF9wYXJhbTEpXHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9jb2RlID0gLTE7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9tc2cgPSBcImludmFsaWQgcGFyYW1cIjtcclxuICAgIH1cclxufSIsICIvKlxyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU2MDNCXHU4OUM4XHU4OUM2XHU1NkZFXHJcbiovXHJcbmltcG9ydCB7IFRleHRGaWxlVmlldywgV29ya3NwYWNlTGVhZiwgVEZpbGUsIFRGb2xkZXIsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IEdSSURfQ09MT1JfU1RPQ0tfT1ZFUlZJRVcsIEdSSURfQ09MT1JfVEFCTEVfVElUTEUsIEdSSURfQ09MT1JfQlVZX09WRVJWSUVXLCBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZyB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ1wiO1xyXG5pbXBvcnQgeyBQbHVnaW5FbnYsIEZFVENIX0NVUlJFTlRfUFJJQ0UgfSBmcm9tIFwiLi9wbHVnaW5fZW52XCI7XHJcbmltcG9ydCB7IFN0cmluZ1BsdXMsIFRvUGVyY2VudCwgVG9UcmFkaW5nR2FwLCBQcm9wb3J0aW9uUGN0U3RyIH0gZnJvbSBcIi4vbXltYXRoXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0dUTyA9IFwiZ3RvLXZpZXdcIlxyXG5cclxuZXhwb3J0IGNsYXNzIEdUT1ZpZXcgZXh0ZW5kcyBUZXh0RmlsZVZpZXdcclxue1xyXG4gICAgZGF0YTogc3RyaW5nO1xyXG4gICAgdmF1bHQ6IFZhdWx0O1xyXG4gICAgcGx1Z2luX2VudjogUGx1Z2luRW52O1xyXG4gICAgcmVmcmVzaF9ldmVudF9ndWlkOiBudW1iZXI7XHJcblxyXG4gICAgZGVidWdfbG9nOiBzdHJpbmcgW11bXTtcclxuICAgIHN0b2NrX292ZXJ2aWV3OiBzdHJpbmcgW11bXTtcclxuICAgIGN1c3RvbV9zdG9ja19vdmVydmlldzogc3RyaW5nIFtdW107XHJcbiAgICBzdG9ja19maWxsZWRfb3ZlcnZpZXc6IHN0cmluZyBbXVtdO1xyXG4gICAgaW5jb21lX292ZXJ2aWV3OiBzdHJpbmcgW11bXTtcclxuICAgIGhvbGRpbmdfb3ZlcnZpZXc6IHN0cmluZyBbXVtdO1xyXG5cclxuICAgIG92ZXJ2aWV3X3RpdGxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIG92ZXJ2aWV3X3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGN1c3RvbV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBjdXN0b21fdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgZmlsbGVkX3RpbGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgZmlsbGVkX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGluY29tZV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBpbmNvbWVfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgaG9sZGluZ190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBob2xkaW5nX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGRlYnVnX2xvZ190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBkZWJ1Z19sb2dfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHZhdWx0OiBWYXVsdCwgcGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgICAgIHRoaXMudmF1bHQgPSB2YXVsdDtcclxuICAgICAgICB0aGlzLnBsdWdpbl9lbnYgPSBwbHVnaW5fZW52O1xyXG4gICAgICAgIHRoaXMucmVmcmVzaF9ldmVudF9ndWlkID0gLTE7XHJcblxyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nID0gW107XHJcbiAgICAgICAgdGhpcy5zdG9ja19vdmVydmlldyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tX3N0b2NrX292ZXJ2aWV3ID0gW107XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcgPSBbXTtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXcgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBSZWFkQ3VzdG9tU3RvY2soKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldyA9IFtbXCJcdTdCNzlcdTc4MDFcdTdDN0JcdTU3OEJcIiwgXCJcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcIiwgXCJcdTYzMDFcdTRFRDNcdTkxRDFcdTk4OURcIiwgXCJcdTYzMDFcdTRFRDNcdTc2QzhcdTRFOEZcIiwgXCJcdTZFMDVcdTY4M0NcdTc2QzhcdTUyMjlcIiwgXCJcdTZFMDVcdTRFRDNcdTc2QzhcdTUyMjlcIiwgXCJcdTYzMDFcdTRFRDNcdTUzNjBcdTZCRDRcIiwgXCJcdTY3MkNcdTkxRDFcdTUzNjBcdTZCRDRcIl1dXHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU2MDNCXHU5ODlEXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU1QzBGXHU3RjUxXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU0RTJEXHU3RjUxXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU1OTI3XHU3RjUxXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU3RDJGXHU3OUVGXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LnB1c2goW1wiXHU4ODY1XHU0RUQzXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcgPSBbW1wiXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCIsIFwiXHU2MzAxXHU0RUQzXHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU4RDQ0XHU5MUQxXCIsIFwiXHU4RDI2XHU5NzYyXHU4RDQ0XHU5MUQxXCIsIFwiXHU2Mjk1XHU1MTY1XHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU0RUQzXHU0RjREXCJdXTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1N0QyRlx1NzlFRlx1N0I3OVx1NzgwMVwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIi1cIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU1RjUzXHU1MjREXHU2MzAxXHU0RUQzXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTVGNTNcdTUyNERcdTZFMDVcdTY4M0NcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NUY1M1x1NTI0RFx1NkUwNVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIi1cIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU1NkRFXHU4QzAzXHU2MzAxXHU0RUQzXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTU2REVcdThDMDNcdTZFMDVcdTY4M0NcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NTZERVx1OEMwM1x1NkUwNVx1NzZEOFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIi1cIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU2NzAwXHU1OTI3XHU2MzAxXHU0RUQzXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTY3MDBcdTU5MjdcdTZFMDVcdTY4M0NcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NjcwMFx1NTkyN1x1NkUwNVx1NzZEOFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIi1cIl0pO1xyXG4gICAgICAgIGNvbnN0IHN0b2NrX3RhYmxlOiBzdHJpbmcgW11bXSA9IFtbR1JJRF9DT0xPUl9UQUJMRV9USVRMRSwgXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTk5OTZcdTdGNTFcdTc2RUVcdTY4MDdcdTRFRjdcIiwgXCJcdTVGNTNcdTUyNERcdTRFRjdcdTY4M0NcIiwgXCJcdTRFRjdcdTY4M0NcdTc2N0VcdTUyMDZcdTRGNERcIiwgXCJcdTYzMDFcdTRFRDNcdTgwQTFcdTY1NzBcIiwgXCJcdTZEODhcdTgwMTdcdTY3MkNcdTkxRDFcIiwgXCJcdTc2QzhcdTRFOEZcdTZCRDRcdTczODdcIiwgXCJcdTU2REVcdThDMDNcdTRFRDNcdTRGNERcIl1dO1xyXG4gICAgICAgIGxldCBidXlfdGFibGU6IHN0cmluZyBbXVtdID0gW1tHUklEX0NPTE9SX1RBQkxFX1RJVExFLCBcIlx1NjgwN1x1NzY4NFx1NEVFM1x1NTNGN1wiLCBcIlx1NjgwN1x1NzY4NFx1NTQwRFx1NzlGMFwiLCBcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVGN1x1NjgzQ1x1Njg2M1x1NEY0RFwiLCBcIlx1NEU3MFx1NTE2NVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGRFx1NjU3MFwiLCBcIlx1NEU3MFx1NTE2NVx1OTFEMVx1OTg5RFwiLCBcIlx1OERERFx1NjIxMFx1NEVBNFx1NEVGN1wiXV07XHJcbiAgICAgICAgbGV0IHNlbGxfdGFibGU6IHN0cmluZyBbXVtdID0gW1tHUklEX0NPTE9SX1RBQkxFX1RJVExFLCBcIlx1NjgwN1x1NzY4NFx1NEVFM1x1NTNGN1wiLCBcIlx1NjgwN1x1NzY4NFx1NTQwRFx1NzlGMFwiLCBcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVGN1x1NjgzQ1x1Njg2M1x1NEY0RFwiLCBcIlx1NTM1Nlx1NTFGQVx1ODlFNlx1NTNEMVx1NEVGN1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGN1x1NjgzQ1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGRFx1NjU3MFwiLCBcIlx1NTM1Nlx1NTFGQVx1OTFEMVx1OTg5RFwiLCBcIlx1OERERFx1NjIxMFx1NEVBNFx1NEVGN1wiXV07XHJcbiAgICAgICAgbGV0IHBhc3NpdmVfdGFibGU6IHN0cmluZyBbXVtdID0gW1tHUklEX0NPTE9SX1RBQkxFX1RJVExFLCBcIlx1NjgwN1x1NzY4NFx1NEVFM1x1NTNGN1wiLCBcIlx1NjgwN1x1NzY4NFx1NTQwRFx1NzlGMFwiLCBcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVGN1x1NjgzQ1x1Njg2M1x1NEY0RFwiLCBcIlx1NEU3MFx1NTE2NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGRFx1NjU3MFwiLCBcIlx1NEU3MFx1NTE2NVx1OTFEMVx1OTg5RFwiLCBcIlx1NUY1M1x1NTI0RFx1NEVGN1x1NjgzQ1wiLCBcIlx1NUY1M1x1NTI0RFx1OERDQ1x1NUU0NVwiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGN1x1NjgzQ1wiLCBcIlx1NTM1Nlx1NTFGQVx1NkRBOFx1NUU0NVwiXV07XHJcbiAgICAgICAgbGV0IGFjdGl2ZV90YWJsZTogc3RyaW5nIFtdW10gPSBbW0dSSURfQ09MT1JfVEFCTEVfVElUTEUsIFwiXHU2ODA3XHU3Njg0XHU0RUUzXHU1M0Y3XCIsIFwiXHU2ODA3XHU3Njg0XHU1NDBEXHU3OUYwXCIsIFwiXHU3RjUxXHU2ODNDXHU3OUNEXHU3QzdCXCIsIFwiXHU0RUE0XHU2NjEzXHU2NUU1XHU2NzFGXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUY3XHU2ODNDXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUZEXHU2NTcwXCIsIFwiXHU0RTcwXHU1MTY1XHU5MUQxXHU5ODlEXCIsIFwiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFwiXHU2MzAxXHU0RUQzXHU2NTM2XHU3NkNBXCIsIFwiXHU1MzU2XHU1MUZBXHU0RUZEXHU2NTcwXCIsIFwiXHU3RDJGXHU3OUVGXHU3Qjc5XHU3ODAxXCJdXTtcclxuICAgICAgICBjb25zdCBncmlkX2ZvbGRlciA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKCdHcmlkVHJhZGluZycpO1xyXG4gICAgICAgIGxldCBncmlkX2ZpbGVfbmFtZXM6IHN0cmluZyBbXSA9IFtdO1xyXG4gICAgICAgIGlmIChncmlkX2ZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleD0wOyBpbmRleCA8IGdyaWRfZm9sZGVyLmNoaWxkcmVuLmxlbmd0aDsgaW5kZXgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JpZF9maWxlID0gZ3JpZF9mb2xkZXIuY2hpbGRyZW5baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGdyaWRfZmlsZS5uYW1lLmVuZHNXaXRoKFwiLmd0dlwiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBncmlkX2ZpbGVfbmFtZXMucHVzaChncmlkX2ZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JpZF9maWxlX25hbWVzLnNvcnQoKTtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PGdyaWRfZmlsZV9uYW1lcy5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgZ3JpZF90cmFkaW5nID0gdGhpcy5wbHVnaW5fZW52LmdyaWRfdHJhZGluZ19kaWN0LmdldChncmlkX2ZpbGVfbmFtZXNbaWR4XSk7XHJcbiAgICAgICAgICAgIGlmIChncmlkX3RyYWRpbmcgaW5zdGFuY2VvZiBHcmlkVHJhZGluZyAmJiBncmlkX3RyYWRpbmcuSXNTdG9jaygpICYmICFncmlkX3RyYWRpbmcuaXNfZGVidWcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyaWRfdHJhZGluZy5Jbml0VHJhZGluZ092ZXJ2aWV3KClcclxuICAgICAgICAgICAgICAgIHN0b2NrX3RhYmxlLnB1c2goZ3JpZF90cmFkaW5nLnN0b2NrX292ZXJ2aWV3KTtcclxuICAgICAgICAgICAgICAgIGJ1eV90YWJsZSA9IGJ1eV90YWJsZS5jb25jYXQoZ3JpZF90cmFkaW5nLnN0b2NrX2J1eV9vdmVydmlldyk7XHJcbiAgICAgICAgICAgICAgICBzZWxsX3RhYmxlID0gc2VsbF90YWJsZS5jb25jYXQoZ3JpZF90cmFkaW5nLnN0b2NrX3NlbGxfb3ZlcnZpZXcpO1xyXG4gICAgICAgICAgICAgICAgcGFzc2l2ZV90YWJsZSA9IHBhc3NpdmVfdGFibGUuY29uY2F0KGdyaWRfdHJhZGluZy5zdG9ja19wYXNzaXZlX2ZpbGxlZF9yZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlX3RhYmxlID0gYWN0aXZlX3RhYmxlLmNvbmNhdChncmlkX3RyYWRpbmcuc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhZGluZ19pbmNvbWUgPSBncmlkX3RyYWRpbmcudHJhZGluZ19pbmNvbWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD0xMDsgaWR4KyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVsxXSA9IFN0cmluZ1BsdXModGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVsxXSwgdHJhZGluZ19pbmNvbWVbaWR4XVsyXSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVsyXSA9IFN0cmluZ1BsdXModGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVsyXSwgdHJhZGluZ19pbmNvbWVbaWR4XVszXSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVszXSA9IFN0cmluZ1BsdXModGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVszXSwgdHJhZGluZ19pbmNvbWVbaWR4XVs2XSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVs0XSA9IFN0cmluZ1BsdXModGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVs0XSwgdHJhZGluZ19pbmNvbWVbaWR4XVs3XSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVs1XSA9IFN0cmluZ1BsdXModGhpcy5pbmNvbWVfb3ZlcnZpZXdbaWR4XVs1XSwgdHJhZGluZ19pbmNvbWVbaWR4XVs4XSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFkaW5nX2hvbGRpbmcgPSBncmlkX3RyYWRpbmcuaG9sZGluZ19hbmFseXNpcztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkeD0xOyBpZHg8PTY7IGlkeCsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzFdID0gU3RyaW5nUGx1cyh0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVsxXSwgdHJhZGluZ19ob2xkaW5nW2lkeF1bMl0sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzJdID0gU3RyaW5nUGx1cyh0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVsyXSwgdHJhZGluZ19ob2xkaW5nW2lkeF1bM10sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzNdID0gU3RyaW5nUGx1cyh0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVszXSwgdHJhZGluZ19ob2xkaW5nW2lkeF1bNl0sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzRdID0gU3RyaW5nUGx1cyh0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs0XSwgdHJhZGluZ19ob2xkaW5nW2lkeF1bN10sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzVdID0gU3RyaW5nUGx1cyh0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs1XSwgdHJhZGluZ19ob2xkaW5nW2lkeF1bOF0sIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBjdXJyZW50X2Nvc3QgPSBOdW1iZXIodGhpcy5pbmNvbWVfb3ZlcnZpZXdbMl1bMV0pO1xyXG4gICAgICAgIGxldCBjdXJyZW50X2hvbGQgPSBOdW1iZXIodGhpcy5pbmNvbWVfb3ZlcnZpZXdbMl1bMl0pO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0xOyBpZHg8PTEwOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNl0gPSBUb1BlcmNlbnQoTnVtYmVyKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bM10pIC8gTnVtYmVyKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNF0pLCAyKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bN10gIT0gXCItXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bN10gPSBUb1BlcmNlbnQoY3VycmVudF9jb3N0IC8gTnVtYmVyKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNF0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD02OyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzZdID0gUHJvcG9ydGlvblBjdFN0cihOdW1iZXIodGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bMl0pLCBjdXJyZW50X2hvbGQsIDIpO1xyXG4gICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs3XSA9IFByb3BvcnRpb25QY3RTdHIoTnVtYmVyKHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzFdKSwgY3VycmVudF9jb3N0LCAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXN0b21fc3RvY2tfb3ZlcnZpZXcgPSBbLi4uc3RvY2tfdGFibGUsIC4uLmJ1eV90YWJsZSwgLi4uc2VsbF90YWJsZV07XHJcbiAgICAgICAgdGhpcy5zdG9ja19maWxsZWRfb3ZlcnZpZXcgPSBbLi4ucGFzc2l2ZV90YWJsZSwgLi4uYWN0aXZlX3RhYmxlXTtcclxuICAgIH1cclxuXHJcbiAgICBTdW11cEFsbFN0b2NrKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnN0b2NrX292ZXJ2aWV3ID0gW107XHJcbiAgICAgICAgbGV0IHN0b2NrX2NvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBidXlfbW9uaXRvcl9jb3VudDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgc2VsbF9tb25pdG9yX2NvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBfM19idXlfY29zdDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgXzVfYnV5X2Nvc3Q6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsX2J1eV9jb3N0OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBfM19zZWxsX2dhaW46IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IF81X3NlbGxfZ2FpbjogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgdG90YWxfc2VsbF9nYWluOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICBmb3IobGV0IGlkeD0wOyBpZHg8dGhpcy5jdXN0b21fc3RvY2tfb3ZlcnZpZXcubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b2NrID0gdGhpcy5jdXN0b21fc3RvY2tfb3ZlcnZpZXdbaWR4XTtcclxuICAgICAgICAgICAgaWYgKHN0b2NrWzBdID09IEdSSURfQ09MT1JfU1RPQ0tfT1ZFUlZJRVcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0b2NrX2NvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0b2NrWzBdID09IEdSSURfQ09MT1JfU0VMTF9PVkVSVklFVylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2VsbF9tb25pdG9yX2NvdW50Kys7XHJcbiAgICAgICAgICAgICAgICB0b3RhbF9zZWxsX2dhaW4gKz0gTnVtYmVyKHN0b2NrWzhdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWRpbmdfZ2FwID0gTnVtYmVyKHN0b2NrWzldLnJlcGxhY2UoXCIlXCIsIFwiXCIpLnJlcGxhY2UoXCIrXCIsIFwiXCIpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFkaW5nX2dhcCA8IDMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXzNfc2VsbF9nYWluICs9IE51bWJlcihzdG9ja1s4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhZGluZ19nYXAgPCA1KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF81X3NlbGxfZ2FpbiArPSBOdW1iZXIoc3RvY2tbOF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdG9ja1swXSA9PSBHUklEX0NPTE9SX0JVWV9PVkVSVklFVylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnV5X21vbml0b3JfY291bnQrKztcclxuICAgICAgICAgICAgICAgIHRvdGFsX2J1eV9jb3N0ICs9IE51bWJlcihzdG9ja1s4XSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFkaW5nX2dhcCA9IE51bWJlcihzdG9ja1s5XS5yZXBsYWNlKFwiJVwiLCBcIlwiKS5yZXBsYWNlKFwiK1wiLCBcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHRyYWRpbmdfZ2FwID4gLTMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXzNfYnV5X2Nvc3QgKz0gTnVtYmVyKHN0b2NrWzhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0cmFkaW5nX2dhcCA+IC01KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF81X2J1eV9jb3N0ICs9IE51bWJlcihzdG9ja1s4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9ja19vdmVydmlldy5wdXNoKFtcIlx1NjgwN1x1NzY4NFx1NjAzQlx1NjU3MFwiLCBcIlx1NTM1Nlx1NTFGQVx1NzZEMVx1NjNBN1wiLCBcIlx1NEU3MFx1NTE2NVx1NzZEMVx1NjNBN1wiLCBcIlx1NEU3MFx1NTE2NVx1NjAzQlx1OTg5RFwiLCBcIi0zJVx1NTE4NVx1NEU3MFx1NTE2NVx1NjAzQlx1OTg5RFwiLCBcIi01JVx1NTE4NVx1NEU3MFx1NTE2NVx1NjAzQlx1OTg5RFwiLCBcIiszJVx1NTE4NVx1NTM1Nlx1NTFGQVx1NjAzQlx1OTg5RFwiLCBcIis1JVx1NTE4NVx1NTM1Nlx1NTFGQVx1NjAzQlx1OTg5RFwiXSk7XHJcbiAgICAgICAgdGhpcy5zdG9ja19vdmVydmlldy5wdXNoKFtTdHJpbmcoc3RvY2tfY291bnQpLCBTdHJpbmcoc2VsbF9tb25pdG9yX2NvdW50KSwgU3RyaW5nKGJ1eV9tb25pdG9yX2NvdW50KSwgU3RyaW5nKHRvdGFsX2J1eV9jb3N0KSwgU3RyaW5nKF8zX2J1eV9jb3N0KSwgU3RyaW5nKF81X2J1eV9jb3N0KSwgU3RyaW5nKF8zX3NlbGxfZ2FpbiksIFN0cmluZyhfNV9zZWxsX2dhaW4pXSk7XHJcbiAgICB9XHJcblxyXG4gICAgRGVidWdMb2cobGV2ZWw6IHN0cmluZywgbG9nX3N0cjogc3RyaW5nLCBleHRyYV9pbmZvOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2cucHVzaChbbGV2ZWwsIGxvZ19zdHIsIGV4dHJhX2luZm9dKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3RGF0YSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZpZXdEYXRhKGRhdGE6IHN0cmluZywgY2xlYXI6IGJvb2xlYW4pOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLlJlZnJlc2goKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gVklFV19UWVBFX0dUTztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25PcGVuKCk6IFByb21pc2U8dm9pZD4gXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMub3ZlcnZpZXdfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLm92ZXJ2aWV3X3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmluY29tZV90aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5jdXN0b21fdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5maWxsZWRfdGlsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuZmlsbGVkX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpXHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2dfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmRlYnVnX2xvZ190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA9IHRoaXMucGx1Z2luX2Vudi5TdWJzY3JpYmVFdmVudChGRVRDSF9DVVJSRU5UX1BSSUNFLCAoKT0+dGhpcy5SZWZyZXNoKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD5cclxuICAgIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpOyAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMucmVmcmVzaF9ldmVudF9ndWlkID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5VbnN1YnNjcmliZUV2ZW50KEZFVENIX0NVUlJFTlRfUFJJQ0UsIHRoaXMucmVmcmVzaF9ldmVudF9ndWlkKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2V2ZW50X2d1aWQgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgUmVmcmVzaCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5SZWFkQ3VzdG9tU3RvY2soKTtcclxuICAgICAgICB0aGlzLlN1bXVwQWxsU3RvY2soKTtcclxuICAgICAgICAvLyBcdTY4MDdcdTc2ODRcdTYwM0JcdTg5QzhcclxuICAgICAgICB0aGlzLm92ZXJ2aWV3X3RpdGxlX2VsLnNldFRleHQoXCJcdTdGNTFcdTY4M0NcdTYwM0JcdTg5QzhcIik7XHJcbiAgICAgICAgdGhpcy5vdmVydmlld190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKHRoaXMub3ZlcnZpZXdfdGFibGVfZWwsIHRoaXMuc3RvY2tfb3ZlcnZpZXcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8gXHU2MzAxXHU0RUQzXHU1MjA2XHU2NzkwXHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RpdGxlX2VsLnNldFRleHQoXCJcdTYzMDFcdTRFRDNcdTUyMDZcdTY3OTBcIik7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUodGhpcy5ob2xkaW5nX3RhYmxlX2VsLCB0aGlzLmhvbGRpbmdfb3ZlcnZpZXcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8gXHU3NkM4XHU0RThGXHU2MDNCXHU4OUM4XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGl0bGVfZWwuc2V0VGV4dChcIlx1NzZDOFx1NEU4Rlx1NjAzQlx1ODlDOFwiKTtcclxuICAgICAgICB0aGlzLmluY29tZV90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKHRoaXMuaW5jb21lX3RhYmxlX2VsLCB0aGlzLmluY29tZV9vdmVydmlldywgZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBcdTY4MDdcdTc2ODRcdTRGRTFcdTYwNkZcclxuICAgICAgICB0aGlzLmN1c3RvbV90aXRsZV9lbC5zZXRUZXh0KFwiXHU2MjExXHU3Njg0XHU3RjUxXHU2ODNDXCIpO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUodGhpcy5jdXN0b21fdGFibGVfZWwsIHRoaXMuY3VzdG9tX3N0b2NrX292ZXJ2aWV3LCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gXHU4ODY1XHU0RUQzL1x1NTJBMFx1NEVEM1x1NEZFMVx1NjA2RlxyXG4gICAgICAgIHRoaXMuZmlsbGVkX3RpbGVfZWwuc2V0VGV4dChcIlx1ODg2NVx1NEVEM1x1NEZFMVx1NjA2RlwiKTtcclxuICAgICAgICB0aGlzLmZpbGxlZF90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKHRoaXMuZmlsbGVkX3RhYmxlX2VsLCB0aGlzLnN0b2NrX2ZpbGxlZF9vdmVydmlldywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIFx1OEMwM1x1OEJENVx1NEZFMVx1NjA2RlxyXG4gICAgICAgIC8vIHRoaXMuZGVidWdfbG9nX3RpdGxlX2VsLnNldFRleHQoXCJcdThDMDNcdThCRDVcdTY1RTVcdTVGRDdcIik7XHJcbiAgICAgICAgLy8gdGhpcy5kZWJ1Z19sb2dfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICAvLyB0aGlzLkRpc3BsYXlUYWJsZSh0aGlzLmRlYnVnX2xvZ190YWJsZV9lbCwgdGhpcy5kZWJ1Z19sb2csIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBEaXNwbGF5VGFibGUodGFibGVfZWw6IEhUTUxFbGVtZW50LCB0YWJsZTogc3RyaW5nW11bXSwgaXNfY29sb3I6IGJvb2xlYW4pXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgdGFibGVfYm9keSA9IHRhYmxlX2VsLmNyZWF0ZUVsKFwidGJvZHlcIik7XHJcbiAgICAgICAgdGFibGUuZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYmxlX3JvdyA9IHRhYmxlX2JvZHkuY3JlYXRlRWwoXCJ0clwiKTtcclxuICAgIFxyXG4gICAgICAgICAgICByb3cuZm9yRWFjaCgoY2VsbCwgaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX2NvbG9yKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqID4gMCkgXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZV9yb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IGNlbGwsIGF0dHI6IHtcImJnQ29sb3JcIjogdGFibGVbaV1bMF0sIFwiYWxpZ25cIjogXCJyaWdodFwifX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJsZV9yb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IGNlbGwsIGF0dHI6IHtcImFsaWduXCI6IFwicmlnaHRcIn19KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCAiLypcclxuICAgIENvcnJlbGF0aW9uOiBcdTc2RjhcdTUxNzNcdTYwMjdcdTdDRkJcdTY1NzBcdTg5QzZcdTU2RkVcclxuICAgIFx1NUM1NVx1NzkzQVx1NTkxQVx1NEUyQVx1NjgwN1x1NzY4NFx1NEUyNFx1NEUyNFx1OTVGNFx1NzY4NFx1NkRBOFx1OERDQ1x1OEQ3MFx1NTJCRlx1NzZGOFx1NTE3M1x1NjAyN1xyXG4qL1xyXG5cclxuaW1wb3J0IHsgVGV4dEZpbGVWaWV3LCBXb3Jrc3BhY2VMZWFmLCBURmlsZSwgVEZvbGRlciwgVmF1bHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBWSUVXX1RZUEVfQ09SID0gXCJjb3Itdmlld1wiXHJcblxyXG5leHBvcnQgY2xhc3MgQ29yVmlldyBleHRlbmRzIFRleHRGaWxlVmlld1xyXG57XHJcbiAgICBkYXRhX2VsOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmKVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBWSUVXX1RZUEVfQ09SO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpZXdEYXRhKCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Vmlld0RhdGEoZGF0YTogc3RyaW5nLCBjbGVhcjogYm9vbGVhbik6IHZvaWQgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLlJlZnJlc2goKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gXCJcIjsgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IFxyXG4gICAge1xyXG4gICAgICAgIGxldCBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmRhdGFfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25DbG9zZSgpOiBQcm9taXNlPHZvaWQ+XHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBSZWZyZXNoKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRhdGFfZWwuc2V0VGV4dCh0aGlzLmRhdGEpO1xyXG4gICAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQXFEQSxXQUFPLGVBQWUsU0FBUyxjQUFjLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDNUQsWUFBUSxNQUFNO0FBRWQsUUFBSUE7QUFBQTtBQUFBLE1BQXFCLFdBQVk7QUFDakMsaUJBQVNBLE9BQU07QUFDWCxlQUFLLGNBQWM7QUFDbkIsZUFBSyxnQkFBZ0I7QUFDckIsZUFBSyxTQUFTLElBQUksV0FBVyxDQUFDO0FBQzlCLGVBQUssVUFBVSxJQUFJLFlBQVksRUFBRTtBQUNqQyxlQUFLLFdBQVcsSUFBSSxXQUFXLEtBQUssU0FBUyxHQUFHLEVBQUU7QUFDbEQsZUFBSyxZQUFZLElBQUksWUFBWSxLQUFLLFNBQVMsR0FBRyxFQUFFO0FBQ3BELGVBQUssTUFBTTtBQUFBLFFBQ2Y7QUFDQSxRQUFBQSxLQUFJLFVBQVUsU0FBVSxLQUFLLEtBQUs7QUFDOUIsY0FBSSxRQUFRLFFBQVE7QUFBRSxrQkFBTTtBQUFBLFVBQU87QUFDbkMsaUJBQU8sS0FBSyxjQUNQLE1BQU0sRUFDTixVQUFVLEdBQUcsRUFDYixJQUFJLEdBQUc7QUFBQSxRQUNoQjtBQUNBLFFBQUFBLEtBQUksZUFBZSxTQUFVLEtBQUssS0FBSztBQUNuQyxjQUFJLFFBQVEsUUFBUTtBQUFFLGtCQUFNO0FBQUEsVUFBTztBQUNuQyxpQkFBTyxLQUFLLGNBQ1AsTUFBTSxFQUNOLGVBQWUsR0FBRyxFQUNsQixJQUFJLEdBQUc7QUFBQSxRQUNoQjtBQUNBLFFBQUFBLEtBQUksT0FBTyxTQUFVLEdBQUc7QUFDcEIsY0FBSSxLQUFLQSxLQUFJO0FBQ2IsY0FBSSxLQUFLQSxLQUFJO0FBQ2IsY0FBSTtBQUNKLGNBQUk7QUFDSixjQUFJO0FBQ0osY0FBSTtBQUNKLGVBQUssSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUc7QUFDdkIscUJBQVMsSUFBSTtBQUNiLGdCQUFJLEVBQUUsQ0FBQztBQUNQLGlCQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHO0FBQ3ZCLGlCQUFHLFNBQVMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLElBQUksRUFBSTtBQUN2QyxxQkFBTztBQUNQLGlCQUFHLFNBQVMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLElBQUksRUFBSTtBQUN2QyxxQkFBTztBQUFBLFlBQ1g7QUFBQSxVQUNKO0FBQ0EsaUJBQU8sR0FBRyxLQUFLLEVBQUU7QUFBQSxRQUNyQjtBQUNBLFFBQUFBLEtBQUksWUFBWSxTQUFVLEdBQUcsR0FBRztBQUM1QixjQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsY0FBSSxJQUFJLEVBQUUsQ0FBQztBQUNYLGNBQUksSUFBSSxFQUFFLENBQUM7QUFDWCxjQUFJLElBQUksRUFBRSxDQUFDO0FBRVgsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLFdBQVc7QUFDMUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLFFBQVE7QUFDeEMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLFdBQVc7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFFL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLFlBQVk7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLFdBQVc7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLFlBQVk7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDM0MsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLGFBQWE7QUFDNUMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLGFBQWE7QUFDN0MsZUFBSyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDOUIsZ0JBQU0sSUFBSSxJQUFJLElBQUksQ0FB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YUFBYTtBQUMzQyxlQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sSUFBSTtBQUMvQixnQkFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFdBQVc7QUFDeEMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksYUFBYTtBQUMxQyxlQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sSUFBSTtBQUMvQixnQkFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLFVBQVU7QUFDeEMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzFDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksYUFBYTtBQUMxQyxlQUFLLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSTtBQUM5QixnQkFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLFdBQVc7QUFDekMsZUFBSyxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUk7QUFDL0IsZ0JBQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzFDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksYUFBYTtBQUMzQyxlQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sSUFBSTtBQUMvQixnQkFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFlBQVk7QUFDekMsZUFBSyxLQUFL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QUFLLGlCQUFpQixLQUFLLENBQUMsZ0JBQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3BFLFNBQUssaUJBQWlCLEtBQUssQ0FBQyxnQkFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDcEUsU0FBSyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsMEJBQU0sQ0FBQztBQUNwRixTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJBQVEsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3JFLFNBQUssZ0JBQWdCLEtBQUssQ0FBQyw0QkFBUSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDckUsU0FBSyxnQkFBZ0IsS0FBSyxDQUFDLDRCQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNyRSxTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJBQVEsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3JFLFNBQUssZ0JBQWdCLEtBQUssQ0FBQyw0QkFBUSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDckUsU0FBSyxnQkFBZ0IsS0FBSyxDQUFDLDRCQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNyRSxTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJBQVEsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3JFLFNBQUssZ0JBQWdCLEtBQUssQ0FBQyw0QkFBUSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDckUsU0FBSyxnQkFBZ0IsS0FBSyxDQUFDLDRCQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNyRSxTQUFLLGdC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QUs7QUFDaEQsYUFBUyxTQUFTLElBQUksRUFBRSxRQUFRLDBCQUFNO0FBQ3RDLFFBQUk7QUFDSixTQUFLLFFBQVEsS0FBSyxXQUFXLGVBQzdCO0FBQ0ksWUFBTSxXQUFXLGFBQWEsSUFBSSxJQUFJO0FBQ3RDLFVBQUksWUFBWSxRQUNoQjtBQUNJLGNBQU0sVUFBVSxJQUFJLHlCQUFRLFFBQVEsRUFBRSxRQUFRLFFBQVE7QUFDdEQsZ0JBQVEsUUFBUSxDQUFDLFdBQVcsY0FBWSxTQUFTO0FBQzdDLG9CQUFVLFNBQVMsT0FBTyxnQkFBZ0IsS0FBSyxXQUFXLGVBQWUsV0FBVyxDQUFDLENBQUM7QUFDdEYsb0JBQVUsU0FBUyxDQUFDLFVBQWtCO0FBQ2xDLDRCQUFnQixLQUFLLFdBQVcsZUFBZSxhQUFhLEtBQUs7QUFDakUsaUJBQUssV0FBVyxzQkFBc0I7QUFBQSxVQUMxQyxDQUFDO0FBQUEsUUFDTCxDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFFQSxVQUFNLFdBQVcsS0FBSyxZQUFZLFNBQVMsS0FBSztBQUNoRCxhQUFTLFNBQVMsSUFBSSxFQUFFLFFBQVEsMEJBQU07QUFDdEMsUUFBSTtBQUNKLFNBQUssT0FBTyxLQUFLLFdBQVcsZUFDNUI7QUFDSSxZQUFNLFdBQVcsYUFBYSxJQUFJLEdBQUc7QUFDckMsVUFBSSxZQUFZLFFBQ2hCO0FBQ0ksY0FBTSxVQUFVLElBQUkseUJBQVEsUUFBUSxFQUFFLFFBQVEsUUFBUTtBQUN0RCxnQkFBUSxRQUFRLENBQUMsV0FBVyxjQUFZLFFBQVE7QUFDNUMsbUJBQVMscUJBQXFCLFdBQVc7QUFDekMsb0JBQVUsU0FBUyxPQUFPLGdCQUFnQixLQUFLLFdBQVcsZUFBZSxXQUFXLENBQUMsQ0FBQztBQUN0RixvQkFBVSxTQUFTLENBQUMsVUFBa0I7QUFDOUIsNEJBQWdCLEtBQUssV0FBVyxlQUFlLGFBQWEsT0FBTyxLQUFLLENBQUM7QUFDekUscUJBQVMscUJBQXFCLGFBQWEsZ0JBQWdCLEtBQUssV0FBVyxlQUFlLFdBQVcsQ0FBQztBQUN0RyxpQkFBSyxXQUFXLHNCQUFzQjtBQUFBLFVBQzlDLENBQUM7QUFBQSxRQUNMLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFsiTWQ1IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAic3RycyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaWR4IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbmRleCJdCn0K
