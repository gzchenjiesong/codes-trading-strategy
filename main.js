/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ts-md5/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/ts-md5/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Md5 = void 0;
    var Md52 = (
      /** @class */
      function() {
        function Md53() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state = new Int32Array(4);
          this._buffer = new ArrayBuffer(68);
          this._buffer8 = new Uint8Array(this._buffer, 0, 68);
          this._buffer32 = new Uint32Array(this._buffer, 0, 17);
          this.start();
        }
        Md53.hashStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendStr(str).end(raw);
        };
        Md53.hashAsciiStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendAsciiStr(str).end(raw);
        };
        Md53._hex = function(x) {
          var hc = Md53.hexChars;
          var ho = Md53.hexOut;
          var n;
          var offset;
          var j;
          var i;
          for (i = 0; i < 4; i += 1) {
            offset = i * 8;
            n = x[i];
            for (j = 0; j < 8; j += 2) {
              ho[offset + 1 + j] = hc.charAt(n & 15);
              n >>>= 4;
              ho[offset + 0 + j] = hc.charAt(n & 15);
              n >>>= 4;
            }
          }
          return ho.join("");
        };
        Md53._md5cycle = function(x, k) {
          var a = x[0];
          var b = x[1];
          var c = x[2];
          var d = x[3];
          a += (b & c | ~b & d) + k[0] - 680876936 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[1] - 389564586 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[2] + 606105819 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[4] - 176418897 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[7] - 45705983 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[10] - 42063 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[13] - 40341101 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & d | c & ~d) + k[1] - 165796510 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[11] + 643717713 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[0] - 373897302 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[5] - 701558691 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[10] + 38016083 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[15] - 660478335 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[4] - 405537848 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[9] + 568446438 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[3] - 187363961 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[2] - 51403784 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b ^ c ^ d) + k[5] - 378558 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[14] - 35309556 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[7] - 155497632 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[13] + 681279174 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[0] - 358537222 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[3] - 722521979 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[6] + 76029189 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[9] - 640364487 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[12] - 421815835 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[15] + 530742520 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[2] - 995338651 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          x[0] = a + x[0] | 0;
          x[1] = b + x[1] | 0;
          x[2] = c + x[2] | 0;
          x[3] = d + x[3] | 0;
        };
        Md53.prototype.start = function() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state.set(Md53.stateIdentity);
          return this;
        };
        Md53.prototype.appendStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var code;
          var i;
          for (i = 0; i < str.length; i += 1) {
            code = str.charCodeAt(i);
            if (code < 128) {
              buf8[bufLen++] = code;
            } else if (code < 2048) {
              buf8[bufLen++] = (code >>> 6) + 192;
              buf8[bufLen++] = code & 63 | 128;
            } else if (code < 55296 || code > 56319) {
              buf8[bufLen++] = (code >>> 12) + 224;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            } else {
              code = (code - 55296) * 1024 + (str.charCodeAt(++i) - 56320) + 65536;
              if (code > 1114111) {
                throw new Error("Unicode standard supports code points up to U+10FFFF");
              }
              buf8[bufLen++] = (code >>> 18) + 240;
              buf8[bufLen++] = code >>> 12 & 63 | 128;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            }
            if (bufLen >= 64) {
              this._dataLength += 64;
              Md53._md5cycle(this._state, buf32);
              bufLen -= 64;
              buf32[0] = buf32[16];
            }
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendAsciiStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(str.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = str.charCodeAt(j++);
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendByteArray = function(input) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(input.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = input[j++];
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.getState = function() {
          var s = this._state;
          return {
            buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),
            buflen: this._bufferLength,
            length: this._dataLength,
            state: [s[0], s[1], s[2], s[3]]
          };
        };
        Md53.prototype.setState = function(state) {
          var buf = state.buffer;
          var x = state.state;
          var s = this._state;
          var i;
          this._dataLength = state.length;
          this._bufferLength = state.buflen;
          s[0] = x[0];
          s[1] = x[1];
          s[2] = x[2];
          s[3] = x[3];
          for (i = 0; i < buf.length; i += 1) {
            this._buffer8[i] = buf.charCodeAt(i);
          }
        };
        Md53.prototype.end = function(raw) {
          if (raw === void 0) {
            raw = false;
          }
          var bufLen = this._bufferLength;
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var i = (bufLen >> 2) + 1;
          this._dataLength += bufLen;
          var dataBitsLen = this._dataLength * 8;
          buf8[bufLen] = 128;
          buf8[bufLen + 1] = buf8[bufLen + 2] = buf8[bufLen + 3] = 0;
          buf32.set(Md53.buffer32Identity.subarray(i), i);
          if (bufLen > 55) {
            Md53._md5cycle(this._state, buf32);
            buf32.set(Md53.buffer32Identity);
          }
          if (dataBitsLen <= 4294967295) {
            buf32[14] = dataBitsLen;
          } else {
            var matches = dataBitsLen.toString(16).match(/(.*?)(.{0,8})$/);
            if (matches === null) {
              return;
            }
            var lo = parseInt(matches[2], 16);
            var hi = parseInt(matches[1], 16) || 0;
            buf32[14] = lo;
            buf32[15] = hi;
          }
          Md53._md5cycle(this._state, buf32);
          return raw ? this._state : Md53._hex(this._state);
        };
        Md53.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]);
        Md53.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        Md53.hexChars = "0123456789abcdef";
        Md53.hexOut = [];
        Md53.onePassHasher = new Md53();
        return Md53;
      }()
    );
    exports.Md5 = Md52;
    if (Md52.hashStr("hello") !== "5d41402abc4b2a76b9719d911017c592") {
      throw new Error("Md5 self test failed.");
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TradingStrategy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/lang_str.ts
var SETTING_NAME = /* @__PURE__ */ new Map([
  ["ONE_GRID_LIMIT", "\u9996\u7F51\u4E0A\u9650\u503C"],
  ["MAX_SLUMP_PCT", "\u6700\u5927\u56DE\u64A4\u503C"],
  ["TRIGGER_ADD_POINT", "\u89E6\u53D1\u4EF7\u52A0\u70B9"],
  ["TRADING_PRICE_PRECISION", "\u4EA4\u6613\u4EF7\u7CBE\u5EA6"],
  ["MIN_BATCH_COUNT", "\u5355\u624B\u4EFD\u6570\u989D"],
  ["MAX_RISE_PCT", "\u5355\u65E5\u6700\u5927\u6DA8\u5E45"],
  ["SGRID_STEP_PCT", "\u5C0F\u7F51\u6B65\u8FDB\u503C"],
  ["SGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["SGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["MGRID_STEP_PCT", "\u4E2D\u7F51\u6B65\u8FDB\u503C"],
  ["MGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["MGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["LGRID_STEP_PCT", "\u5927\u7F51\u6B65\u8FDB\u503C"],
  ["LGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["LGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["DATA_API_LICENCE", "\u6570\u636E\u63A5\u53E3\u8BC1\u4E66"]
]);
var SGRID_TYPE_NAME_STR = "\u5C0F\u7F51";
var MGRID_TYPE_NAME_STR = "\u4E2D\u7F51";
var LGRID_TYPE_NAME_STR = "\u5927\u7F51";
var PERFIT_TYPE_NAME_STR = "\u5229\u6DA6";

// src/settings.ts
var GRID_COLOR_BUY_MONITOR = "#FFFF00";
var GRID_COLOR_SELL_MONITOR = "#FFFF00";
var GRID_COLOR_BUY_TRIGGERED = "#D3D3D3";
var GRID_COLOR_SELL_TRIGGERED = "#FFFFE0";
var GRID_COLOR_STOCK_OVERVIEW = "#FFFFFF";
var GRID_COLOR_TABLE_TITLE = "#D3D3D3";
var GRID_COLOR_BUY_OVERVIEW = "#FFFF01";
var GRID_COLOR_SELL_OVERVIEW = "#FFFF00";
function PackSettings(settings) {
  let pack_str = "";
  let key;
  for (key in settings) {
    if (SETTING_NAME.has(String(key))) {
      pack_str = pack_str + String(key) + ":" + String(settings[key]) + "\n";
    }
  }
  return pack_str;
}
function UnpackSettings(settings, lines) {
  lines.forEach((line, idx) => {
    const strs = line.split(":");
    if (SETTING_NAME.has(strs[0])) {
      SetSettingValue(settings, strs[0], strs[1]);
    }
  });
}
function GetSettingValue(settings, key) {
  return settings[key];
}
function SetSettingValue(settings, key, value) {
  if (key in settings) {
    settings[key] = value;
  }
}
var PluginBaseSettings = class {
  constructor() {
    this.DATA_API_LICENCE = "112e84656174f0a5";
    this.DATA_API_LICENCE = "b192f53a6d6928033";
  }
};
var GridTradingSettings = class {
  constructor() {
    this.ONE_GRID_LIMIT = 1e4;
    this.MAX_SLUMP_PCT = 0.67;
    this.TRIGGER_ADD_POINT = 5e-3;
    this.TRADING_PRICE_PRECISION = 3;
    this.MIN_BATCH_COUNT = 100;
    this.MAX_RISE_PCT = 0.1;
    this.CLEAR_STEP_PCT = 0.25;
    this.MINIMUM_BUY_PCT = 0.1;
    this.BOTTOM_BUY_PCT = 0.2;
    this.SGRID_STEP_PCT = 0.05;
    this.SGRID_ADD_PCT = 0.05;
    this.SGRID_RETAIN_COUNT = 4;
    this.MGRID_STEP_PCT = 0.22;
    this.MGRID_ADD_PCT = 0.2;
    this.MGRID_RETAIN_COUNT = 2;
    this.LGRID_STEP_PCT = 0.52;
    this.LGRID_ADD_PCT = 0.5;
    this.LGRID_RETAIN_COUNT = 1;
  }
  Clone() {
    const clone = new GridTradingSettings();
    clone.ONE_GRID_LIMIT = this.ONE_GRID_LIMIT;
    clone.MAX_SLUMP_PCT = this.MAX_SLUMP_PCT;
    clone.TRIGGER_ADD_POINT = this.TRIGGER_ADD_POINT;
    clone.TRADING_PRICE_PRECISION = this.TRADING_PRICE_PRECISION;
    clone.MIN_BATCH_COUNT = this.MIN_BATCH_COUNT;
    clone.MAX_RISE_PCT = this.MAX_RISE_PCT;
    clone.CLEAR_STEP_PCT = this.CLEAR_STEP_PCT;
    clone.MINIMUM_BUY_PCT = this.MINIMUM_BUY_PCT;
    clone.BOTTOM_BUY_PCT = this.BOTTOM_BUY_PCT;
    clone.SGRID_STEP_PCT = this.SGRID_STEP_PCT;
    clone.SGRID_ADD_PCT = this.SGRID_ADD_PCT;
    clone.SGRID_RETAIN_COUNT = this.SGRID_RETAIN_COUNT;
    clone.MGRID_STEP_PCT = this.MGRID_STEP_PCT;
    clone.MGRID_ADD_PCT = this.MGRID_ADD_PCT;
    clone.MGRID_RETAIN_COUNT = this.MGRID_RETAIN_COUNT;
    clone.LGRID_STEP_PCT = this.LGRID_STEP_PCT;
    clone.LGRID_ADD_PCT = this.LGRID_ADD_PCT;
    clone.LGRID_RETAIN_COUNT = this.LGRID_RETAIN_COUNT;
    return clone;
  }
  PackBase() {
    const setting = [
      "BASE",
      String(this.ONE_GRID_LIMIT),
      String(this.MAX_SLUMP_PCT),
      String(this.TRIGGER_ADD_POINT),
      String(this.TRADING_PRICE_PRECISION),
      String(this.MIN_BATCH_COUNT),
      String(this.MAX_RISE_PCT),
      String(this.CLEAR_STEP_PCT),
      String(this.MINIMUM_BUY_PCT),
      String(this.BOTTOM_BUY_PCT)
    ];
    return setting.join(",");
  }
  UnpackBase(strs) {
    if (strs.length < 10) {
      return;
    }
    this.ONE_GRID_LIMIT = Number(strs[1]);
    this.MAX_SLUMP_PCT = Number(strs[2]);
    this.TRIGGER_ADD_POINT = Number(strs[3]);
    this.TRADING_PRICE_PRECISION = Number(strs[4]);
    this.MIN_BATCH_COUNT = Number(strs[5]);
    this.MAX_RISE_PCT = Number(strs[6]);
    this.CLEAR_STEP_PCT = Number(strs[7]);
    this.MINIMUM_BUY_PCT = Number(strs[8]);
    this.BOTTOM_BUY_PCT = Number(strs[9]);
  }
  PackStep() {
    const setting = [
      "STEP",
      String(this.SGRID_STEP_PCT),
      String(this.SGRID_ADD_PCT),
      String(this.SGRID_RETAIN_COUNT),
      String(this.MGRID_STEP_PCT),
      String(this.MGRID_ADD_PCT),
      String(this.MGRID_RETAIN_COUNT),
      String(this.LGRID_STEP_PCT),
      String(this.LGRID_ADD_PCT),
      String(this.LGRID_RETAIN_COUNT)
    ];
    return setting.join(",");
  }
  UnpackStep(strs) {
    if (strs.length != 10) {
      return;
    }
    this.SGRID_STEP_PCT = Number(strs[1]);
    this.SGRID_ADD_PCT = Number(strs[2]);
    this.SGRID_RETAIN_COUNT = Number(strs[3]);
    this.MGRID_STEP_PCT = Number(strs[4]);
    this.MGRID_ADD_PCT = Number(strs[5]);
    this.MGRID_RETAIN_COUNT = Number(strs[6]);
    this.LGRID_STEP_PCT = Number(strs[7]);
    this.LGRID_ADD_PCT = Number(strs[8]);
    this.LGRID_RETAIN_COUNT = Number(strs[9]);
  }
  PackQuant() {
    const setting = ["QUANT"];
    return setting.join(",");
  }
  UnpackQuant(strs) {
  }
};

// src/remote_util.ts
var import_obsidian = require("obsidian");
function DebugLog(...args) {
  let log_str = "";
  args.forEach((cell, i) => {
    log_str = log_str + String(cell);
  });
  new import_obsidian.Notice(log_str);
}

// src/grid_view.ts
var import_obsidian2 = require("obsidian");

// src/mymath.ts
function FixedPrice(price, pct, precision) {
  const scale = 10 ** precision;
  return Math.floor(Math.floor(price * scale) * Math.floor(pct * 100) / 100) / scale;
}
function MyFloor(num, single) {
  return Math.floor(num / single) * single;
}
function MyCeil(num, single) {
  return Math.ceil(num / single) * single;
}
function ToPercent(num, count = 0) {
  return (num * 100).toFixed(count) + "%";
}
function ToPercentStr(num, count = 0) {
  return num.toFixed(count) + "%";
}
function ToNumber(percent) {
  return Number(percent.replace("%", "")) / 100;
}
function ToTradingGap(current_price, target_price, count = 0) {
  if (target_price == void 0 || current_price == void 0 || current_price == 0) {
    return "-";
  }
  const gap = Math.abs(target_price - current_price);
  if (target_price > current_price) {
    return "+" + ToPercent(gap / current_price, count);
  } else {
    return "-" + ToPercent(gap / current_price, count);
  }
}
function IsNumeric(str) {
  return !isNaN(Number(str));
}
function TimeDuarion(dateStr1, dateStr2) {
  const date1 = new Date(dateStr1);
  const date2 = new Date(dateStr2);
  if (isNaN(date1.getTime()) || isNaN(date2.getTime())) {
    throw new Error("\u8F93\u5165\u7684\u65E5\u671F\u683C\u5F0F\u4E0D\u6B63\u786E");
  }
  const utc1 = Date.UTC(
    date1.getUTCFullYear(),
    date1.getUTCMonth(),
    date1.getUTCDate()
  );
  const utc2 = Date.UTC(
    date2.getUTCFullYear(),
    date2.getUTCMonth(),
    date2.getUTCDate()
  );
  return Math.abs(Math.floor((utc1 - utc2) / (1e3 * 60 * 60 * 24)));
}
function AveragePriceStr(cost, count, single) {
  if (count == 0) {
    return count.toFixed(single);
  }
  return String((cost / count).toFixed(single));
}
function StringPlus(num1, num2, single) {
  return String(MyFloor(Number(num1) + Number(num2), single));
}
function ProportionPctStr(count, total, single) {
  if (total == 0) {
    return total.toFixed(single) + "%";
  }
  return String((count / total * 100).toFixed(single)) + "%";
}

// src/grid_trading.ts
var import_md5 = __toESM(require_md5());
var GridTrading = class {
  constructor(plugin_env) {
    this.plugin_env = plugin_env;
    this.grid_settings = plugin_env.grid_settings.Clone();
    this.debug_log = [];
    this.data_md5 = "";
    this.is_empty = true;
    this.is_debug = false;
    this.remote_current_price = -1;
  }
  InitGridTrading(data) {
  }
  UpdateRemotePrice(remote_price) {
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  GetTradingTitle() {
    return this.stock_name + "(" + String(this.target_stock) + ")";
  }
  IsStock() {
    if (this.is_empty == false && (this.market_code == "sz" || this.market_code == "sh")) {
      return true;
    } else {
      return false;
    }
  }
  IsMonitor() {
    if (this.is_empty || this.is_debug || this.is_clear || this.is_cancel) {
      return false;
    } else {
      return true;
    }
  }
  ParseRawData(data) {
    const new_md5 = import_md5.Md5.hashStr(data);
    if (new_md5 === this.data_md5) {
      return false;
    }
    this.data_md5 = new_md5;
    const lines = data.split("\n");
    const strs = lines[0].split(",");
    this.target_stock = Number(strs[1]);
    this.stock_name = strs[2];
    this.market_code = strs[3];
    this.target_price = Number(strs[4]);
    this.current_price = Number(strs[5]);
    this.remote_current_price = this.plugin_env.GetStockRemotePrice(strs[1]);
    if (this.remote_current_price > 0) {
      this.current_price = this.remote_current_price;
    }
    this.is_debug = false;
    this.is_pause = false;
    this.is_clear = false;
    this.is_cancel = false;
    this.grid_settings = this.plugin_env.grid_settings.Clone();
    this.raw_trading_record = [];
    this.raw_adjust_record = [];
    this.buy_grid_record = [];
    this.sgrid_step_table = [];
    this.mgrid_step_table = [];
    this.lgrid_step_table = [];
    this.clear_sell_record = /* @__PURE__ */ new Map();
    this.force_view_grid_list = [];
    for (let idx = 1; idx < lines.length; idx++) {
      const strs2 = lines[idx].split(",");
      if (strs2[0] == "BUY") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.push(strs2[2]);
      }
      if (strs2[0] == "SELL") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.remove(strs2[2]);
      }
      if (strs2[0] == "SHARE") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "BASE") {
        this.grid_settings.UnpackBase(strs2);
      }
      if (strs2[0] == "STEP") {
        this.grid_settings.UnpackStep(strs2);
      }
      if (strs2[0] == "SGRID") {
        this.sgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "MGRID") {
        this.mgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "LGRID") {
        this.lgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "ADJ") {
        this.raw_adjust_record.push([strs2[1], strs2[2], strs2[3], strs2[4], strs2[5]]);
      }
      if (strs2[0] == "VIEW") {
        for (let i = 1; i < strs2.length; i++)
          if (strs2[i].trim().length > 0)
            this.force_view_grid_list.push(strs2[i].trim());
      }
      if (strs2[0] == "CTRL") {
        for (let i = 1; i < strs2.length; i++) {
          if (strs2[i].trim() == "DEBUG") {
            this.is_debug = true;
          }
          if (strs2[i].trim() == "PAUSE") {
            this.is_pause = true;
          }
          if (strs2[i].trim() == "CLEAR") {
            this.is_clear = true;
          }
          if (strs2[i].trim() == "CANCEL") {
            this.is_cancel = true;
          }
        }
      }
      if (strs2[0] == "HIST") {
        if (strs2[1] == "RANGE") {
        }
      }
    }
    return true;
  }
  InitTradingOverview() {
    this.stock_overview = [
      GRID_COLOR_STOCK_OVERVIEW,
      String(this.target_stock),
      this.stock_name,
      this.target_price.toFixed(3),
      this.current_price.toFixed(3),
      ToPercent(this.current_price / this.target_price, 1),
      String(this.total_hold),
      String(this.total_cost),
      ToTradingGap(this.total_cost, this.total_hold * this.current_price, 2),
      this.trading_income[5][10]
    ];
    this.stock_buy_overview = [];
    if (this.buy_monitor_rows.length > 0 && !(this.is_pause || this.is_clear || this.is_cancel)) {
      for (let idx = 0; idx < this.buy_monitor_rows.length; idx++) {
        const row = this.buy_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][3]), 2);
        this.stock_buy_overview.push([
          GRID_COLOR_BUY_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][2],
          this.trading_table[row][3],
          this.trading_table[row][4],
          this.trading_table[row][5],
          trading_gap
        ]);
      }
    }
    this.stock_sell_overview = [];
    if (this.sell_monitor_rows.length > 0 && !(this.is_clear || this.is_cancel)) {
      for (let idx = 0; idx < this.sell_monitor_rows.length; idx++) {
        const row = this.sell_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][7]), 2);
        this.stock_sell_overview.push([
          GRID_COLOR_SELL_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][6],
          this.trading_table[row][7],
          this.trading_table[row][8],
          this.trading_table[row][9],
          trading_gap
        ]);
      }
    }
    if (this.stock_active_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_active_filled_record.length; idx++) {
        const row = this.stock_active_filled_record[idx];
        row[8] = String(this.current_price);
        row[9] = ToTradingGap(Number(row[5]), this.current_price);
        row[10] = String(MyCeil(Number(row[7]) / this.current_price, this.grid_settings.MIN_BATCH_COUNT));
        row[11] = String(Number(row[6]) - Number(row[10]));
      }
    }
    if (this.stock_passive_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_passive_filled_record.length; idx++) {
        const row = this.stock_passive_filled_record[idx];
        const grid_row = this.FindTradingGridRow(row[3]);
        if (grid_row.length > 0) {
          row[3] = grid_row[0];
          row[4] = grid_row[1];
          row[5] = grid_row[3];
          row[6] = grid_row[4];
          row[7] = grid_row[5];
          row[8] = String(this.current_price);
          row[9] = ToTradingGap(Number(row[5]), this.current_price);
          row[10] = grid_row[7];
          row[11] = ToTradingGap(this.current_price, Number(row[10]));
        }
      }
    }
  }
  InitStockTable() {
    this.empty_price = FixedPrice(this.target_price, 1 + this.grid_settings.SGRID_STEP_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (Number(this.trading_table[idx][7]) > this.empty_price) {
        this.empty_price = Number(this.trading_table[idx][7]);
      }
    }
    const clear_pct = this.grid_settings.CLEAR_STEP_PCT;
    this.clear_avg_price = Number(((this.CalcClearPrice(clear_pct, 1) + this.CalcClearPrice(clear_pct, 2) + this.CalcClearPrice(clear_pct, 3)) / 3).toFixed(this.grid_settings.TRADING_PRICE_PRECISION));
    this.clear_price = this.CalcClearPrice(clear_pct, 3);
    const mini_price = FixedPrice(this.target_price, this.grid_settings.MINIMUM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    const bottom_price = FixedPrice(this.target_price, this.grid_settings.BOTTOM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    this.stock_table = [
      ["\u6807\u7684\u4EE3\u53F7", String(this.target_stock)],
      ["\u6807\u7684\u540D\u79F0", this.stock_name],
      ["\u7F51\u683C\u6A21\u5F0F", this.mode_type],
      ["\u9996\u7F51\u4EF7\u683C", String(this.target_price)],
      ["\u5F53\u524D\u4EF7\u683C", String(this.current_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.current_price / this.target_price, 1)],
      ["\u56DE\u8C03\u4EF7\u683C", String(bottom_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.BOTTOM_BUY_PCT, 1)],
      ["\u6700\u4F4E\u4EF7\u683C", String(mini_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.MINIMUM_BUY_PCT, 1)],
      ["\u505C\u683C\u8DCC\u5E45", ToTradingGap(this.current_price, mini_price), "\u6E05\u683C\u6DA8\u5E45", ToTradingGap(this.current_price, this.empty_price, 1)]
    ];
    for (let idx = 0; idx < this.force_view_grid_list.length; idx++) {
      const row = this.FindTradingGridRowIndex(this.force_view_grid_list[idx]);
      if (row < 0 || this.buy_monitor_rows.includes(row)) {
        continue;
      }
      this.buy_monitor_rows.push(row);
    }
  }
  InitGridParam() {
    this.param_table = [
      ["\u9996\u7F51\u76EE\u6807\u91D1\u989D", String(this.grid_settings.ONE_GRID_LIMIT), "\u6700\u5927\u56DE\u64A4\u503C", ToPercent(this.grid_settings.MAX_SLUMP_PCT), "\u6700\u5927\u6DA8\u8DCC\u5E45", ToPercent(this.grid_settings.MAX_RISE_PCT)],
      ["\u89E6\u53D1\u4EF7\u52A0\u70B9", String(this.grid_settings.TRIGGER_ADD_POINT), "\u6BCF\u624B\u4EFD\u6570\u989D", String(this.grid_settings.MIN_BATCH_COUNT), "\u4EA4\u6613\u4EF7\u7CBE\u5EA6", String(this.grid_settings.TRADING_PRICE_PRECISION)],
      ["\u5C0F\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.SGRID_STEP_PCT), "\u4E2D\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.MGRID_STEP_PCT), "\u5927\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.LGRID_STEP_PCT)],
      ["\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.SGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.MGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.LGRID_ADD_PCT)],
      ["\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.SGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.MGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.LGRID_RETAIN_COUNT)]
    ];
  }
  InitTradingAnalysis() {
    const price = this.target_price;
    const rise_pct = this.grid_settings.SGRID_STEP_PCT;
    const table = this.trading_table;
    function Analysis(slump_pct) {
      let total_cost = 0;
      let total_amount = 0;
      let total_sell = 0;
      let total_gain = 0;
      const min_price = price * (1 - slump_pct);
      const max_price = price * (1 + rise_pct);
      table.forEach((row, i) => {
        if (i > 0 && ToNumber(row[1]) >= 1 - slump_pct) {
          total_cost = total_cost + Number(row[5]);
          total_amount = total_amount + Number(row[4]);
          total_gain = total_gain + Number(row[9]);
          total_sell = total_sell + Number(row[8]);
        }
      });
      const cost_price = (total_cost - total_gain) / (total_amount - total_sell);
      const gain_money = Math.floor(max_price * (total_amount - total_sell) - (total_cost - total_gain));
      return [
        ToPercent(slump_pct) + "(" + min_price.toFixed(3) + ")",
        String(total_cost),
        String(total_amount),
        String(Math.ceil(total_amount * min_price)),
        (total_cost / total_amount).toFixed(3),
        String(Math.ceil(total_cost - total_amount * min_price)),
        ((total_cost - total_amount * min_price) / total_cost * 100).toFixed(2) + "%",
        ((total_cost / total_amount - min_price) / min_price * 100).toFixed(2) + "%",
        String(total_amount - total_sell),
        String(Math.floor(max_price * (total_amount - total_sell))),
        String(total_cost - total_gain),
        cost_price.toFixed(3),
        ((max_price - cost_price) / cost_price * 100).toFixed(2) + "%",
        String(gain_money),
        (gain_money / total_cost * 100).toFixed(2) + "%"
      ];
    }
    this.trading_analysis = [
      ["\u4E8F\u635F\u5206\u6790", "\u56DE\u64A4\u6BD4\u4F8B"],
      ["", "\u6295\u5165\u8D44\u91D1"],
      ["", "\u6301\u4ED3\u4EFD\u989D"],
      ["", "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u4E8F\u635F\u91D1\u989D"],
      ["", "\u4E8F\u635F\u6BD4\u4F8B"],
      ["", "\u6240\u9700\u6DA8\u5E45"],
      ["\u53CD\u5F39\u76C8\u5229", "\u6301\u4ED3\u4EFD\u989D"],
      [(price * (1 + rise_pct)).toFixed(3), "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u5360\u7528\u672C\u91D1"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u6D6E\u76C8\u6BD4\u4F8B"],
      ["", "\u7F51\u683C\u76C8\u5229"],
      ["", "\u603B\u6D6E\u76C8\u6BD4"]
    ];
    const slump_pcts = [20, 30, 40, 50, 60, 70, 80];
    for (const pct of slump_pcts) {
      const result = Analysis(pct / 100);
      for (let idx = 0; idx < result.length; idx++) {
        this.trading_analysis[idx].push(result[idx]);
      }
    }
  }
  InitTradingRecord() {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    let adjust_price = 0;
    let adjust_count = 0;
    let adjust_cost = 0;
    this.adjust_record = [["\u8C03\u6574\u65E5\u671F", "\u8C03\u6574\u7C7B\u578B", "\u8C03\u6574\u5185\u5BB9", "\u4EA4\u6613\u4EF7\u683C", "\u4EA4\u6613\u80A1\u6570", "\u6D88\u8017\u672C\u91D1"]];
    for (let idx = 0; idx < this.raw_adjust_record.length; idx++) {
      if (IsNumeric(this.raw_adjust_record[idx][3])) {
        adjust_price = Number(this.raw_adjust_record[idx][3]);
      } else {
        adjust_price = 0;
      }
      if (IsNumeric(this.raw_adjust_record[idx][4])) {
        adjust_count = Number(this.raw_adjust_record[idx][4]);
      } else {
        adjust_count = 0;
      }
      adjust_cost = Math.ceil(adjust_price * adjust_count);
      if (adjust_cost > 0) {
        this.adjust_record.push([this.raw_adjust_record[idx][0], this.raw_adjust_record[idx][1], this.raw_adjust_record[idx][2], adjust_price.toFixed(precision), String(adjust_count), String(adjust_cost)]);
      } else {
        this.adjust_record.push([this.raw_adjust_record[idx][0], this.raw_adjust_record[idx][1], this.raw_adjust_record[idx][2], "-", "-", "-"]);
      }
    }
    this.total_retain = 0;
    this.retain_cost = 0;
    this.total_cost = 0;
    this.total_hold = 0;
    this.trading_record = [["\u4EA4\u6613\u65B9\u5411", "\u4EA4\u6613\u65E5\u671F", "\u7F51\u683C\u7C7B\u578B", "\u4EA4\u6613\u4EF7\u683C", "\u4EA4\u6613\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u7D2F\u79EF\u7B79\u7801", "\u6301\u4ED3\u65F6\u957F"]];
    this.stock_passive_filled_record = [];
    this.stock_active_filled_record = [];
    this.holding_record = [];
    let raw_record = [...this.raw_trading_record];
    let cursor = 0;
    let retain_sell = 0;
    while (cursor < raw_record.length) {
      if (raw_record[cursor][0] == "BUY") {
        let scursor = -1;
        for (let idx = cursor; idx < raw_record.length; idx++) {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2] == raw_record[cursor][2]) {
            scursor = idx;
            break;
          }
        }
        if (scursor >= 0) {
          const retain_count = Math.floor(Number(raw_record[cursor][4]) - Number(raw_record[scursor][4]));
          const cost_count = Math.floor(Number(raw_record[cursor][3]) * Number(raw_record[cursor][4]) - Number(raw_record[scursor][3]) * Number(raw_record[scursor][4]));
          const time_d = TimeDuarion(raw_record[cursor][1], raw_record[scursor][1]);
          this.total_retain = this.total_retain + retain_count;
          this.retain_cost = this.retain_cost + cost_count;
          this.trading_record.push([raw_record[cursor][0], raw_record[cursor][1], raw_record[cursor][2], raw_record[cursor][3], raw_record[cursor][4], String(cost_count)]);
          this.trading_record.push([raw_record[scursor][0], raw_record[scursor][1], raw_record[scursor][2], raw_record[scursor][3], raw_record[scursor][4], "--", String(retain_count), String(time_d) + "\u5929"]);
          raw_record.splice(cursor, 1);
          raw_record.splice(scursor - 1, 1);
        } else {
          cursor++;
        }
      } else {
        cursor++;
      }
    }
    for (let idx = 0; idx < raw_record.length; idx++) {
      if (raw_record[idx][0] == "BUY") {
        const cost_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
        this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], String(cost_count)]);
        this.total_cost = this.total_cost + cost_count;
        if (Number(raw_record[idx][3]) > 0) {
          this.total_hold = this.total_hold + Number(raw_record[idx][4]);
          this.holding_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
        if (Number(raw_record[idx][3]) == 0) {
          this.stock_passive_filled_record.push([GRID_COLOR_BUY_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], "", "", "", "", "", "", "", ""]);
        }
        if (raw_record[idx][2].startsWith("\u8865\u4ED3")) {
          this.stock_active_filled_record.push([GRID_COLOR_SELL_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], raw_record[idx][1], raw_record[idx][3], raw_record[idx][4], String(cost_count), "", "", ""]);
        }
      } else {
        if (raw_record[idx][0] == "SHARE") {
          if (raw_record[idx][2] == "\u7EA2\u5229") {
            const gain_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "-" + String(gain_count)]);
            this.retain_cost = this.retain_cost - gain_count;
          }
          if (raw_record[idx][2] == "\u62C6\u80A1") {
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "--", raw_record[idx][4]]);
            this.total_retain = this.total_retain + Number(raw_record[idx][4]);
          }
        } else {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2].startsWith("\u5229\u6DA6")) {
            this.total_retain = this.total_retain - Number(raw_record[idx][4]);
            this.retain_cost = this.retain_cost - Number(raw_record[idx][3]) * Number(raw_record[idx][4]);
            retain_sell = retain_sell + Number(raw_record[idx][4]);
            let sell_count = this.clear_sell_record.get(raw_record[idx][2]);
            if (sell_count == void 0) {
              sell_count = 0;
            }
            this.clear_sell_record.set(raw_record[idx][2], sell_count + Number(raw_record[idx][4]));
          }
          this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
      }
    }
    this.total_hold = this.total_hold + this.total_retain;
    this.total_cost = this.total_cost + this.retain_cost;
    if (this.total_cost != 0) {
      this.trading_record.push(["Cost", "", "", "", "", String(this.total_cost), "", ""]);
    }
    if (this.total_retain <= 0) {
      if (this.total_hold > 0) {
        this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", "0", ""]);
      }
      return;
    }
    this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", String(this.total_retain), ""]);
    const current_pct = MyCeil(this.current_price / this.target_price, 1e-3);
    for (let index = 1; index <= 3; index++) {
      const row = this.GenerateClearRow(PERFIT_TYPE_NAME_STR, index, this.grid_settings.CLEAR_STEP_PCT, MyFloor((this.total_retain + retain_sell) / 3, 100));
      this.trading_table.push(row);
      if (current_pct + this.grid_settings.MAX_RISE_PCT >= ToNumber(row[1])) {
        this.sell_monitor_rows.push(this.trading_table.length - 1);
      }
      this.sell_triggered_rows.push(this.trading_table.length - 1);
    }
  }
  InitTradingIncome() {
    this.trading_income = [];
    this.trading_income.push(["", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5B9E\u9645\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]);
    this.trading_income.push(this.GenerateIncomeRow("\u7D2F\u8BA1\u7B79\u7801", this.total_retain, this.retain_cost, this.current_price, this.retain_cost, 0, 0));
    let need_slump = !this.is_clear && !this.is_cancel;
    this.CalcTradingIncome("\u5F53\u524D", this.current_price / this.target_price, this.empty_price, this.clear_avg_price, this.clear_price, false);
    this.CalcTradingIncome("\u56DE\u8C03", this.grid_settings.BOTTOM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price, need_slump);
    this.CalcTradingIncome("\u6700\u5927", this.grid_settings.MINIMUM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price, need_slump);
  }
  InitHoldingAnalysis() {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.holding_analysis = [];
    this.holding_analysis.push(["\u7B79\u7801\u7C7B\u578B", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]);
    this.holding_analysis.push(["\u603B\u989D"]);
    this.CalcHoldingPercent("\u5C0F\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u4E2D\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u5927\u7F51", this.empty_price, this.clear_avg_price);
    let grid_total_hold = this.total_retain;
    let grid_total_cost = this.retain_cost;
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    let grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    let grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u7D2F\u79EF",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith("\u8865\u4ED3")) {
        grid_total_hold += Number(this.holding_record[idx][4]);
        grid_total_cost += Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    grid_current_value = Math.floor(grid_total_hold * this.current_price);
    grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u8865\u4ED3",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    grid_current_value = 0;
    grid_empty_income = 0;
    grid_clear_income = 0;
    for (let idx = 2; idx < this.holding_analysis.length; idx++) {
      grid_total_hold += Number(this.holding_analysis[idx][1]);
      grid_total_cost += Number(this.holding_analysis[idx][2]);
      grid_current_value += Number(this.holding_analysis[idx][3]);
      grid_empty_income += Number(this.holding_analysis[idx][7]);
      grid_clear_income += Number(this.holding_analysis[idx][8]);
    }
    this.holding_analysis[1] = [
      "\u603B\u989D",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ];
  }
  CalcHoldingPercent(grid_type, empty_price, clear_avg_price) {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    let grid_total_hold = 0;
    let grid_total_cost = 0;
    let grid_empty_income = 0;
    let grid_clear_income = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith(grid_type)) {
        const grid_hold = Number(this.holding_record[idx][4]);
        const grid_cost = Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
        grid_total_hold += grid_hold;
        grid_total_cost += grid_cost;
        let grid_row = this.FindTradingGridRow(this.holding_record[idx][2]);
        const empty_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * empty_price - grid_cost;
        grid_empty_income += empty_income;
        const clear_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * clear_avg_price - grid_cost;
        grid_clear_income += clear_income;
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    this.holding_analysis.push([
      grid_type,
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
  }
  CalcTradingIncome(title_txt, slump_pct, empty_price, clear_avg_price, clear_price, need_slump = true) {
    let total_cost = this.total_cost;
    let total_count = this.total_hold;
    let empty_cost = this.total_cost;
    let empty_count = this.total_hold;
    let clear_income_max = 0;
    let total_sell_cost = 0;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.trading_table.forEach((row, i) => {
      if (this.trading_table[i][0].startsWith("\u5229\u6DA6")) {
        clear_income_max = clear_income_max + Number(this.trading_table[i][9]);
      } else {
        if (this.buy_grid_record.includes(this.trading_table[i][0])) {
          empty_cost = empty_cost - Number(row[9]);
          empty_count = empty_count - Number(row[8]);
          clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
          total_sell_cost = total_sell_cost + Number(row[9]);
        } else {
          if (i > 0 && ToNumber(row[1]) >= slump_pct && need_slump) {
            total_cost = total_cost + Number(row[5]);
            total_count = total_count + Number(row[4]);
            empty_cost = empty_cost + Number(row[5]) - Number(row[9]);
            empty_count = empty_count + Number(row[4]) - Number(row[8]);
            clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
            total_sell_cost = total_sell_cost + Number(row[9]);
          }
        }
      }
    });
    clear_income_max = Math.floor(clear_income_max - empty_cost);
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6301\u4ED3", total_count, total_cost, this.target_price * slump_pct, total_cost, this.total_cost, 0));
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6E05\u683C", empty_count, empty_cost, empty_price, total_cost, 0, total_sell_cost));
    this.trading_income.push([
      title_txt + "\u6E05\u4ED3",
      "0",
      "0",
      "0",
      "-",
      clear_price.toFixed(precision),
      String(clear_income_max),
      String(total_cost),
      String(total_sell_cost + empty_cost + clear_income_max),
      ToTradingGap(total_cost, total_sell_cost + empty_cost + clear_income_max, 2),
      "-"
    ]);
  }
  GenerateClearRow(grid_name, idx, grid_step_pct, sell_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(grid_step_pct * 100)) ** idx / 100 ** (idx - 1)) / 100;
    const sell_price = FixedPrice(this.target_price, price_step, precision);
    let clear_count = this.clear_sell_record.get(grid_name + String(idx));
    if (clear_count == void 0) {
      clear_count = 0;
    }
    return [
      grid_name + String(idx),
      ToPercent(price_step),
      "",
      "",
      "",
      "",
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count - clear_count),
      String(Math.ceil(sell_price * (sell_count - clear_count))),
      "-",
      "+" + ToPercent(grid_step_pct)
    ];
  }
  GenerateIncomeRow(grid_name, total_count, total_cost, current_price, max_cost, current_cost, sell_value) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const current_value = MyFloor(total_count * current_price, 1);
    const total_income = current_value - total_cost;
    let position = ToPercent(current_cost / max_cost);
    if (current_cost == 0) {
      position = "-";
    }
    return [
      grid_name,
      String(total_count),
      String(total_cost),
      String(current_value),
      (total_cost / Math.max(total_count, 1)).toFixed(precision),
      current_price.toFixed(precision),
      String(total_income),
      String(max_cost),
      String(sell_value + current_value),
      ToTradingGap(max_cost, total_income + max_cost, 2),
      position
    ];
  }
  CalcClearPrice(step_pct, step_idx) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(step_pct * 100)) ** step_idx / 100 ** (step_idx - 1)) / 100;
    return FixedPrice(this.target_price, price_step, precision);
  }
  IsNeedMonitor(table_index, is_sell, current_price, max_rise_pct) {
    if (is_sell) {
      const sell_price = Number(this.trading_table[table_index][7]);
      if (current_price * (1 + max_rise_pct) >= sell_price) {
        return true;
      } else {
        return false;
      }
    } else {
      const buy_price = Number(this.trading_table[table_index][3]);
      if (buy_price < this.target_price * this.grid_settings.MINIMUM_BUY_PCT) {
        return false;
      }
      if (current_price * (1 - max_rise_pct) <= buy_price) {
        return true;
      } else {
        return false;
      }
    }
  }
  IsDisableRow(table_index) {
    const price_pct = ToNumber(this.trading_table[table_index][1]);
    if (price_pct < this.grid_settings.MINIMUM_BUY_PCT) {
      return true;
    } else {
      return false;
    }
  }
  FindTradingGridRow(grid_name) {
    for (let idx = 0; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][0] == grid_name) {
        return this.trading_table[idx];
      }
    }
    return [];
  }
  FindTradingGridRowIndex(grid_name) {
    for (let idx = 0; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][0] == grid_name) {
        return idx;
      }
    }
    return -1;
  }
  SortTradingTable() {
    if (this.trading_table.length <= 1) {
      return;
    }
    this.trading_table.push(["\u505C\u6B62\u7EBF", "0%"]);
    let move_idx = 0;
    let move_row = null;
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][1] == "0%") {
        break;
      }
      if (this.IsDisableRow(idx)) {
        move_idx = idx;
        move_row = this.trading_table[move_idx];
        for (let idx2 = move_idx; idx2 < this.trading_table.length - 1; idx2++) {
          this.trading_table[idx2] = this.trading_table[idx2 + 1];
          if (this.buy_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.buy_monitor_rows[this.buy_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.buy_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.buy_triggered_rows[this.buy_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.sell_monitor_rows[this.sell_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.sell_triggered_rows[this.sell_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
        }
        this.trading_table[this.trading_table.length - 1] = move_row;
        idx--;
      }
    }
  }
};

// src/grid_trading_m1.ts
var GridTradingModeOne = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "One";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const scount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.SGRID_STEP_PCT);
    const mcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.MGRID_STEP_PCT);
    const lcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.LGRID_STEP_PCT);
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    for (let idx = 0; idx <= scount; idx++) {
      this.trading_table[idx + 1] = this.GenerateOneRow(
        SGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.SGRID_STEP_PCT,
        this.grid_settings.SGRID_RETAIN_COUNT,
        this.grid_settings.SGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < scount + 1)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    for (let idx = 1; idx <= mcount; idx++) {
      this.trading_table[scount + 1 + idx] = this.GenerateOneRow(
        MGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.MGRID_STEP_PCT,
        this.grid_settings.MGRID_RETAIN_COUNT,
        this.grid_settings.MGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + idx);
        this.sell_triggered_rows.push(scount + 1 + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + idx)) {
        this.disable_rows.push(scount + 1 + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    for (let idx = 1; idx <= lcount; idx++) {
      this.trading_table[scount + 1 + mcount + idx] = this.GenerateOneRow(
        LGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.LGRID_STEP_PCT,
        this.grid_settings.LGRID_RETAIN_COUNT,
        this.grid_settings.LGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + mcount + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + mcount + idx);
        this.sell_triggered_rows.push(scount + 1 + mcount + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + mcount, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + mcount + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + mcount + idx)) {
        this.disable_rows.push(scount + 1 + mcount + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1 + mcount) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, grid_step_pct, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price_step = 100 - idx * Math.floor(grid_step_pct * 100);
    const buy_price = FixedPrice(this.target_price, buy_price_step / 100, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price_step = buy_price_step + Math.floor(grid_step_pct * 100);
    const sell_price = FixedPrice(this.target_price, sell_price_step / 100, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercentStr(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m2.ts
var GridTradingModeTwo = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Two";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const count = Math.floor(Math.log(1 - this.grid_settings.MAX_SLUMP_PCT) / Math.log(1 - this.grid_settings.LGRID_STEP_PCT)) + 1;
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let idx = 0;
    let max_slump_pct = Math.round((1 - this.grid_settings.MAX_SLUMP_PCT) * 100);
    let sell_price_step = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let i = 0; i < count; i++) {
      let ti = 1;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = first_step;
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[idx + 1] = this.GenerateOneRow(
          SGRID_TYPE_NAME_STR,
          idx,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.SGRID_RETAIN_COUNT,
          this.grid_settings.SGRID_ADD_PCT
        );
        if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
          this.buy_triggered_rows.push(idx + 1);
          this.sell_triggered_rows.push(idx + 1);
        }
        if (this.IsDisableRow(idx + 1)) {
          this.disable_rows.push(idx + 1);
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.SGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.trading_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.trading_table.length;
    idx = 0;
    sell_price_step = 1;
    for (let i = 0; i < count; i++) {
      let ti = 2;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = Math.round(first_step * (1 - this.grid_settings.MGRID_STEP_PCT));
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          MGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.MGRID_RETAIN_COUNT,
          this.grid_settings.MGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.MGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.trading_table.length;
    idx = 0;
    for (let i = 0; i < count; i++) {
      sell_price_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i)) / 100;
      const step_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      if (step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          LGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.LGRID_RETAIN_COUNT,
          this.grid_settings.LGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, buy_price_step, sell_price_step, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, buy_price_step, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, sell_price_step, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercent(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m3.ts
var GridTradingModeThree = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Three";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let grid_sell_pct = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let idx = 0; idx < this.sgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.sgrid_step_table[idx][1]);
      this.trading_table[idx + 1] = this.GenerateOneRow(
        this.sgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.sgrid_step_table[idx][2]),
        Number(this.sgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.sgrid_step_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.sgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.MGRID_STEP_PCT;
    for (let idx = 0; idx < this.mgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.mgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.mgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.mgrid_step_table[idx][2]),
        Number(this.mgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.sgrid_step_table.length + this.mgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.LGRID_STEP_PCT;
    for (let idx = 0; idx < this.lgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.lgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.lgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.lgrid_step_table[idx][2]),
        Number(this.lgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, grid_buy_pct, grid_sell_pct, grid_add_pct, grid_retain_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, grid_buy_pct, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, grid_sell_pct, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name,
      ToPercent(grid_buy_pct),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/plugin_env.ts
var FETCH_CURRENT_PRICE = "fetch_current_price";
var PluginEnv = class {
  constructor() {
    this.is_settings_changed = false;
    this.base_settings = new PluginBaseSettings();
    this.grid_settings = new GridTradingSettings();
    this.grid_trading_dict = /* @__PURE__ */ new Map();
    this.stock_remote_price_dict = /* @__PURE__ */ new Map();
    this.event_callback_dict = /* @__PURE__ */ new Map();
    this._event_guid = 0;
  }
  GetAPILisence() {
    return this.base_settings.DATA_API_LICENCE;
  }
  GetStockRemotePrice(stock_no) {
    const price = this.stock_remote_price_dict.get(stock_no);
    if (price != void 0) {
      return price;
    } else {
      return -1;
    }
  }
  GetGridTradingTypeByString(mode) {
    if (mode == "mode_two") {
      return GridTradingModeTwo;
    }
    if (mode == "mode_three") {
      return GridTradingModeThree;
    }
    return GridTradingModeOne;
  }
  GetAndGenGridTrading(grid_name, mode) {
    let grid_trading = this.grid_trading_dict.get(grid_name);
    const trading_mode = this.GetGridTradingTypeByString(mode);
    if (grid_trading instanceof trading_mode) {
      return grid_trading;
    }
    grid_trading = new trading_mode(this);
    this.grid_trading_dict.set(grid_name, grid_trading);
    return grid_trading;
  }
  UnserializedSettings(data) {
    const lines = data.split("\n");
    if (lines.length <= 0) {
      return;
    }
    UnpackSettings(this.base_settings, lines);
    UnpackSettings(this.grid_settings, lines);
  }
  SerializedSettings() {
    return PackSettings(this.base_settings) + PackSettings(this.grid_settings);
  }
  PublishEvent(event_name) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      return;
    }
    for (let [guid, event_cb] of cb_dict) {
      try {
        event_cb();
      } catch (e) {
        ;
      }
    }
  }
  SubscribeEvent(event_name, event_cb) {
    const guid = this.GenGUID();
    let cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      cb_dict = /* @__PURE__ */ new Map();
      this.event_callback_dict.set(event_name, cb_dict);
    }
    cb_dict.set(guid, event_cb);
    return guid;
  }
  UnsubscribeEvent(event_name, event_guid) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0 || !cb_dict.has(event_guid)) {
      return false;
    }
    return cb_dict.delete(event_guid);
  }
  GenGUID() {
    this._event_guid++;
    return this._event_guid;
  }
};

// src/command_util.ts
var GridCommand = class {
  constructor() {
    this.command = "none";
    this.command_type = "grid";
  }
};
function ExcuteGridCommand(cmd_str) {
  const strs = cmd_str.split(" ");
  const command = new GridCommand();
  command.command = strs[0];
  command.raw_command_text = cmd_str;
  if (command.command == "add_record") {
    command.command_param1 = strs[1];
    AddGridRecord(command);
  }
  if (command.command == "del_record") {
    command.command_param1 = strs[1];
    DelGridRecord(command);
  }
  return command;
}
function AddGridRecord(command) {
  const sub_strs = command.command_param1.split(",");
  if (sub_strs.length != 5) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (sub_strs[0] != "BUY" && sub_strs[0] != "SELL" && sub_strs[0] != "SHARE") {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (!sub_strs[2].startsWith("\u5C0F\u7F51") && !sub_strs[2].startsWith("\u4E2D\u7F51") && !sub_strs[2].startsWith("\u5927\u7F51") && !sub_strs[2].startsWith("\u7EA2\u5229") && !sub_strs[2].startsWith("\u5229\u6DA6")) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  command.error_code = 0;
  command.data_result_str = "\n" + command.command_param1;
  return true;
}
function DelGridRecord(command) {
  if (IsNumeric(command.command_param1)) {
    command.error_code = 0;
    command.data_result_num = Number(command.command_param1);
  } else {
    command.error_code = -1;
    command.error_msg = "invalid param";
  }
}

// src/grid_view.ts
var VIEW_TYPE_GTV = "gtv-view";
var GTVView = class extends import_obsidian2.TextFileView {
  constructor(leaf, plugin_env) {
    super(leaf);
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.view_guid = plugin_env.GenGUID();
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTV;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.command_btn_el = div.createEl("button");
    this.command_btn_el.setText("Excute");
    this.command_btn_el.onClickEvent((ev) => {
      this.OnClickAddRecordBtn(ev, this.command_input_el);
    });
    this.command_input_el = div.createEl("input");
    this.command_input_el.empty();
    this.command_input_el.size = 70;
    this.command_input_el.placeholder = "Input your command";
    div = this.contentEl.createEl("div");
    this.stock_tile_el = div.createEl("h1");
    this.stock_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.param_title_el = div.createEl("h1");
    this.param_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.trading_title_el = div.createEl("h1");
    this.trading_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.analysis_title_el = div.createEl("h1");
    this.analysis_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.record_title_el = div.createEl("h1");
    this.record_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.adjust_title_el = div.createEl("h1");
    this.adjust_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  OnClickAddRecordBtn(ev, input_el) {
    try {
      const text = input_el.value;
      const grid_cmd = ExcuteGridCommand(text);
      if (grid_cmd.error_code == 0) {
        if (grid_cmd.command == "add_record") {
          this.data = this.data + grid_cmd.data_result_str;
          this.setViewData(this.data, false);
        }
        if (grid_cmd.command == "del_record") {
          const lines = this.data.split("\n");
          let count = 0;
          let index = 0;
          for (index = 0; index < lines.length; index++) {
            if (lines[index].startsWith("BUY,") || lines[index].startsWith("SELL,")) {
              count++;
            }
            if (count == grid_cmd.data_result_num) {
              break;
            }
          }
          if (index < lines.length) {
            lines.splice(index, 1);
          }
          this.data = lines.join("\n");
          this.setViewData(this.data, false);
        }
      }
    } catch (e) {
      DebugLog("Command has error ", e);
    }
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.stock_tile_el.setText("\u672A\u77E5\u6807\u7684");
    this.stock_table_el.empty();
    this.param_title_el.setText("\u7F51\u683C\u53C2\u6570");
    this.param_table_el.empty();
    this.trading_title_el.setText("\u4EA4\u6613\u7F51\u683C");
    this.trading_table_el.empty();
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.income_title_el.setText("\u6536\u76CA\u5206\u6790");
    this.income_table_el.empty();
    this.analysis_title_el.setText("\u56DE\u64A4\u5206\u6790");
    this.analysis_table_el.empty();
    this.record_title_el.setText("\u4EA4\u6613\u8BB0\u5F55");
    this.record_table_el.empty();
    this.adjust_title_el.setText("\u8C03\u6574\u8BB0\u5F55");
    this.adjust_table_el.empty();
    if (this.file != null) {
      const mode_str = this.data.split("\n")[0].split(",")[0];
      const grid_trading = this.plugin_env.GetAndGenGridTrading(this.file.name, mode_str);
      grid_trading.InitGridTrading(this.data);
      this.stock_tile_el.setText(grid_trading.stock_name);
      this.DisplayTable(grid_trading, this.stock_table_el, grid_trading.stock_table, false);
      this.DisplayTable(grid_trading, this.param_table_el, grid_trading.param_table, false);
      this.DisplayTable(grid_trading, this.trading_table_el, grid_trading.trading_table, true);
      this.DisplayTable(grid_trading, this.holding_table_el, grid_trading.holding_analysis, false);
      this.DisplayTable(grid_trading, this.income_table_el, grid_trading.trading_income, false);
      this.DisplayTable(grid_trading, this.analysis_table_el, grid_trading.trading_analysis, false);
      this.DisplayTable(grid_trading, this.record_table_el, grid_trading.trading_record, false);
      this.DisplayTable(grid_trading, this.adjust_table_el, grid_trading.adjust_record, false);
    }
  }
  DisplayTable(grid_trading, table_el, table, is_color) {
    try {
      const table_body = table_el.createEl("tbody");
      table.forEach((row, i) => {
        const table_row = table_body.createEl("tr");
        row.forEach((cell, j) => {
          const table_cell = table_row.createEl("td", { text: cell, attr: { "align": "right" } });
          if (is_color && i > 0) {
            if (j <= 5) {
              if (grid_trading.buy_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_TRIGGERED);
              }
              if (grid_trading.buy_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_MONITOR);
              }
            } else {
              if (grid_trading.sell_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_TRIGGERED);
              }
              if (grid_trading.sell_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_MONITOR);
              }
            }
          }
        });
      });
    } catch (error) {
      DebugLog("DisplayTable error: ", error);
    }
  }
};

// src/grid_overview.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_GTO = "gto-view";
var GTOView = class extends import_obsidian3.TextFileView {
  constructor(leaf, vault, plugin_env) {
    super(leaf);
    this.vault = vault;
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.debug_log = [];
    this.stock_overview = [];
    this.custom_stock_overview = [];
    this.income_overview = [];
    this.holding_overview = [];
  }
  ReadCustomStock() {
    this.holding_overview = [["\u7B79\u7801\u7C7B\u578B", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]];
    this.holding_overview.push(["\u603B\u989D", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5C0F\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u4E2D\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5927\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u7D2F\u79EF", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u8865\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview = [["", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]];
    this.income_overview.push(["\u7D2F\u79EF\u7B79\u7801", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u4ED3", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    let stock_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u9996\u7F51\u76EE\u6807\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u4EF7\u683C\u767E\u5206\u4F4D", "\u6301\u4ED3\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u76C8\u4E8F\u6BD4\u7387", "\u56DE\u8C03\u4ED3\u4F4D"]];
    let buy_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let sell_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let passive_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u5F53\u524D\u8DCC\u5E45", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u6DA8\u5E45"]];
    let active_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EA4\u6613\u65E5\u671F", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u6536\u76CA", "\u5356\u51FA\u4EFD\u6570", "\u7D2F\u79EF\u7B79\u7801"]];
    const grid_folder = this.vault.getAbstractFileByPath("GridTrading");
    let grid_file_names = [];
    if (grid_folder instanceof import_obsidian3.TFolder) {
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian3.TFile && grid_file.name.endsWith(".gtv")) {
          grid_file_names.push(grid_file.name);
        }
      }
    }
    grid_file_names.sort();
    this.active_stock_count = 0;
    this.clear_stock_count = 0;
    for (let idx = 0; idx < grid_file_names.length; idx++) {
      const grid_trading = this.plugin_env.grid_trading_dict.get(grid_file_names[idx]);
      if (grid_trading instanceof GridTrading && grid_trading.IsStock() && !grid_trading.is_debug) {
        grid_trading.InitTradingOverview();
        if (grid_trading.IsMonitor()) {
          this.active_stock_count++;
        }
        if (grid_trading.is_clear) {
          this.clear_stock_count++;
        }
        stock_table.push(grid_trading.stock_overview);
        buy_table = buy_table.concat(grid_trading.stock_buy_overview);
        sell_table = sell_table.concat(grid_trading.stock_sell_overview);
        passive_table = passive_table.concat(grid_trading.stock_passive_filled_record);
        active_table = active_table.concat(grid_trading.stock_active_filled_record);
        const trading_income = grid_trading.trading_income;
        for (let idx2 = 1; idx2 <= 10; idx2++) {
          this.income_overview[idx2][1] = StringPlus(this.income_overview[idx2][1], trading_income[idx2][2], 1);
          this.income_overview[idx2][2] = StringPlus(this.income_overview[idx2][2], trading_income[idx2][3], 1);
          this.income_overview[idx2][3] = StringPlus(this.income_overview[idx2][3], trading_income[idx2][6], 1);
          this.income_overview[idx2][4] = StringPlus(this.income_overview[idx2][4], trading_income[idx2][7], 1);
          this.income_overview[idx2][5] = StringPlus(this.income_overview[idx2][5], trading_income[idx2][8], 1);
        }
        const trading_holding = grid_trading.holding_analysis;
        for (let idx2 = 1; idx2 <= 6; idx2++) {
          this.holding_overview[idx2][1] = StringPlus(this.holding_overview[idx2][1], trading_holding[idx2][2], 1);
          this.holding_overview[idx2][2] = StringPlus(this.holding_overview[idx2][2], trading_holding[idx2][3], 1);
          this.holding_overview[idx2][3] = StringPlus(this.holding_overview[idx2][3], trading_holding[idx2][6], 1);
          this.holding_overview[idx2][4] = StringPlus(this.holding_overview[idx2][4], trading_holding[idx2][7], 1);
          this.holding_overview[idx2][5] = StringPlus(this.holding_overview[idx2][5], trading_holding[idx2][8], 1);
        }
      }
    }
    let current_cost = Number(this.income_overview[2][1]);
    let current_hold = Number(this.income_overview[2][2]);
    for (let idx = 1; idx <= 10; idx++) {
      this.income_overview[idx][6] = ToPercent(Number(this.income_overview[idx][3]) / Number(this.income_overview[idx][4]), 2);
      if (this.income_overview[idx][7] != "-") {
        this.income_overview[idx][7] = ToPercent(current_cost / Number(this.income_overview[idx][4]));
      }
    }
    for (let idx = 1; idx <= 6; idx++) {
      this.holding_overview[idx][6] = ProportionPctStr(Number(this.holding_overview[idx][2]), current_hold, 2);
      this.holding_overview[idx][7] = ProportionPctStr(Number(this.holding_overview[idx][1]), current_cost, 2);
    }
    this.custom_stock_overview = [...stock_table, ...buy_table, ...sell_table];
    this.stock_filled_overview = [...passive_table, ...active_table];
  }
  SumupAllStock() {
    this.stock_overview = [
      ["\u6807\u7684\u603B\u6570", "", "\u6301\u4ED3\u6807\u7684", String(this.active_stock_count), "\u5F85\u5F00\u683C\u6570", String(this.clear_stock_count)],
      ["\u4E70\u5165\u76D1\u63A7", ""],
      ["\u5356\u51FA\u76D1\u63A7", ""],
      ["", "\u4E70\u5165\u603B\u989D", "-5%\u4E70\u5165\u603B\u989D", "-3%\u4E70\u5165\u603B\u989D", "+3%\u5356\u51FA\u603B\u989D", "+5%\u5356\u51FA\u603B\u989D", "\u5356\u51FA\u603B\u989D"],
      ["\u5168\u90E8", "0", "0", "0", "0", "0", "0"],
      ["\u5C0F\u7F51", "0", "0", "0", "0", "0", "0"],
      ["\u4E2D\u7F51", "0", "0", "0", "0", "0", "0"],
      ["\u5927\u7F51", "0", "0", "0", "0", "0", "0"]
    ];
    let stock_count = 0;
    let buy_monitor_count = 0;
    let sell_monitor_count = 0;
    for (let idx = 0; idx < this.custom_stock_overview.length; idx++) {
      const stock = this.custom_stock_overview[idx];
      if (stock[0] == GRID_COLOR_STOCK_OVERVIEW) {
        stock_count++;
      }
      if (stock[0] == GRID_COLOR_BUY_OVERVIEW) {
        buy_monitor_count++;
        this.stock_overview[4][1] = StringPlus(this.stock_overview[4][1], stock[8], 1);
        if (stock[3].startsWith("\u5C0F\u7F51")) {
          this.stock_overview[5][1] = StringPlus(this.stock_overview[5][1], stock[8], 1);
        }
        if (stock[3].startsWith("\u4E2D\u7F51")) {
          this.stock_overview[6][1] = StringPlus(this.stock_overview[6][1], stock[8], 1);
        }
        if (stock[3].startsWith("\u5927\u7F51")) {
          this.stock_overview[7][1] = StringPlus(this.stock_overview[7][1], stock[8], 1);
        }
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap > -3) {
          this.stock_overview[4][3] = StringPlus(this.stock_overview[4][3], stock[8], 1);
          if (stock[3].startsWith("\u5C0F\u7F51")) {
            this.stock_overview[5][3] = StringPlus(this.stock_overview[5][3], stock[8], 1);
          }
          if (stock[3].startsWith("\u4E2D\u7F51")) {
            this.stock_overview[6][3] = StringPlus(this.stock_overview[6][3], stock[8], 1);
          }
          if (stock[3].startsWith("\u5927\u7F51")) {
            this.stock_overview[7][3] = StringPlus(this.stock_overview[7][3], stock[8], 1);
          }
        }
        if (trading_gap > -5) {
          this.stock_overview[4][2] = StringPlus(this.stock_overview[4][2], stock[8], 1);
          if (stock[3].startsWith("\u5C0F\u7F51")) {
            this.stock_overview[5][2] = StringPlus(this.stock_overview[5][2], stock[8], 1);
          }
          if (stock[3].startsWith("\u4E2D\u7F51")) {
            this.stock_overview[6][2] = StringPlus(this.stock_overview[6][2], stock[8], 10);
          }
          if (stock[3].startsWith("\u5927\u7F51")) {
            this.stock_overview[7][2] = StringPlus(this.stock_overview[7][2], stock[8], 1);
          }
        }
      }
      if (stock[0] == GRID_COLOR_SELL_OVERVIEW) {
        sell_monitor_count++;
        this.stock_overview[4][6] = StringPlus(this.stock_overview[4][6], stock[8], 1);
        if (stock[3].startsWith("\u5C0F\u7F51")) {
          this.stock_overview[5][6] = StringPlus(this.stock_overview[5][6], stock[8], 1);
        }
        if (stock[3].startsWith("\u4E2D\u7F51")) {
          this.stock_overview[6][6] = StringPlus(this.stock_overview[6][6], stock[8], 1);
        }
        if (stock[3].startsWith("\u5927\u7F51")) {
          this.stock_overview[7][6] = StringPlus(this.stock_overview[7][6], stock[8], 1);
        }
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap < 3) {
          this.stock_overview[4][4] = StringPlus(this.stock_overview[4][4], stock[8], 1);
          if (stock[3].startsWith("\u5C0F\u7F51")) {
            this.stock_overview[5][4] = StringPlus(this.stock_overview[5][4], stock[8], 1);
          }
          if (stock[3].startsWith("\u4E2D\u7F51")) {
            this.stock_overview[6][4] = StringPlus(this.stock_overview[6][4], stock[8], 1);
          }
          if (stock[3].startsWith("\u5927\u7F51")) {
            this.stock_overview[7][4] = StringPlus(this.stock_overview[7][4], stock[8], 1);
          }
        }
        if (trading_gap < 5) {
          this.stock_overview[4][5] = StringPlus(this.stock_overview[4][5], stock[8], 1);
          if (stock[3].startsWith("\u5C0F\u7F51")) {
            this.stock_overview[5][5] = StringPlus(this.stock_overview[5][5], stock[8], 1);
          }
          if (stock[3].startsWith("\u4E2D\u7F51")) {
            this.stock_overview[6][5] = StringPlus(this.stock_overview[6][5], stock[8], 1);
          }
          if (stock[3].startsWith("\u5927\u7F51")) {
            this.stock_overview[7][5] = StringPlus(this.stock_overview[7][5], stock[8], 1);
          }
        }
      }
    }
    this.stock_overview[0][1] = String(stock_count);
    this.stock_overview[1][1] = String(buy_monitor_count);
    this.stock_overview[2][1] = String(sell_monitor_count);
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTO;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.overview_title_el = div.createEl("h1");
    this.overview_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.custom_title_el = div.createEl("h1");
    this.custom_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.filled_tile_el = div.createEl("h1");
    this.filled_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.ReadCustomStock();
    this.SumupAllStock();
    this.overview_title_el.setText("\u7F51\u683C\u603B\u89C8");
    this.overview_table_el.empty();
    this.DisplayTable(this.overview_table_el, this.stock_overview, false);
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.DisplayTable(this.holding_table_el, this.holding_overview, false);
    this.income_title_el.setText("\u76C8\u4E8F\u603B\u89C8");
    this.income_table_el.empty();
    this.DisplayTable(this.income_table_el, this.income_overview, false);
    this.custom_title_el.setText("\u6211\u7684\u7F51\u683C");
    this.custom_table_el.empty();
    this.DisplayTable(this.custom_table_el, this.custom_stock_overview, true);
    this.filled_tile_el.setText("\u8865\u4ED3\u4FE1\u606F");
    this.filled_table_el.empty();
    this.DisplayTable(this.filled_table_el, this.stock_filled_overview, true);
  }
  DisplayTable(table_el, table, is_color) {
    const table_body = table_el.createEl("tbody");
    table.forEach((row, i) => {
      const table_row = table_body.createEl("tr");
      row.forEach((cell, j) => {
        if (is_color) {
          if (j > 0) {
            table_row.createEl("td", { text: cell, attr: { "bgColor": table[i][0], "align": "right" } });
          }
        } else {
          table_row.createEl("td", { text: cell, attr: { "align": "right" } });
        }
      });
    });
  }
};

// src/cor_view.ts
var import_obsidian4 = require("obsidian");
var VIEW_TYPE_COR = "cor-view";
var CorView = class extends import_obsidian4.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_COR;
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.data_el = div.createEl("h1");
  }
  async onClose() {
    this.contentEl.empty();
  }
  Refresh() {
    this.data_el.setText(this.data);
  }
};

// src/main.ts
var TradingStrategy = class extends import_obsidian5.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.plugin_env = new PluginEnv();
    this.interval_callback_id = -1;
  }
  async onload() {
    await this.LoadSettingsFromDisk();
    const ribbonIconEl = this.addRibbonIcon("dice", "GridTrading", (evt) => {
      this.FetchAllStockCurrentPrice();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new TradingStrategySettingTab(this.app, this, this.plugin_env));
    this.interval_callback_id = window.setInterval(() => this.FetchAllStockCurrentPrice(), 1 * 1e3);
    this.registerInterval(this.interval_callback_id);
    this.registerView(VIEW_TYPE_GTV, (leaf) => {
      const gtv_view = new GTVView(leaf, this.plugin_env);
      return gtv_view;
    });
    this.registerView(VIEW_TYPE_GTO, (leaf) => {
      const gto_view = new GTOView(leaf, this.app.vault, this.plugin_env);
      return gto_view;
    });
    this.registerView(VIEW_TYPE_COR, (leaf) => {
      const cor_view = new CorView(leaf);
      return cor_view;
    });
    this.registerExtensions(["gtv"], VIEW_TYPE_GTV);
    this.registerExtensions(["gto"], VIEW_TYPE_GTO);
    this.registerExtensions(["cor"], VIEW_TYPE_COR);
  }
  onunload() {
  }
  async LoadSettingsFromDisk() {
    const setting_data = await this.loadData();
    if (setting_data != null) {
      this.plugin_env.UnserializedSettings(setting_data);
    }
  }
  SaveSettingsToDisk() {
    DebugLog("MAX_SLUMP_PCT1 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    const setting_data = this.plugin_env.SerializedSettings();
    DebugLog("MAX_SLUMP_PCT2 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    DebugLog(setting_data);
    this.saveData(setting_data);
  }
  async FetchAllStockCurrentPrice() {
    const api_licence = this.plugin_env.GetAPILisence();
    const grid_folder = this.app.vault.getAbstractFileByPath("GridTrading");
    let price_cache = /* @__PURE__ */ new Map();
    if (grid_folder instanceof import_obsidian5.TFolder) {
      if (this.interval_callback_id > 0) {
        window.clearInterval(this.interval_callback_id);
        this.interval_callback_id = -1;
      }
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gto")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const lines = content.split("\n");
          for (let idx = 0; idx < lines.length; idx++) {
            const strs = lines[idx].split(",");
            if (strs[0] == "PRICE") {
              price_cache.set(strs[1], Number(strs[3]));
            }
          }
        }
      }
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gtv")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const mode_str = content.split("\n")[0].split(",")[0];
          let grid_trading = this.plugin_env.GetAndGenGridTrading(grid_file.name, mode_str);
          grid_trading.InitGridTrading(content);
          if (grid_trading.is_debug) {
            continue;
          }
          let current_price = price_cache.get(grid_trading.market_code + String(grid_trading.target_stock));
          if (current_price) {
            this.plugin_env.stock_remote_price_dict.set(String(grid_trading.target_stock), current_price);
            grid_trading.UpdateRemotePrice(current_price);
          }
        }
      }
      this.plugin_env.PublishEvent(FETCH_CURRENT_PRICE);
    }
  }
};
var TradingStrategySettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin, plugin_env) {
    super(app, plugin);
    this.plugin = plugin;
    this.plugin_env = plugin_env;
  }
  hide() {
    if (this.plugin_env.is_settings_changed) {
      this.plugin.SaveSettingsToDisk();
      this.plugin_env.is_settings_changed = false;
    }
    super.hide();
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h1").setText("TradingStrategy");
    const base_div = this.containerEl.createEl("div");
    base_div.createEl("h2").setText("\u57FA\u7840\u914D\u7F6E");
    let bkey;
    for (bkey in this.plugin_env.base_settings) {
      const key_name = SETTING_NAME.get(bkey);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(base_div).setName(key_name);
        setting.addText((text_comp, setting_key = bkey) => {
          text_comp.setValue(String(GetSettingValue(this.plugin_env.base_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.base_settings, setting_key, value);
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
    const grid_div = this.containerEl.createEl("div");
    grid_div.createEl("h2").setText("\u7F51\u683C\u914D\u7F6E");
    let key;
    for (key in this.plugin_env.grid_settings) {
      const key_name = SETTING_NAME.get(key);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(grid_div).setName(key_name);
        setting.addText((text_comp, setting_key = key) => {
          DebugLog("add Setting Key: ", setting_key);
          text_comp.setValue(String(GetSettingValue(this.plugin_env.grid_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.grid_settings, setting_key, Number(value));
            DebugLog("SetValue succeed ", setting_key, GetSettingValue(this.plugin_env.grid_settings, setting_key));
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
