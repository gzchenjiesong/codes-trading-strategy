/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/ts-md5/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/ts-md5/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Md5 = void 0;
    var Md52 = (
      /** @class */
      function() {
        function Md53() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state = new Int32Array(4);
          this._buffer = new ArrayBuffer(68);
          this._buffer8 = new Uint8Array(this._buffer, 0, 68);
          this._buffer32 = new Uint32Array(this._buffer, 0, 17);
          this.start();
        }
        Md53.hashStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendStr(str).end(raw);
        };
        Md53.hashAsciiStr = function(str, raw) {
          if (raw === void 0) {
            raw = false;
          }
          return this.onePassHasher.start().appendAsciiStr(str).end(raw);
        };
        Md53._hex = function(x) {
          var hc = Md53.hexChars;
          var ho = Md53.hexOut;
          var n;
          var offset;
          var j;
          var i;
          for (i = 0; i < 4; i += 1) {
            offset = i * 8;
            n = x[i];
            for (j = 0; j < 8; j += 2) {
              ho[offset + 1 + j] = hc.charAt(n & 15);
              n >>>= 4;
              ho[offset + 0 + j] = hc.charAt(n & 15);
              n >>>= 4;
            }
          }
          return ho.join("");
        };
        Md53._md5cycle = function(x, k) {
          var a = x[0];
          var b = x[1];
          var c = x[2];
          var d = x[3];
          a += (b & c | ~b & d) + k[0] - 680876936 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[1] - 389564586 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[2] + 606105819 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[4] - 176418897 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[7] - 45705983 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[10] - 42063 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
          a = (a << 7 | a >>> 25) + b | 0;
          d += (a & b | ~a & c) + k[13] - 40341101 | 0;
          d = (d << 12 | d >>> 20) + a | 0;
          c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
          c = (c << 17 | c >>> 15) + d | 0;
          b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
          b = (b << 22 | b >>> 10) + c | 0;
          a += (b & d | c & ~d) + k[1] - 165796510 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[11] + 643717713 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[0] - 373897302 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[5] - 701558691 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[10] + 38016083 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[15] - 660478335 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[4] - 405537848 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[9] + 568446438 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[3] - 187363961 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
          a = (a << 5 | a >>> 27) + b | 0;
          d += (a & c | b & ~c) + k[2] - 51403784 | 0;
          d = (d << 9 | d >>> 23) + a | 0;
          c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
          c = (c << 14 | c >>> 18) + d | 0;
          b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
          b = (b << 20 | b >>> 12) + c | 0;
          a += (b ^ c ^ d) + k[5] - 378558 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[14] - 35309556 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[7] - 155497632 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[13] + 681279174 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[0] - 358537222 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[3] - 722521979 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[6] + 76029189 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (b ^ c ^ d) + k[9] - 640364487 | 0;
          a = (a << 4 | a >>> 28) + b | 0;
          d += (a ^ b ^ c) + k[12] - 421815835 | 0;
          d = (d << 11 | d >>> 21) + a | 0;
          c += (d ^ a ^ b) + k[15] + 530742520 | 0;
          c = (c << 16 | c >>> 16) + d | 0;
          b += (c ^ d ^ a) + k[2] - 995338651 | 0;
          b = (b << 23 | b >>> 9) + c | 0;
          a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
          a = (a << 6 | a >>> 26) + b | 0;
          d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
          d = (d << 10 | d >>> 22) + a | 0;
          c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
          c = (c << 15 | c >>> 17) + d | 0;
          b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
          b = (b << 21 | b >>> 11) + c | 0;
          x[0] = a + x[0] | 0;
          x[1] = b + x[1] | 0;
          x[2] = c + x[2] | 0;
          x[3] = d + x[3] | 0;
        };
        Md53.prototype.start = function() {
          this._dataLength = 0;
          this._bufferLength = 0;
          this._state.set(Md53.stateIdentity);
          return this;
        };
        Md53.prototype.appendStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var code;
          var i;
          for (i = 0; i < str.length; i += 1) {
            code = str.charCodeAt(i);
            if (code < 128) {
              buf8[bufLen++] = code;
            } else if (code < 2048) {
              buf8[bufLen++] = (code >>> 6) + 192;
              buf8[bufLen++] = code & 63 | 128;
            } else if (code < 55296 || code > 56319) {
              buf8[bufLen++] = (code >>> 12) + 224;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            } else {
              code = (code - 55296) * 1024 + (str.charCodeAt(++i) - 56320) + 65536;
              if (code > 1114111) {
                throw new Error("Unicode standard supports code points up to U+10FFFF");
              }
              buf8[bufLen++] = (code >>> 18) + 240;
              buf8[bufLen++] = code >>> 12 & 63 | 128;
              buf8[bufLen++] = code >>> 6 & 63 | 128;
              buf8[bufLen++] = code & 63 | 128;
            }
            if (bufLen >= 64) {
              this._dataLength += 64;
              Md53._md5cycle(this._state, buf32);
              bufLen -= 64;
              buf32[0] = buf32[16];
            }
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendAsciiStr = function(str) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(str.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = str.charCodeAt(j++);
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.appendByteArray = function(input) {
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var bufLen = this._bufferLength;
          var i;
          var j = 0;
          for (; ; ) {
            i = Math.min(input.length - j, 64 - bufLen);
            while (i--) {
              buf8[bufLen++] = input[j++];
            }
            if (bufLen < 64) {
              break;
            }
            this._dataLength += 64;
            Md53._md5cycle(this._state, buf32);
            bufLen = 0;
          }
          this._bufferLength = bufLen;
          return this;
        };
        Md53.prototype.getState = function() {
          var s = this._state;
          return {
            buffer: String.fromCharCode.apply(null, Array.from(this._buffer8)),
            buflen: this._bufferLength,
            length: this._dataLength,
            state: [s[0], s[1], s[2], s[3]]
          };
        };
        Md53.prototype.setState = function(state) {
          var buf = state.buffer;
          var x = state.state;
          var s = this._state;
          var i;
          this._dataLength = state.length;
          this._bufferLength = state.buflen;
          s[0] = x[0];
          s[1] = x[1];
          s[2] = x[2];
          s[3] = x[3];
          for (i = 0; i < buf.length; i += 1) {
            this._buffer8[i] = buf.charCodeAt(i);
          }
        };
        Md53.prototype.end = function(raw) {
          if (raw === void 0) {
            raw = false;
          }
          var bufLen = this._bufferLength;
          var buf8 = this._buffer8;
          var buf32 = this._buffer32;
          var i = (bufLen >> 2) + 1;
          this._dataLength += bufLen;
          var dataBitsLen = this._dataLength * 8;
          buf8[bufLen] = 128;
          buf8[bufLen + 1] = buf8[bufLen + 2] = buf8[bufLen + 3] = 0;
          buf32.set(Md53.buffer32Identity.subarray(i), i);
          if (bufLen > 55) {
            Md53._md5cycle(this._state, buf32);
            buf32.set(Md53.buffer32Identity);
          }
          if (dataBitsLen <= 4294967295) {
            buf32[14] = dataBitsLen;
          } else {
            var matches = dataBitsLen.toString(16).match(/(.*?)(.{0,8})$/);
            if (matches === null) {
              return;
            }
            var lo = parseInt(matches[2], 16);
            var hi = parseInt(matches[1], 16) || 0;
            buf32[14] = lo;
            buf32[15] = hi;
          }
          Md53._md5cycle(this._state, buf32);
          return raw ? this._state : Md53._hex(this._state);
        };
        Md53.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]);
        Md53.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        Md53.hexChars = "0123456789abcdef";
        Md53.hexOut = [];
        Md53.onePassHasher = new Md53();
        return Md53;
      }()
    );
    exports.Md5 = Md52;
    if (Md52.hashStr("hello") !== "5d41402abc4b2a76b9719d911017c592") {
      throw new Error("Md5 self test failed.");
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TradingStrategy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/lang_str.ts
var SETTING_NAME = /* @__PURE__ */ new Map([
  ["ONE_GRID_LIMIT", "\u9996\u7F51\u4E0A\u9650\u503C"],
  ["MAX_SLUMP_PCT", "\u6700\u5927\u56DE\u64A4\u503C"],
  ["TRIGGER_ADD_POINT", "\u89E6\u53D1\u4EF7\u52A0\u70B9"],
  ["TRADING_PRICE_PRECISION", "\u4EA4\u6613\u4EF7\u7CBE\u5EA6"],
  ["MIN_BATCH_COUNT", "\u5355\u624B\u4EFD\u6570\u989D"],
  ["MAX_RISE_PCT", "\u5355\u65E5\u6700\u5927\u6DA8\u5E45"],
  ["SGRID_STEP_PCT", "\u5C0F\u7F51\u6B65\u8FDB\u503C"],
  ["SGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["SGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["MGRID_STEP_PCT", "\u4E2D\u7F51\u6B65\u8FDB\u503C"],
  ["MGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["MGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["LGRID_STEP_PCT", "\u5927\u7F51\u6B65\u8FDB\u503C"],
  ["LGRID_RETAIN_COUNT", "\u4FDD\u7559\u5229\u6DA6\u6570"],
  ["LGRID_ADD_PCT", "\u6BCF\u7F51\u8FFD\u52A0"],
  ["DATA_API_LICENCE", "\u6570\u636E\u63A5\u53E3\u8BC1\u4E66"]
]);
var SGRID_TYPE_NAME_STR = "\u5C0F\u7F51";
var MGRID_TYPE_NAME_STR = "\u4E2D\u7F51";
var LGRID_TYPE_NAME_STR = "\u5927\u7F51";
var PERFIT_TYPE_NAME_STR = "\u5229\u6DA6";

// src/settings.ts
var GRID_COLOR_BUY_MONITOR = "#FFFF00";
var GRID_COLOR_SELL_MONITOR = "#FFFF00";
var GRID_COLOR_BUY_TRIGGERED = "#D3D3D3";
var GRID_COLOR_SELL_TRIGGERED = "#FFFFE0";
var GRID_COLOR_STOCK_OVERVIEW = "#FFFFFF";
var GRID_COLOR_TABLE_TITLE = "#D3D3D3";
var GRID_COLOR_BUY_OVERVIEW = "#FFFF01";
var GRID_COLOR_SELL_OVERVIEW = "#FFFF00";
function PackSettings(settings) {
  let pack_str = "";
  let key;
  for (key in settings) {
    if (SETTING_NAME.has(String(key))) {
      pack_str = pack_str + String(key) + ":" + String(settings[key]) + "\n";
    }
  }
  return pack_str;
}
function UnpackSettings(settings, lines) {
  lines.forEach((line, idx) => {
    const strs = line.split(":");
    if (SETTING_NAME.has(strs[0])) {
      SetSettingValue(settings, strs[0], strs[1]);
    }
  });
}
function GetSettingValue(settings, key) {
  return settings[key];
}
function SetSettingValue(settings, key, value) {
  if (key in settings) {
    settings[key] = value;
  }
}
var PluginBaseSettings = class {
  constructor() {
    this.DATA_API_LICENCE = "112e84656174f0a5";
    this.DATA_API_LICENCE = "b192f53a6d6928033";
  }
};
var GridTradingSettings = class {
  constructor() {
    this.ONE_GRID_LIMIT = 1e4;
    this.MAX_SLUMP_PCT = 0.67;
    this.TRIGGER_ADD_POINT = 5e-3;
    this.TRADING_PRICE_PRECISION = 3;
    this.MIN_BATCH_COUNT = 100;
    this.MAX_RISE_PCT = 0.1;
    this.CLEAR_STEP_PCT = 0.25;
    this.MINIMUM_BUY_PCT = 0.1;
    this.BOTTOM_BUY_PCT = 0.2;
    this.SGRID_STEP_PCT = 0.05;
    this.SGRID_ADD_PCT = 0.05;
    this.SGRID_RETAIN_COUNT = 4;
    this.MGRID_STEP_PCT = 0.22;
    this.MGRID_ADD_PCT = 0.2;
    this.MGRID_RETAIN_COUNT = 2;
    this.LGRID_STEP_PCT = 0.52;
    this.LGRID_ADD_PCT = 0.5;
    this.LGRID_RETAIN_COUNT = 1;
  }
  Clone() {
    const clone = new GridTradingSettings();
    clone.ONE_GRID_LIMIT = this.ONE_GRID_LIMIT;
    clone.MAX_SLUMP_PCT = this.MAX_SLUMP_PCT;
    clone.TRIGGER_ADD_POINT = this.TRIGGER_ADD_POINT;
    clone.TRADING_PRICE_PRECISION = this.TRADING_PRICE_PRECISION;
    clone.MIN_BATCH_COUNT = this.MIN_BATCH_COUNT;
    clone.MAX_RISE_PCT = this.MAX_RISE_PCT;
    clone.CLEAR_STEP_PCT = this.CLEAR_STEP_PCT;
    clone.MINIMUM_BUY_PCT = this.MINIMUM_BUY_PCT;
    clone.BOTTOM_BUY_PCT = this.BOTTOM_BUY_PCT;
    clone.SGRID_STEP_PCT = this.SGRID_STEP_PCT;
    clone.SGRID_ADD_PCT = this.SGRID_ADD_PCT;
    clone.SGRID_RETAIN_COUNT = this.SGRID_RETAIN_COUNT;
    clone.MGRID_STEP_PCT = this.MGRID_STEP_PCT;
    clone.MGRID_ADD_PCT = this.MGRID_ADD_PCT;
    clone.MGRID_RETAIN_COUNT = this.MGRID_RETAIN_COUNT;
    clone.LGRID_STEP_PCT = this.LGRID_STEP_PCT;
    clone.LGRID_ADD_PCT = this.LGRID_ADD_PCT;
    clone.LGRID_RETAIN_COUNT = this.LGRID_RETAIN_COUNT;
    return clone;
  }
  PackBase() {
    const setting = [
      "BASE",
      String(this.ONE_GRID_LIMIT),
      String(this.MAX_SLUMP_PCT),
      String(this.TRIGGER_ADD_POINT),
      String(this.TRADING_PRICE_PRECISION),
      String(this.MIN_BATCH_COUNT),
      String(this.MAX_RISE_PCT),
      String(this.CLEAR_STEP_PCT),
      String(this.MINIMUM_BUY_PCT),
      String(this.BOTTOM_BUY_PCT)
    ];
    return setting.join(",");
  }
  UnpackBase(strs) {
    if (strs.length < 10) {
      return;
    }
    this.ONE_GRID_LIMIT = Number(strs[1]);
    this.MAX_SLUMP_PCT = Number(strs[2]);
    this.TRIGGER_ADD_POINT = Number(strs[3]);
    this.TRADING_PRICE_PRECISION = Number(strs[4]);
    this.MIN_BATCH_COUNT = Number(strs[5]);
    this.MAX_RISE_PCT = Number(strs[6]);
    this.CLEAR_STEP_PCT = Number(strs[7]);
    this.MINIMUM_BUY_PCT = Number(strs[8]);
    this.BOTTOM_BUY_PCT = Number(strs[9]);
  }
  PackStep() {
    const setting = [
      "STEP",
      String(this.SGRID_STEP_PCT),
      String(this.SGRID_ADD_PCT),
      String(this.SGRID_RETAIN_COUNT),
      String(this.MGRID_STEP_PCT),
      String(this.MGRID_ADD_PCT),
      String(this.MGRID_RETAIN_COUNT),
      String(this.LGRID_STEP_PCT),
      String(this.LGRID_ADD_PCT),
      String(this.LGRID_RETAIN_COUNT)
    ];
    return setting.join(",");
  }
  UnpackStep(strs) {
    if (strs.length != 10) {
      return;
    }
    this.SGRID_STEP_PCT = Number(strs[1]);
    this.SGRID_ADD_PCT = Number(strs[2]);
    this.SGRID_RETAIN_COUNT = Number(strs[3]);
    this.MGRID_STEP_PCT = Number(strs[4]);
    this.MGRID_ADD_PCT = Number(strs[5]);
    this.MGRID_RETAIN_COUNT = Number(strs[6]);
    this.LGRID_STEP_PCT = Number(strs[7]);
    this.LGRID_ADD_PCT = Number(strs[8]);
    this.LGRID_RETAIN_COUNT = Number(strs[9]);
  }
  PackQuant() {
    const setting = ["QUANT"];
    return setting.join(",");
  }
  UnpackQuant(strs) {
  }
};

// src/remote_util.ts
var import_obsidian = require("obsidian");
var data_url_prefix = "http://api.biyingapi.com";
async function GetETFCurrentPrice(etf_code, api_licence, retry_count = 3) {
  if (!(etf_code.startsWith("sz") || etf_code.startsWith("sh"))) {
    return -1;
  }
  const data_api = data_url_prefix + "/jj/etfhq/" + etf_code + "/" + api_licence;
  while (retry_count >= 0) {
    try {
      const response = await (0, import_obsidian.requestUrl)(data_api);
      DebugLog("request ", etf_code, "  result ", response.json["zxj"]);
      return response.json["zxj"];
    } catch (e) {
      DebugLog("request ", data_api, "  error ", e.message);
      await sleep(30 * 1e3);
    }
    retry_count = retry_count - 1;
  }
  return -1;
}
async function GetLOFCurrentPrice(lof_code, api_licence, retry_count = 3) {
  if (!(lof_code.startsWith("sz") || lof_code.startsWith("sh"))) {
    return -1;
  }
  const data_api = data_url_prefix + "/jj/lofhq/" + lof_code + "/" + api_licence;
  while (retry_count >= 0) {
    try {
      const response = await (0, import_obsidian.requestUrl)(data_api);
      DebugLog("request ", lof_code, "  result ", response.json["zxj"]);
      return response.json["zxj"];
    } catch (e) {
      DebugLog("request ", data_api, "  error ", e.message);
      await sleep(30 * 1e3);
    }
  }
  return -1;
}
function DebugLog(...args) {
  let log_str = "";
  args.forEach((cell, i) => {
    log_str = log_str + String(cell);
  });
  new import_obsidian.Notice(log_str);
}

// src/grid_view.ts
var import_obsidian2 = require("obsidian");

// src/mymath.ts
function FixedPrice(price, pct, precision) {
  const scale = 10 ** precision;
  return Math.floor(Math.floor(price * scale) * Math.floor(pct * 100) / 100) / scale;
}
function MyFloor(num, single) {
  return Math.floor(num / single) * single;
}
function MyCeil(num, single) {
  return Math.ceil(num / single) * single;
}
function ToPercent(num, count = 0) {
  return (num * 100).toFixed(count) + "%";
}
function ToPercentStr(num, count = 0) {
  return num.toFixed(count) + "%";
}
function ToNumber(percent) {
  return Number(percent.replace("%", "")) / 100;
}
function ToTradingGap(current_price, target_price, count = 0) {
  if (target_price == void 0 || current_price == void 0 || current_price == 0) {
    return "-";
  }
  const gap = Math.abs(target_price - current_price);
  if (target_price > current_price) {
    return "+" + ToPercent(gap / current_price, count);
  } else {
    return "-" + ToPercent(gap / current_price, count);
  }
}
function IsNumeric(str) {
  return !isNaN(Number(str));
}
function TimeDuarion(dateStr1, dateStr2) {
  const date1 = new Date(dateStr1);
  const date2 = new Date(dateStr2);
  if (isNaN(date1.getTime()) || isNaN(date2.getTime())) {
    throw new Error("\u8F93\u5165\u7684\u65E5\u671F\u683C\u5F0F\u4E0D\u6B63\u786E");
  }
  const utc1 = Date.UTC(
    date1.getUTCFullYear(),
    date1.getUTCMonth(),
    date1.getUTCDate()
  );
  const utc2 = Date.UTC(
    date2.getUTCFullYear(),
    date2.getUTCMonth(),
    date2.getUTCDate()
  );
  return Math.abs(Math.floor((utc1 - utc2) / (1e3 * 60 * 60 * 24)));
}
function AveragePriceStr(cost, count, single) {
  if (count == 0) {
    return count.toFixed(single);
  }
  return String((cost / count).toFixed(single));
}
function StringPlus(num1, num2, single) {
  return String(MyFloor(Number(num1) + Number(num2), single));
}
function ProportionPctStr(count, total, single) {
  if (total == 0) {
    return total.toFixed(single) + "%";
  }
  return String((count / total * 100).toFixed(single)) + "%";
}

// src/grid_trading.ts
var import_md5 = __toESM(require_md5());
var GridTrading = class {
  constructor(plugin_env) {
    this.plugin_env = plugin_env;
    this.grid_settings = plugin_env.grid_settings.Clone();
    this.debug_log = [];
    this.data_md5 = "";
    this.is_empty = true;
    this.is_debug = false;
    this.remote_current_price = -1;
  }
  InitGridTrading(data) {
  }
  UpdateRemotePrice(remote_price) {
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  GetTradingTitle() {
    return this.stock_name + "(" + String(this.target_stock) + ")";
  }
  IsStock() {
    if (this.is_empty == false && (this.market_code == "sz" || this.market_code == "sh")) {
      return true;
    } else {
      return false;
    }
  }
  ParseRawData(data) {
    const new_md5 = import_md5.Md5.hashStr(data);
    if (new_md5 === this.data_md5) {
      return false;
    }
    this.data_md5 = new_md5;
    const lines = data.split("\n");
    const strs = lines[0].split(",");
    this.target_stock = Number(strs[1]);
    this.stock_name = strs[2];
    if (this.stock_name == "DEBUGTEST") {
      this.is_debug = true;
    }
    this.market_code = strs[3];
    this.target_price = Number(strs[4]);
    this.current_price = Number(strs[5]);
    this.remote_current_price = this.plugin_env.GetStockRemotePrice(strs[1]);
    if (this.remote_current_price > 0) {
      this.current_price = this.remote_current_price;
    }
    this.grid_settings = this.plugin_env.grid_settings.Clone();
    this.raw_trading_record = [];
    this.raw_adjust_record = [];
    this.buy_grid_record = [];
    this.sgrid_step_table = [];
    this.mgrid_step_table = [];
    this.lgrid_step_table = [];
    this.clear_sell_record = /* @__PURE__ */ new Map();
    for (let idx = 1; idx < lines.length; idx++) {
      const strs2 = lines[idx].split(",");
      if (strs2[0] == "BUY") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.push(strs2[2]);
      }
      if (strs2[0] == "SELL") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
        this.buy_grid_record.remove(strs2[2]);
      }
      if (strs2[0] == "SHARE") {
        this.raw_trading_record.push([strs2[0], strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "BASE") {
        this.grid_settings.UnpackBase(strs2);
      }
      if (strs2[0] == "STEP") {
        this.grid_settings.UnpackStep(strs2);
      }
      if (strs2[0] == "SGRID") {
        this.sgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "MGRID") {
        this.mgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "LGRID") {
        this.lgrid_step_table.push([strs2[1], strs2[2], strs2[3], strs2[4]]);
      }
      if (strs2[0] == "ADJ") {
        this.raw_adjust_record.push([strs2[1], strs2[2], strs2[3], strs2[4], strs2[5]]);
      }
    }
    return true;
  }
  InitTradingOverview() {
    this.stock_overview = [
      GRID_COLOR_STOCK_OVERVIEW,
      String(this.target_stock),
      this.stock_name,
      this.target_price.toFixed(3),
      this.current_price.toFixed(3),
      ToPercent(this.current_price / this.target_price, 1),
      String(this.total_hold),
      String(this.total_cost),
      ToTradingGap(this.total_cost, this.total_hold * this.current_price, 2),
      this.trading_income[5][10]
    ];
    this.stock_buy_overview = [];
    if (this.buy_monitor_rows.length > 0) {
      for (let idx = 0; idx < this.buy_monitor_rows.length; idx++) {
        const row = this.buy_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][3]), 2);
        this.stock_buy_overview.push([
          GRID_COLOR_BUY_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][2],
          this.trading_table[row][3],
          this.trading_table[row][4],
          this.trading_table[row][5],
          trading_gap
        ]);
      }
    }
    this.stock_sell_overview = [];
    if (this.sell_monitor_rows.length > 0) {
      for (let idx = 0; idx < this.sell_monitor_rows.length; idx++) {
        const row = this.sell_monitor_rows[idx];
        const trading_gap = ToTradingGap(this.current_price, Number(this.trading_table[row][7]), 2);
        this.stock_sell_overview.push([
          GRID_COLOR_SELL_OVERVIEW,
          String(this.target_stock),
          this.stock_name,
          this.trading_table[row][0],
          this.trading_table[row][1],
          this.trading_table[row][6],
          this.trading_table[row][7],
          this.trading_table[row][8],
          this.trading_table[row][9],
          trading_gap
        ]);
      }
    }
    if (this.stock_active_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_active_filled_record.length; idx++) {
        const row = this.stock_active_filled_record[idx];
        row[8] = String(this.current_price);
        row[9] = ToTradingGap(Number(row[5]), this.current_price);
        row[10] = String(MyCeil(Number(row[7]) / this.current_price, this.grid_settings.MIN_BATCH_COUNT));
        row[11] = String(Number(row[6]) - Number(row[10]));
      }
    }
    if (this.stock_passive_filled_record.length > 0) {
      for (let idx = 0; idx < this.stock_passive_filled_record.length; idx++) {
        const row = this.stock_passive_filled_record[idx];
        const grid_row = this.FindTradingGridRow(row[3]);
        if (grid_row.length > 0) {
          row[3] = grid_row[0];
          row[4] = grid_row[1];
          row[5] = grid_row[3];
          row[6] = grid_row[4];
          row[7] = grid_row[5];
          row[8] = String(this.current_price);
          row[9] = ToTradingGap(Number(row[5]), this.current_price);
          row[10] = grid_row[7];
          row[11] = ToTradingGap(this.current_price, Number(row[10]));
        }
      }
    }
  }
  InitStockTable() {
    this.empty_price = FixedPrice(this.target_price, 1 + this.grid_settings.SGRID_STEP_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (Number(this.trading_table[idx][7]) > this.empty_price) {
        this.empty_price = Number(this.trading_table[idx][7]);
      }
    }
    const clear_pct = this.grid_settings.CLEAR_STEP_PCT;
    this.clear_avg_price = Number(((this.CalcClearPrice(clear_pct, 1) + this.CalcClearPrice(clear_pct, 2) + this.CalcClearPrice(clear_pct, 3)) / 3).toFixed(this.grid_settings.TRADING_PRICE_PRECISION));
    this.clear_price = this.CalcClearPrice(clear_pct, 3);
    const mini_price = FixedPrice(this.target_price, this.grid_settings.MINIMUM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    const bottom_price = FixedPrice(this.target_price, this.grid_settings.BOTTOM_BUY_PCT, this.grid_settings.TRADING_PRICE_PRECISION);
    this.stock_table = [
      ["\u6807\u7684\u4EE3\u53F7", String(this.target_stock)],
      ["\u6807\u7684\u540D\u79F0", this.stock_name],
      ["\u7F51\u683C\u6A21\u5F0F", this.mode_type],
      ["\u9996\u7F51\u4EF7\u683C", String(this.target_price)],
      ["\u5F53\u524D\u4EF7\u683C", String(this.current_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.current_price / this.target_price, 1)],
      ["\u56DE\u8C03\u4EF7\u683C", String(bottom_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.BOTTOM_BUY_PCT, 1)],
      ["\u6700\u4F4E\u4EF7\u683C", String(mini_price), "\u4EF7\u683C\u767E\u5206\u4F4D", ToPercent(this.grid_settings.MINIMUM_BUY_PCT, 1)],
      ["\u505C\u683C\u8DCC\u5E45", ToTradingGap(this.current_price, mini_price), "\u6E05\u683C\u6DA8\u5E45", ToTradingGap(this.current_price, this.empty_price, 1)]
    ];
  }
  InitGridParam() {
    this.param_table = [
      ["\u9996\u7F51\u76EE\u6807\u91D1\u989D", String(this.grid_settings.ONE_GRID_LIMIT), "\u6700\u5927\u56DE\u64A4\u503C", ToPercent(this.grid_settings.MAX_SLUMP_PCT), "\u6700\u5927\u6DA8\u8DCC\u5E45", ToPercent(this.grid_settings.MAX_RISE_PCT)],
      ["\u89E6\u53D1\u4EF7\u52A0\u70B9", String(this.grid_settings.TRIGGER_ADD_POINT), "\u6BCF\u624B\u4EFD\u6570\u989D", String(this.grid_settings.MIN_BATCH_COUNT), "\u4EA4\u6613\u4EF7\u7CBE\u5EA6", String(this.grid_settings.TRADING_PRICE_PRECISION)],
      ["\u5C0F\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.SGRID_STEP_PCT), "\u4E2D\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.MGRID_STEP_PCT), "\u5927\u7F51\u6B65\u8FDB\u503C", ToPercent(this.grid_settings.LGRID_STEP_PCT)],
      ["\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.SGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.MGRID_ADD_PCT), "\u6295\u5165\u8FFD\u52A0\u503C", ToPercent(this.grid_settings.LGRID_ADD_PCT)],
      ["\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.SGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.MGRID_RETAIN_COUNT), "\u4FDD\u7559\u5229\u6DA6\u6570", String(this.grid_settings.LGRID_RETAIN_COUNT)]
    ];
  }
  InitTradingAnalysis() {
    const price = this.target_price;
    const rise_pct = this.grid_settings.SGRID_STEP_PCT;
    const table = this.trading_table;
    function Analysis(slump_pct) {
      let total_cost = 0;
      let total_amount = 0;
      let total_sell = 0;
      let total_gain = 0;
      const min_price = price * (1 - slump_pct);
      const max_price = price * (1 + rise_pct);
      table.forEach((row, i) => {
        if (i > 0 && ToNumber(row[1]) >= 1 - slump_pct) {
          total_cost = total_cost + Number(row[5]);
          total_amount = total_amount + Number(row[4]);
          total_gain = total_gain + Number(row[9]);
          total_sell = total_sell + Number(row[8]);
        }
      });
      const cost_price = (total_cost - total_gain) / (total_amount - total_sell);
      const gain_money = Math.floor(max_price * (total_amount - total_sell) - (total_cost - total_gain));
      return [
        ToPercent(slump_pct) + "(" + min_price.toFixed(3) + ")",
        String(total_cost),
        String(total_amount),
        String(Math.ceil(total_amount * min_price)),
        (total_cost / total_amount).toFixed(3),
        String(Math.ceil(total_cost - total_amount * min_price)),
        ((total_cost - total_amount * min_price) / total_cost * 100).toFixed(2) + "%",
        ((total_cost / total_amount - min_price) / min_price * 100).toFixed(2) + "%",
        String(total_amount - total_sell),
        String(Math.floor(max_price * (total_amount - total_sell))),
        String(total_cost - total_gain),
        cost_price.toFixed(3),
        ((max_price - cost_price) / cost_price * 100).toFixed(2) + "%",
        String(gain_money),
        (gain_money / total_cost * 100).toFixed(2) + "%"
      ];
    }
    this.trading_analysis = [
      ["\u4E8F\u635F\u5206\u6790", "\u56DE\u64A4\u6BD4\u4F8B"],
      ["", "\u6295\u5165\u8D44\u91D1"],
      ["", "\u6301\u4ED3\u4EFD\u989D"],
      ["", "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u4E8F\u635F\u91D1\u989D"],
      ["", "\u4E8F\u635F\u6BD4\u4F8B"],
      ["", "\u6240\u9700\u6DA8\u5E45"],
      ["\u53CD\u5F39\u76C8\u5229", "\u6301\u4ED3\u4EFD\u989D"],
      [(price * (1 + rise_pct)).toFixed(3), "\u6301\u4ED3\u91D1\u989D"],
      ["", "\u5360\u7528\u672C\u91D1"],
      ["", "\u6301\u4ED3\u6210\u672C"],
      ["", "\u6D6E\u76C8\u6BD4\u4F8B"],
      ["", "\u7F51\u683C\u76C8\u5229"],
      ["", "\u603B\u6D6E\u76C8\u6BD4"]
    ];
    const slump_pcts = [20, 30, 40, 50, 60, 70, 80];
    for (const pct of slump_pcts) {
      const result = Analysis(pct / 100);
      for (let idx = 0; idx < result.length; idx++) {
        this.trading_analysis[idx].push(result[idx]);
      }
    }
  }
  InitTradingRecord() {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    let adjust_price = 0;
    let adjust_count = 0;
    let adjust_cost = 0;
    this.adjust_record = [["\u8C03\u6574\u65E5\u671F", "\u8C03\u6574\u7C7B\u578B", "\u8C03\u6574\u5185\u5BB9", "\u4EA4\u6613\u4EF7\u683C", "\u4EA4\u6613\u80A1\u6570", "\u6D88\u8017\u672C\u91D1"]];
    for (let idx = 0; idx < this.raw_adjust_record.length; idx++) {
      if (IsNumeric(this.raw_adjust_record[idx][3])) {
        adjust_price = Number(this.raw_adjust_record[idx][3]);
      } else {
        adjust_price = 0;
      }
      if (IsNumeric(this.raw_adjust_record[idx][4])) {
        adjust_count = Number(this.raw_adjust_record[idx][4]);
      } else {
        adjust_count = 0;
      }
      adjust_cost = Math.ceil(adjust_price * adjust_count);
      if (adjust_cost > 0) {
        this.adjust_record.push([this.raw_adjust_record[idx][0], this.raw_adjust_record[idx][1], this.raw_adjust_record[idx][2], adjust_price.toFixed(precision), String(adjust_count), String(adjust_cost)]);
      } else {
        this.adjust_record.push([this.raw_adjust_record[idx][0], this.raw_adjust_record[idx][1], this.raw_adjust_record[idx][2], "-", "-", "-"]);
      }
    }
    this.total_retain = 0;
    this.retain_cost = 0;
    this.total_cost = 0;
    this.total_hold = 0;
    this.trading_record = [["\u4EA4\u6613\u65B9\u5411", "\u4EA4\u6613\u65E5\u671F", "\u7F51\u683C\u7C7B\u578B", "\u4EA4\u6613\u4EF7\u683C", "\u4EA4\u6613\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u7D2F\u79EF\u7B79\u7801", "\u6301\u4ED3\u65F6\u957F"]];
    this.stock_passive_filled_record = [];
    this.stock_active_filled_record = [];
    this.holding_record = [];
    let raw_record = [...this.raw_trading_record];
    let cursor = 0;
    let retain_sell = 0;
    while (cursor < raw_record.length) {
      if (raw_record[cursor][0] == "BUY") {
        let scursor = -1;
        for (let idx = cursor; idx < raw_record.length; idx++) {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2] == raw_record[cursor][2]) {
            scursor = idx;
            break;
          }
        }
        if (scursor >= 0) {
          const retain_count = Math.floor(Number(raw_record[cursor][4]) - Number(raw_record[scursor][4]));
          const cost_count = Math.floor(Number(raw_record[cursor][3]) * Number(raw_record[cursor][4]) - Number(raw_record[scursor][3]) * Number(raw_record[scursor][4]));
          const time_d = TimeDuarion(raw_record[cursor][1], raw_record[scursor][1]);
          this.total_retain = this.total_retain + retain_count;
          this.retain_cost = this.retain_cost + cost_count;
          this.trading_record.push([raw_record[cursor][0], raw_record[cursor][1], raw_record[cursor][2], raw_record[cursor][3], raw_record[cursor][4], String(cost_count)]);
          this.trading_record.push([raw_record[scursor][0], raw_record[scursor][1], raw_record[scursor][2], raw_record[scursor][3], raw_record[scursor][4], "--", String(retain_count), String(time_d) + "\u5929"]);
          raw_record.splice(cursor, 1);
          raw_record.splice(scursor - 1, 1);
        } else {
          cursor++;
        }
      } else {
        cursor++;
      }
    }
    for (let idx = 0; idx < raw_record.length; idx++) {
      if (raw_record[idx][0] == "BUY") {
        const cost_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
        this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], String(cost_count)]);
        this.total_cost = this.total_cost + cost_count;
        if (Number(raw_record[idx][3]) > 0) {
          this.total_hold = this.total_hold + Number(raw_record[idx][4]);
          this.holding_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
        if (Number(raw_record[idx][3]) == 0) {
          this.stock_passive_filled_record.push([GRID_COLOR_BUY_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], "", "", "", "", "", "", "", ""]);
        }
        if (raw_record[idx][2].startsWith("\u8865\u4ED3")) {
          this.stock_active_filled_record.push([GRID_COLOR_SELL_OVERVIEW, String(this.target_stock), this.stock_name, raw_record[idx][2], raw_record[idx][1], raw_record[idx][3], raw_record[idx][4], String(cost_count), "", "", ""]);
        }
      } else {
        if (raw_record[idx][0] == "SHARE") {
          if (raw_record[idx][2] == "\u7EA2\u5229") {
            const gain_count = Math.floor(Number(raw_record[idx][3]) * Number(raw_record[idx][4]));
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "-" + String(gain_count)]);
            this.retain_cost = this.retain_cost - gain_count;
          }
          if (raw_record[idx][2] == "\u62C6\u80A1") {
            this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4], "--", raw_record[idx][4]]);
            this.total_retain = this.total_retain + Number(raw_record[idx][4]);
          }
        } else {
          if (raw_record[idx][0] == "SELL" && raw_record[idx][2].startsWith("\u5229\u6DA6")) {
            this.total_retain = this.total_retain - Number(raw_record[idx][4]);
            this.retain_cost = this.retain_cost - Number(raw_record[idx][3]) * Number(raw_record[idx][4]);
            retain_sell = retain_sell + Number(raw_record[idx][4]);
            let sell_count = this.clear_sell_record.get(raw_record[idx][2]);
            if (sell_count == void 0) {
              sell_count = 0;
            }
            this.clear_sell_record.set(raw_record[idx][2], sell_count + Number(raw_record[idx][4]));
          }
          this.trading_record.push([raw_record[idx][0], raw_record[idx][1], raw_record[idx][2], raw_record[idx][3], raw_record[idx][4]]);
        }
      }
    }
    this.total_hold = this.total_hold + this.total_retain;
    this.total_cost = this.total_cost + this.retain_cost;
    if (this.total_cost != 0) {
      this.trading_record.push(["Cost", "", "", "", "", String(this.total_cost), "", ""]);
    }
    if (this.total_retain <= 0) {
      if (this.total_hold > 0) {
        this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", "0", ""]);
      }
      return;
    }
    this.trading_record.push(["Retain", "", "", "", String(this.total_hold), "", String(this.total_retain), ""]);
    const current_pct = MyCeil(this.current_price / this.target_price, 1e-3);
    for (let index = 1; index <= 3; index++) {
      const row = this.GenerateClearRow(PERFIT_TYPE_NAME_STR, index, this.grid_settings.CLEAR_STEP_PCT, MyFloor((this.total_retain + retain_sell) / 3, 100));
      this.trading_table.push(row);
      if (current_pct + this.grid_settings.MAX_RISE_PCT >= ToNumber(row[1])) {
        this.sell_monitor_rows.push(this.trading_table.length - 1);
      }
      this.sell_triggered_rows.push(this.trading_table.length - 1);
    }
  }
  InitTradingIncome() {
    this.trading_income = [];
    this.trading_income.push(["", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5B9E\u9645\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]);
    this.trading_income.push(this.GenerateIncomeRow("\u7D2F\u8BA1\u7B79\u7801", this.total_retain, this.retain_cost, this.current_price, this.retain_cost, 0, 0));
    this.CalcTradingIncome("\u5F53\u524D", this.current_price / this.target_price, this.empty_price, this.clear_avg_price, this.clear_price, false);
    this.CalcTradingIncome("\u56DE\u8C03", this.grid_settings.BOTTOM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price);
    this.CalcTradingIncome("\u6700\u5927", this.grid_settings.MINIMUM_BUY_PCT, this.empty_price, this.clear_avg_price, this.clear_price);
  }
  InitHoldingAnalysis() {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.holding_analysis = [];
    this.holding_analysis.push(["\u7B79\u7801\u7C7B\u578B", "\u6301\u4ED3\u80A1\u6570", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u5747\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]);
    this.holding_analysis.push(["\u603B\u989D"]);
    this.CalcHoldingPercent("\u5C0F\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u4E2D\u7F51", this.empty_price, this.clear_avg_price);
    this.CalcHoldingPercent("\u5927\u7F51", this.empty_price, this.clear_avg_price);
    let grid_total_hold = this.total_retain;
    let grid_total_cost = this.retain_cost;
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    let grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    let grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u7D2F\u79EF",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith("\u8865\u4ED3")) {
        grid_total_hold += Number(this.holding_record[idx][4]);
        grid_total_cost += Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    grid_current_value = Math.floor(grid_total_hold * this.current_price);
    grid_empty_income = grid_total_hold * this.empty_price - grid_total_cost;
    grid_clear_income = grid_total_hold * this.clear_avg_price - grid_total_cost;
    this.holding_analysis.push([
      "\u8865\u4ED3",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
    grid_total_hold = 0;
    grid_total_cost = 0;
    grid_current_value = 0;
    grid_empty_income = 0;
    grid_clear_income = 0;
    for (let idx = 2; idx < this.holding_analysis.length; idx++) {
      grid_total_hold += Number(this.holding_analysis[idx][1]);
      grid_total_cost += Number(this.holding_analysis[idx][2]);
      grid_current_value += Number(this.holding_analysis[idx][3]);
      grid_empty_income += Number(this.holding_analysis[idx][7]);
      grid_clear_income += Number(this.holding_analysis[idx][8]);
    }
    this.holding_analysis[1] = [
      "\u603B\u989D",
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ];
  }
  CalcHoldingPercent(grid_type, empty_price, clear_avg_price) {
    const total_hold = this.total_hold;
    const total_cost = this.total_cost;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    let grid_total_hold = 0;
    let grid_total_cost = 0;
    let grid_empty_income = 0;
    let grid_clear_income = 0;
    for (let idx = 0; idx < this.holding_record.length; idx++) {
      if (this.holding_record[idx][2].startsWith(grid_type)) {
        const grid_hold = Number(this.holding_record[idx][4]);
        const grid_cost = Number(this.holding_record[idx][3]) * Number(this.holding_record[idx][4]);
        grid_total_hold += grid_hold;
        grid_total_cost += grid_cost;
        let grid_row = this.FindTradingGridRow(this.holding_record[idx][2]);
        const empty_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * empty_price - grid_cost;
        grid_empty_income += empty_income;
        const clear_income = Number(grid_row[9]) + (grid_hold - Number(grid_row[8])) * clear_avg_price - grid_cost;
        grid_clear_income += clear_income;
      }
    }
    grid_total_cost = Math.ceil(grid_total_cost);
    let grid_current_value = Math.floor(grid_total_hold * this.current_price);
    this.holding_analysis.push([
      grid_type,
      String(grid_total_hold),
      String(grid_total_cost),
      String(grid_current_value),
      AveragePriceStr(grid_total_cost, grid_total_hold, precision),
      this.current_price.toFixed(precision),
      String(grid_current_value - grid_total_cost),
      grid_empty_income.toFixed(0),
      grid_clear_income.toFixed(0),
      ProportionPctStr(grid_total_hold, total_hold, 2),
      ProportionPctStr(grid_total_cost, total_cost, 2)
    ]);
  }
  CalcTradingIncome(title_txt, slump_pct, empty_price, clear_avg_price, clear_price, need_slump = true) {
    let total_cost = this.total_cost;
    let total_count = this.total_hold;
    let empty_cost = this.total_cost;
    let empty_count = this.total_hold;
    let clear_income_max = 0;
    let total_sell_cost = 0;
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    this.trading_table.forEach((row, i) => {
      if (this.trading_table[i][0].startsWith("\u5229\u6DA6")) {
        clear_income_max = clear_income_max + Number(this.trading_table[i][9]);
      } else {
        if (this.buy_grid_record.includes(this.trading_table[i][0])) {
          empty_cost = empty_cost - Number(row[9]);
          empty_count = empty_count - Number(row[8]);
          clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
          total_sell_cost = total_sell_cost + Number(row[9]);
        } else {
          if (i > 0 && ToNumber(row[1]) >= slump_pct && need_slump) {
            total_cost = total_cost + Number(row[5]);
            total_count = total_count + Number(row[4]);
            empty_cost = empty_cost + Number(row[5]) - Number(row[9]);
            empty_count = empty_count + Number(row[4]) - Number(row[8]);
            clear_income_max = clear_income_max + (Number(row[4]) - Number(row[8])) * clear_avg_price;
            total_sell_cost = total_sell_cost + Number(row[9]);
          }
        }
      }
    });
    clear_income_max = Math.floor(clear_income_max - empty_cost);
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6301\u4ED3", total_count, total_cost, this.target_price * slump_pct, total_cost, this.total_cost, 0));
    this.trading_income.push(this.GenerateIncomeRow(title_txt + "\u6E05\u683C", empty_count, empty_cost, empty_price, total_cost, 0, total_sell_cost));
    this.trading_income.push([
      title_txt + "\u6E05\u4ED3",
      "0",
      "0",
      "0",
      "-",
      clear_price.toFixed(precision),
      String(clear_income_max),
      String(total_cost),
      String(total_sell_cost + empty_cost + clear_income_max),
      ToTradingGap(total_cost, total_sell_cost + empty_cost + clear_income_max, 2),
      "-"
    ]);
  }
  GenerateClearRow(grid_name, idx, grid_step_pct, sell_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(grid_step_pct * 100)) ** idx / 100 ** (idx - 1)) / 100;
    const sell_price = FixedPrice(this.target_price, price_step, precision);
    let clear_count = this.clear_sell_record.get(grid_name + String(idx));
    if (clear_count == void 0) {
      clear_count = 0;
    }
    return [
      grid_name + String(idx),
      ToPercent(price_step),
      "",
      "",
      "",
      "",
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count - clear_count),
      String(Math.ceil(sell_price * (sell_count - clear_count))),
      "-",
      "+" + ToPercent(grid_step_pct)
    ];
  }
  GenerateIncomeRow(grid_name, total_count, total_cost, current_price, max_cost, current_cost, sell_value) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const current_value = MyFloor(total_count * current_price, 1);
    const total_income = current_value - total_cost;
    let position = ToPercent(current_cost / max_cost);
    if (current_cost == 0) {
      position = "-";
    }
    return [
      grid_name,
      String(total_count),
      String(total_cost),
      String(current_value),
      (total_cost / Math.max(total_count, 1)).toFixed(precision),
      current_price.toFixed(precision),
      String(total_income),
      String(max_cost),
      String(sell_value + current_value),
      ToTradingGap(max_cost, total_income + max_cost, 2),
      position
    ];
  }
  CalcClearPrice(step_pct, step_idx) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const price_step = Math.floor((100 + Math.floor(step_pct * 100)) ** step_idx / 100 ** (step_idx - 1)) / 100;
    return FixedPrice(this.target_price, price_step, precision);
  }
  IsNeedMonitor(table_index, is_sell, current_price, max_rise_pct) {
    if (is_sell) {
      const sell_price = Number(this.trading_table[table_index][7]);
      if (current_price * (1 + max_rise_pct) >= sell_price) {
        return true;
      } else {
        return false;
      }
    } else {
      const buy_price = Number(this.trading_table[table_index][3]);
      if (buy_price < this.target_price * this.grid_settings.MINIMUM_BUY_PCT) {
        return false;
      }
      if (current_price * (1 - max_rise_pct) <= buy_price) {
        return true;
      } else {
        return false;
      }
    }
  }
  IsDisableRow(table_index) {
    const price_pct = ToNumber(this.trading_table[table_index][1]);
    if (price_pct < this.grid_settings.MINIMUM_BUY_PCT) {
      return true;
    } else {
      return false;
    }
  }
  FindTradingGridRow(grid_name) {
    for (let idx = 0; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][0] == grid_name) {
        return this.trading_table[idx];
      }
    }
    return [];
  }
  SortTradingTable() {
    if (this.trading_table.length <= 1) {
      return;
    }
    this.trading_table.push(["\u505C\u6B62\u7EBF", "0%"]);
    let move_idx = 0;
    let move_row = null;
    for (let idx = 1; idx < this.trading_table.length; idx++) {
      if (this.trading_table[idx][1] == "0%") {
        break;
      }
      if (this.IsDisableRow(idx)) {
        move_idx = idx;
        move_row = this.trading_table[move_idx];
        for (let idx2 = move_idx; idx2 < this.trading_table.length - 1; idx2++) {
          this.trading_table[idx2] = this.trading_table[idx2 + 1];
          if (this.buy_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.buy_monitor_rows[this.buy_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.buy_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.buy_triggered_rows[this.buy_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_monitor_rows.indexOf(idx2 + 1) != -1) {
            this.sell_monitor_rows[this.sell_monitor_rows.indexOf(idx2 + 1)] = idx2;
          }
          if (this.sell_triggered_rows.indexOf(idx2 + 1) != -1) {
            this.sell_triggered_rows[this.sell_triggered_rows.indexOf(idx2 + 1)] = idx2;
          }
        }
        this.trading_table[this.trading_table.length - 1] = move_row;
        idx--;
      }
    }
  }
};

// src/grid_trading_m1.ts
var GridTradingModeOne = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "One";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const scount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.SGRID_STEP_PCT);
    const mcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.MGRID_STEP_PCT);
    const lcount = Math.floor(this.grid_settings.MAX_SLUMP_PCT / this.grid_settings.LGRID_STEP_PCT);
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    for (let idx = 0; idx <= scount; idx++) {
      this.trading_table[idx + 1] = this.GenerateOneRow(
        SGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.SGRID_STEP_PCT,
        this.grid_settings.SGRID_RETAIN_COUNT,
        this.grid_settings.SGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < scount + 1)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    for (let idx = 1; idx <= mcount; idx++) {
      this.trading_table[scount + 1 + idx] = this.GenerateOneRow(
        MGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.MGRID_STEP_PCT,
        this.grid_settings.MGRID_RETAIN_COUNT,
        this.grid_settings.MGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + idx);
        this.sell_triggered_rows.push(scount + 1 + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + idx)) {
        this.disable_rows.push(scount + 1 + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    for (let idx = 1; idx <= lcount; idx++) {
      this.trading_table[scount + 1 + mcount + idx] = this.GenerateOneRow(
        LGRID_TYPE_NAME_STR,
        idx,
        this.grid_settings.LGRID_STEP_PCT,
        this.grid_settings.LGRID_RETAIN_COUNT,
        this.grid_settings.LGRID_ADD_PCT
      );
      if (this.buy_grid_record.includes(this.trading_table[scount + 1 + mcount + idx][0])) {
        this.buy_triggered_rows.push(scount + 1 + mcount + idx);
        this.sell_triggered_rows.push(scount + 1 + mcount + idx);
      } else {
        if (this.IsNeedMonitor(scount + 1 + mcount, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(scount + 1 + mcount + idx);
        }
      }
      if (this.IsDisableRow(scount + 1 + mcount + idx)) {
        this.disable_rows.push(scount + 1 + mcount + idx);
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] > scount + 1 + mcount) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, grid_step_pct, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price_step = 100 - idx * Math.floor(grid_step_pct * 100);
    const buy_price = FixedPrice(this.target_price, buy_price_step / 100, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price_step = buy_price_step + Math.floor(grid_step_pct * 100);
    const sell_price = FixedPrice(this.target_price, sell_price_step / 100, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercentStr(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m2.ts
var GridTradingModeTwo = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Two";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const count = Math.floor(Math.log(1 - this.grid_settings.MAX_SLUMP_PCT) / Math.log(1 - this.grid_settings.LGRID_STEP_PCT)) + 1;
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let idx = 0;
    let max_slump_pct = Math.round((1 - this.grid_settings.MAX_SLUMP_PCT) * 100);
    let sell_price_step = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let i = 0; i < count; i++) {
      let ti = 1;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = first_step;
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[idx + 1] = this.GenerateOneRow(
          SGRID_TYPE_NAME_STR,
          idx,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.SGRID_RETAIN_COUNT,
          this.grid_settings.SGRID_ADD_PCT
        );
        if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
          this.buy_triggered_rows.push(idx + 1);
          this.sell_triggered_rows.push(idx + 1);
        }
        if (this.IsDisableRow(idx + 1)) {
          this.disable_rows.push(idx + 1);
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.SGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.trading_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.trading_table.length;
    idx = 0;
    sell_price_step = 1;
    for (let i = 0; i < count; i++) {
      let ti = 2;
      const first_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i));
      const slump_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      let step_pct = Math.round(first_step * (1 - this.grid_settings.MGRID_STEP_PCT));
      while (step_pct > slump_pct && step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          MGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.MGRID_RETAIN_COUNT,
          this.grid_settings.MGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        sell_price_step = step_pct / 100;
        step_pct = Math.round(first_step * (1 - ti * this.grid_settings.MGRID_STEP_PCT));
        ti++;
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.trading_table.length;
    idx = 0;
    for (let i = 0; i < count; i++) {
      sell_price_step = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i)) / 100;
      const step_pct = Math.round(100 * Math.pow(1 - this.grid_settings.LGRID_STEP_PCT, i + 1));
      if (step_pct > max_slump_pct) {
        this.trading_table[start_index + idx] = this.GenerateOneRow(
          LGRID_TYPE_NAME_STR,
          idx + 1,
          step_pct / 100,
          sell_price_step,
          this.grid_settings.LGRID_RETAIN_COUNT,
          this.grid_settings.LGRID_ADD_PCT
        );
        if (this.IsDisableRow(start_index + idx)) {
          this.disable_rows.push(start_index + idx);
        }
        if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
          this.buy_triggered_rows.push(start_index + idx);
          this.sell_triggered_rows.push(start_index + idx);
        } else {
          if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
            this.buy_monitor_rows.push(start_index + idx);
          }
        }
        idx++;
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, idx, buy_price_step, sell_price_step, grid_retain_count, grid_add_pct) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, buy_price_step, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + idx * grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, sell_price_step, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name + String(idx),
      ToPercent(buy_price_step),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/grid_trading_m3.ts
var GridTradingModeThree = class extends GridTrading {
  constructor(plugin_env) {
    super(plugin_env);
    this.mode_type = "Three";
  }
  InitGridTrading(data) {
    if (this.ParseRawData(data) || this.is_empty) {
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  UpdateRemotePrice(remote_price) {
    this.remote_current_price = remote_price;
    if (this.remote_current_price > 0 && this.remote_current_price != this.current_price) {
      this.current_price = this.remote_current_price;
      this.is_empty = false;
      this.InitGridParam();
      this.InitTradingTable();
      this.InitStockTable();
      this.InitTradingRecord();
      this.InitHoldingAnalysis();
      this.InitTradingIncome();
      this.InitTradingAnalysis();
      this.SortTradingTable();
    }
  }
  InitTradingTable() {
    this.buy_triggered_rows = [];
    this.sell_triggered_rows = [];
    this.buy_monitor_rows = [];
    this.sell_monitor_rows = [];
    this.disable_rows = [];
    this.trading_table = [];
    this.trading_table[0] = ["\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u76F8\u5BF9\u8DCC\u5E45", "\u76F8\u5BF9\u6DA8\u5E45"];
    const max_rise_pct = this.grid_settings.MAX_RISE_PCT;
    let grid_sell_pct = 1 + this.grid_settings.SGRID_STEP_PCT;
    for (let idx = 0; idx < this.sgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.sgrid_step_table[idx][1]);
      this.trading_table[idx + 1] = this.GenerateOneRow(
        this.sgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.sgrid_step_table[idx][2]),
        Number(this.sgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(idx + 1)) {
        this.disable_rows.push(idx + 1);
      }
      if (this.buy_grid_record.includes(this.trading_table[idx + 1][0])) {
        this.buy_triggered_rows.push(idx + 1);
        this.sell_triggered_rows.push(idx + 1);
      }
    }
    if (this.buy_triggered_rows.length > 0) {
      const last_buy = this.buy_triggered_rows[this.buy_triggered_rows.length - 1];
      if (last_buy < this.sgrid_step_table.length)
        this.buy_monitor_rows.push(last_buy + 1);
      let last_sell = this.sell_triggered_rows.pop();
      if (last_sell)
        this.sell_monitor_rows.push(last_sell);
      if (false) {
        const last_sell_s = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
        if (this.IsNeedMonitor(last_sell_s, true, this.current_price, max_rise_pct)) {
          this.sell_triggered_rows.pop();
          this.sell_monitor_rows.push(last_sell_s);
        }
      }
    } else {
      const first_buy = 1;
      if (this.IsNeedMonitor(first_buy, false, this.current_price, max_rise_pct)) {
        this.buy_monitor_rows.push(first_buy);
      }
    }
    let start_index = this.sgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.MGRID_STEP_PCT;
    for (let idx = 0; idx < this.mgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.mgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.mgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.mgrid_step_table[idx][2]),
        Number(this.mgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_m = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_m, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_m);
        this.sell_monitor_rows.push(last_sell_m);
      }
    }
    start_index = this.sgrid_step_table.length + this.mgrid_step_table.length + 1;
    grid_sell_pct = 1 + this.grid_settings.LGRID_STEP_PCT;
    for (let idx = 0; idx < this.lgrid_step_table.length; idx++) {
      let grid_buy_pct = ToNumber(this.lgrid_step_table[idx][1]);
      this.trading_table[start_index + idx] = this.GenerateOneRow(
        this.lgrid_step_table[idx][0],
        grid_buy_pct,
        grid_sell_pct,
        Number(this.lgrid_step_table[idx][2]),
        Number(this.lgrid_step_table[idx][3])
      );
      grid_sell_pct = grid_buy_pct;
      if (this.IsDisableRow(start_index + idx)) {
        this.disable_rows.push(start_index + idx);
      }
      if (this.buy_grid_record.includes(this.trading_table[start_index + idx][0])) {
        this.buy_triggered_rows.push(start_index + idx);
        this.sell_triggered_rows.push(start_index + idx);
      } else {
        if (this.IsNeedMonitor(start_index + idx, false, this.current_price, max_rise_pct)) {
          this.buy_monitor_rows.push(start_index + idx);
        }
      }
    }
    if (this.sell_triggered_rows.length > 0 && this.sell_triggered_rows[this.sell_triggered_rows.length - 1] >= start_index) {
      const last_sell_l = this.sell_triggered_rows[this.sell_triggered_rows.length - 1];
      if (this.IsNeedMonitor(last_sell_l, true, this.current_price, max_rise_pct)) {
        this.sell_triggered_rows.remove(last_sell_l);
        this.sell_monitor_rows.push(last_sell_l);
      }
    }
  }
  GenerateOneRow(grid_name, grid_buy_pct, grid_sell_pct, grid_add_pct, grid_retain_count) {
    const precision = this.grid_settings.TRADING_PRICE_PRECISION;
    const buy_price = FixedPrice(this.target_price, grid_buy_pct, precision);
    const buy_count = MyFloor(this.grid_settings.ONE_GRID_LIMIT * (1 + grid_add_pct) / buy_price, this.grid_settings.MIN_BATCH_COUNT);
    const sell_price = FixedPrice(this.target_price, grid_sell_pct, precision);
    const retain_count = (sell_price - buy_price) * buy_count * grid_retain_count;
    const sell_count = MyFloor((sell_price * buy_count - retain_count) / sell_price, this.grid_settings.MIN_BATCH_COUNT);
    return [
      grid_name,
      ToPercent(grid_buy_pct),
      (buy_price + this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      buy_price.toFixed(precision),
      String(buy_count),
      String(Math.ceil(buy_price * buy_count)),
      (sell_price - this.grid_settings.TRIGGER_ADD_POINT).toFixed(precision),
      sell_price.toFixed(precision),
      String(sell_count),
      String(Math.ceil(sell_price * sell_count)),
      ToTradingGap(sell_price, buy_price, 1),
      ToTradingGap(buy_price, sell_price, 1)
    ];
  }
};

// src/plugin_env.ts
var FETCH_CURRENT_PRICE = "fetch_current_price";
var PluginEnv = class {
  constructor() {
    this.is_settings_changed = false;
    this.base_settings = new PluginBaseSettings();
    this.grid_settings = new GridTradingSettings();
    this.grid_trading_dict = /* @__PURE__ */ new Map();
    this.stock_remote_price_dict = /* @__PURE__ */ new Map();
    this.event_callback_dict = /* @__PURE__ */ new Map();
    this._event_guid = 0;
  }
  GetAPILisence() {
    return this.base_settings.DATA_API_LICENCE;
  }
  GetStockRemotePrice(stock_no) {
    const price = this.stock_remote_price_dict.get(stock_no);
    if (price != void 0) {
      return price;
    } else {
      return -1;
    }
  }
  GetGridTradingTypeByString(mode) {
    if (mode == "mode_two") {
      return GridTradingModeTwo;
    }
    if (mode == "mode_three") {
      return GridTradingModeThree;
    }
    return GridTradingModeOne;
  }
  GetAndGenGridTrading(grid_name, mode) {
    let grid_trading = this.grid_trading_dict.get(grid_name);
    const trading_mode = this.GetGridTradingTypeByString(mode);
    if (grid_trading instanceof trading_mode) {
      return grid_trading;
    }
    grid_trading = new trading_mode(this);
    this.grid_trading_dict.set(grid_name, grid_trading);
    return grid_trading;
  }
  UnserializedSettings(data) {
    const lines = data.split("\n");
    if (lines.length <= 0) {
      return;
    }
    UnpackSettings(this.base_settings, lines);
    UnpackSettings(this.grid_settings, lines);
  }
  SerializedSettings() {
    return PackSettings(this.base_settings) + PackSettings(this.grid_settings);
  }
  PublishEvent(event_name) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      return;
    }
    for (let [guid, event_cb] of cb_dict) {
      try {
        event_cb();
      } catch (e) {
        ;
      }
    }
  }
  SubscribeEvent(event_name, event_cb) {
    const guid = this.GenGUID();
    let cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0) {
      cb_dict = /* @__PURE__ */ new Map();
      this.event_callback_dict.set(event_name, cb_dict);
    }
    cb_dict.set(guid, event_cb);
    return guid;
  }
  UnsubscribeEvent(event_name, event_guid) {
    const cb_dict = this.event_callback_dict.get(event_name);
    if (cb_dict == void 0 || !cb_dict.has(event_guid)) {
      return false;
    }
    return cb_dict.delete(event_guid);
  }
  GenGUID() {
    this._event_guid++;
    return this._event_guid;
  }
};

// src/command_util.ts
var GridCommand = class {
  constructor() {
    this.command = "none";
    this.command_type = "grid";
  }
};
function ExcuteGridCommand(cmd_str) {
  const strs = cmd_str.split(" ");
  const command = new GridCommand();
  command.command = strs[0];
  command.raw_command_text = cmd_str;
  if (command.command == "add_record") {
    command.command_param1 = strs[1];
    AddGridRecord(command);
  }
  if (command.command == "del_record") {
    command.command_param1 = strs[1];
    DelGridRecord(command);
  }
  return command;
}
function AddGridRecord(command) {
  const sub_strs = command.command_param1.split(",");
  if (sub_strs.length != 5) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (sub_strs[0] != "BUY" && sub_strs[0] != "SELL" && sub_strs[0] != "SHARE") {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  if (!sub_strs[2].startsWith("\u5C0F\u7F51") && !sub_strs[2].startsWith("\u4E2D\u7F51") && !sub_strs[2].startsWith("\u5927\u7F51") && !sub_strs[2].startsWith("\u7EA2\u5229") && !sub_strs[2].startsWith("\u5229\u6DA6")) {
    command.error_code = -1;
    command.error_msg = "invalid param";
    return false;
  }
  command.error_code = 0;
  command.data_result_str = "\n" + command.command_param1;
  return true;
}
function DelGridRecord(command) {
  if (IsNumeric(command.command_param1)) {
    command.error_code = 0;
    command.data_result_num = Number(command.command_param1);
  } else {
    command.error_code = -1;
    command.error_msg = "invalid param";
  }
}

// src/grid_view.ts
var VIEW_TYPE_GTV = "gtv-view";
var GTVView = class extends import_obsidian2.TextFileView {
  constructor(leaf, plugin_env) {
    super(leaf);
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.view_guid = plugin_env.GenGUID();
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTV;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.command_btn_el = div.createEl("button");
    this.command_btn_el.setText("Excute");
    this.command_btn_el.onClickEvent((ev) => {
      this.OnClickAddRecordBtn(ev, this.command_input_el);
    });
    this.command_input_el = div.createEl("input");
    this.command_input_el.empty();
    this.command_input_el.size = 70;
    this.command_input_el.placeholder = "Input your command";
    div = this.contentEl.createEl("div");
    this.stock_tile_el = div.createEl("h1");
    this.stock_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.param_title_el = div.createEl("h1");
    this.param_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.trading_title_el = div.createEl("h1");
    this.trading_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.analysis_title_el = div.createEl("h1");
    this.analysis_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.record_title_el = div.createEl("h1");
    this.record_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.adjust_title_el = div.createEl("h1");
    this.adjust_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  OnClickAddRecordBtn(ev, input_el) {
    try {
      const text = input_el.value;
      const grid_cmd = ExcuteGridCommand(text);
      if (grid_cmd.error_code == 0) {
        if (grid_cmd.command == "add_record") {
          this.data = this.data + grid_cmd.data_result_str;
          this.setViewData(this.data, false);
        }
        if (grid_cmd.command == "del_record") {
          const lines = this.data.split("\n");
          let count = 0;
          let index = 0;
          for (index = 0; index < lines.length; index++) {
            if (lines[index].startsWith("BUY,") || lines[index].startsWith("SELL,")) {
              count++;
            }
            if (count == grid_cmd.data_result_num) {
              break;
            }
          }
          if (index < lines.length) {
            lines.splice(index, 1);
          }
          this.data = lines.join("\n");
          this.setViewData(this.data, false);
        }
      }
    } catch (e) {
      DebugLog("Command has error ", e);
    }
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.stock_tile_el.setText("\u672A\u77E5\u6807\u7684");
    this.stock_table_el.empty();
    this.param_title_el.setText("\u7F51\u683C\u53C2\u6570");
    this.param_table_el.empty();
    this.trading_title_el.setText("\u4EA4\u6613\u7F51\u683C");
    this.trading_table_el.empty();
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.income_title_el.setText("\u6536\u76CA\u5206\u6790");
    this.income_table_el.empty();
    this.analysis_title_el.setText("\u56DE\u64A4\u5206\u6790");
    this.analysis_table_el.empty();
    this.record_title_el.setText("\u4EA4\u6613\u8BB0\u5F55");
    this.record_table_el.empty();
    this.adjust_title_el.setText("\u8C03\u6574\u8BB0\u5F55");
    this.adjust_table_el.empty();
    if (this.file != null) {
      const mode_str = this.data.split("\n")[0].split(",")[0];
      const grid_trading = this.plugin_env.GetAndGenGridTrading(this.file.name, mode_str);
      grid_trading.InitGridTrading(this.data);
      this.stock_tile_el.setText(grid_trading.stock_name);
      this.DisplayTable(grid_trading, this.stock_table_el, grid_trading.stock_table, false);
      this.DisplayTable(grid_trading, this.param_table_el, grid_trading.param_table, false);
      this.DisplayTable(grid_trading, this.trading_table_el, grid_trading.trading_table, true);
      this.DisplayTable(grid_trading, this.holding_table_el, grid_trading.holding_analysis, false);
      this.DisplayTable(grid_trading, this.income_table_el, grid_trading.trading_income, false);
      this.DisplayTable(grid_trading, this.analysis_table_el, grid_trading.trading_analysis, false);
      this.DisplayTable(grid_trading, this.record_table_el, grid_trading.trading_record, false);
      this.DisplayTable(grid_trading, this.adjust_table_el, grid_trading.adjust_record, false);
    }
  }
  DisplayTable(grid_trading, table_el, table, is_color) {
    try {
      const table_body = table_el.createEl("tbody");
      table.forEach((row, i) => {
        const table_row = table_body.createEl("tr");
        row.forEach((cell, j) => {
          const table_cell = table_row.createEl("td", { text: cell, attr: { "align": "right" } });
          if (is_color && i > 0) {
            if (j <= 5) {
              if (grid_trading.buy_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_TRIGGERED);
              }
              if (grid_trading.buy_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_BUY_MONITOR);
              }
            } else {
              if (grid_trading.sell_triggered_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_TRIGGERED);
              }
              if (grid_trading.sell_monitor_rows.includes(i)) {
                table_cell.setAttr("bgColor", GRID_COLOR_SELL_MONITOR);
              }
            }
          }
        });
      });
    } catch (error) {
      DebugLog("DisplayTable error: ", error);
    }
  }
};

// src/grid_overview.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_GTO = "gto-view";
var GTOView = class extends import_obsidian3.TextFileView {
  constructor(leaf, vault, plugin_env) {
    super(leaf);
    this.vault = vault;
    this.plugin_env = plugin_env;
    this.refresh_event_guid = -1;
    this.debug_log = [];
    this.stock_overview = [];
    this.custom_stock_overview = [];
    this.income_overview = [];
    this.holding_overview = [];
  }
  ReadCustomStock() {
    this.holding_overview = [["\u7B79\u7801\u7C7B\u578B", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6E05\u683C\u76C8\u5229", "\u6E05\u4ED3\u76C8\u5229", "\u6301\u4ED3\u5360\u6BD4", "\u672C\u91D1\u5360\u6BD4"]];
    this.holding_overview.push(["\u603B\u989D", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5C0F\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u4E2D\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u5927\u7F51", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u7D2F\u79EF", "0", "0", "0", "0", "0", "0", "0"]);
    this.holding_overview.push(["\u8865\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview = [["", "\u5360\u7528\u672C\u91D1", "\u6301\u4ED3\u91D1\u989D", "\u6301\u4ED3\u76C8\u4E8F", "\u6295\u5165\u8D44\u91D1", "\u8D26\u9762\u8D44\u91D1", "\u6295\u5165\u76C8\u4E8F", "\u6295\u5165\u4ED3\u4F4D"]];
    this.income_overview.push(["\u7D2F\u79EF\u7B79\u7801", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u5F53\u524D\u6E05\u4ED3", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u56DE\u8C03\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6301\u4ED3", "0", "0", "0", "0", "0", "0", "0"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u683C", "0", "0", "0", "0", "0", "0", "-"]);
    this.income_overview.push(["\u6700\u5927\u6E05\u76D8", "0", "0", "0", "0", "0", "0", "-"]);
    const stock_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u9996\u7F51\u76EE\u6807\u4EF7", "\u5F53\u524D\u4EF7\u683C", "\u4EF7\u683C\u767E\u5206\u4F4D", "\u6301\u4ED3\u80A1\u6570", "\u6D88\u8017\u672C\u91D1", "\u76C8\u4E8F\u6BD4\u7387", "\u56DE\u8C03\u4ED3\u4F4D"]];
    let buy_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u89E6\u53D1\u4EF7", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let sell_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u5356\u51FA\u89E6\u53D1\u4EF7", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u4EFD\u6570", "\u5356\u51FA\u91D1\u989D", "\u8DDD\u6210\u4EA4\u4EF7"]];
    let passive_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EF7\u683C\u6863\u4F4D", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u5F53\u524D\u8DCC\u5E45", "\u5356\u51FA\u4EF7\u683C", "\u5356\u51FA\u6DA8\u5E45"]];
    let active_table = [[GRID_COLOR_TABLE_TITLE, "\u6807\u7684\u4EE3\u53F7", "\u6807\u7684\u540D\u79F0", "\u7F51\u683C\u79CD\u7C7B", "\u4EA4\u6613\u65E5\u671F", "\u4E70\u5165\u4EF7\u683C", "\u4E70\u5165\u4EFD\u6570", "\u4E70\u5165\u91D1\u989D", "\u5F53\u524D\u4EF7\u683C", "\u6301\u4ED3\u6536\u76CA", "\u5356\u51FA\u4EFD\u6570", "\u7D2F\u79EF\u7B79\u7801"]];
    const grid_folder = this.vault.getAbstractFileByPath("GridTrading");
    let grid_file_names = [];
    if (grid_folder instanceof import_obsidian3.TFolder) {
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian3.TFile && grid_file.name.endsWith(".gtv")) {
          grid_file_names.push(grid_file.name);
        }
      }
    }
    grid_file_names.sort();
    for (let idx = 0; idx < grid_file_names.length; idx++) {
      const grid_trading = this.plugin_env.grid_trading_dict.get(grid_file_names[idx]);
      if (grid_trading instanceof GridTrading && grid_trading.IsStock() && !grid_trading.is_debug) {
        grid_trading.InitTradingOverview();
        stock_table.push(grid_trading.stock_overview);
        buy_table = buy_table.concat(grid_trading.stock_buy_overview);
        sell_table = sell_table.concat(grid_trading.stock_sell_overview);
        passive_table = passive_table.concat(grid_trading.stock_passive_filled_record);
        active_table = active_table.concat(grid_trading.stock_active_filled_record);
        const trading_income = grid_trading.trading_income;
        for (let idx2 = 1; idx2 <= 10; idx2++) {
          this.income_overview[idx2][1] = StringPlus(this.income_overview[idx2][1], trading_income[idx2][2], 1);
          this.income_overview[idx2][2] = StringPlus(this.income_overview[idx2][2], trading_income[idx2][3], 1);
          this.income_overview[idx2][3] = StringPlus(this.income_overview[idx2][3], trading_income[idx2][6], 1);
          this.income_overview[idx2][4] = StringPlus(this.income_overview[idx2][4], trading_income[idx2][7], 1);
          this.income_overview[idx2][5] = StringPlus(this.income_overview[idx2][5], trading_income[idx2][8], 1);
        }
        const trading_holding = grid_trading.holding_analysis;
        for (let idx2 = 1; idx2 <= 6; idx2++) {
          this.holding_overview[idx2][1] = StringPlus(this.holding_overview[idx2][1], trading_holding[idx2][2], 1);
          this.holding_overview[idx2][2] = StringPlus(this.holding_overview[idx2][2], trading_holding[idx2][3], 1);
          this.holding_overview[idx2][3] = StringPlus(this.holding_overview[idx2][3], trading_holding[idx2][6], 1);
          this.holding_overview[idx2][4] = StringPlus(this.holding_overview[idx2][4], trading_holding[idx2][7], 1);
          this.holding_overview[idx2][5] = StringPlus(this.holding_overview[idx2][5], trading_holding[idx2][8], 1);
        }
      }
    }
    let current_cost = Number(this.income_overview[2][1]);
    let current_hold = Number(this.income_overview[2][2]);
    for (let idx = 1; idx <= 10; idx++) {
      this.income_overview[idx][6] = ToPercent(Number(this.income_overview[idx][3]) / Number(this.income_overview[idx][4]), 2);
      if (this.income_overview[idx][7] != "-") {
        this.income_overview[idx][7] = ToPercent(current_cost / Number(this.income_overview[idx][4]));
      }
    }
    for (let idx = 1; idx <= 6; idx++) {
      this.holding_overview[idx][6] = ProportionPctStr(Number(this.holding_overview[idx][2]), current_hold, 2);
      this.holding_overview[idx][7] = ProportionPctStr(Number(this.holding_overview[idx][1]), current_cost, 2);
    }
    this.custom_stock_overview = [...stock_table, ...buy_table, ...sell_table];
    this.stock_filled_overview = [...passive_table, ...active_table];
  }
  SumupAllStock() {
    this.stock_overview = [];
    let stock_count = 0;
    let buy_monitor_count = 0;
    let sell_monitor_count = 0;
    let _3_buy_cost = 0;
    let _5_buy_cost = 0;
    let total_buy_cost = 0;
    let _3_sell_gain = 0;
    let _5_sell_gain = 0;
    let total_sell_gain = 0;
    for (let idx = 0; idx < this.custom_stock_overview.length; idx++) {
      const stock = this.custom_stock_overview[idx];
      if (stock[0] == GRID_COLOR_STOCK_OVERVIEW) {
        stock_count++;
      }
      if (stock[0] == GRID_COLOR_SELL_OVERVIEW) {
        sell_monitor_count++;
        total_sell_gain += Number(stock[8]);
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap < 3) {
          _3_sell_gain += Number(stock[8]);
        }
        if (trading_gap < 5) {
          _5_sell_gain += Number(stock[8]);
        }
      }
      if (stock[0] == GRID_COLOR_BUY_OVERVIEW) {
        buy_monitor_count++;
        total_buy_cost += Number(stock[8]);
        const trading_gap = Number(stock[9].replace("%", "").replace("+", ""));
        if (trading_gap > -3) {
          _3_buy_cost += Number(stock[8]);
        }
        if (trading_gap > -5) {
          _5_buy_cost += Number(stock[8]);
        }
      }
    }
    this.stock_overview.push(["\u6807\u7684\u603B\u6570", "\u5356\u51FA\u76D1\u63A7", "\u4E70\u5165\u76D1\u63A7", "\u4E70\u5165\u603B\u989D", "-3%\u5185\u4E70\u5165\u603B\u989D", "-5%\u5185\u4E70\u5165\u603B\u989D", "+3%\u5185\u5356\u51FA\u603B\u989D", "+5%\u5185\u5356\u51FA\u603B\u989D"]);
    this.stock_overview.push([String(stock_count), String(sell_monitor_count), String(buy_monitor_count), String(total_buy_cost), String(_3_buy_cost), String(_5_buy_cost), String(_3_sell_gain), String(_5_sell_gain)]);
  }
  DebugLog(level, log_str, extra_info) {
    this.debug_log.push([level, log_str, extra_info]);
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  getViewType() {
    return VIEW_TYPE_GTO;
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.overview_title_el = div.createEl("h1");
    this.overview_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.holding_title_el = div.createEl("h1");
    this.holding_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.income_title_el = div.createEl("h1");
    this.income_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.custom_title_el = div.createEl("h1");
    this.custom_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.filled_tile_el = div.createEl("h1");
    this.filled_table_el = div.createEl("table");
    div = this.contentEl.createEl("div");
    this.debug_log_title_el = div.createEl("h1");
    this.debug_log_table_el = div.createEl("table");
    this.refresh_event_guid = this.plugin_env.SubscribeEvent(FETCH_CURRENT_PRICE, () => this.Refresh());
  }
  async onClose() {
    this.contentEl.empty();
    if (this.refresh_event_guid > 0) {
      this.plugin_env.UnsubscribeEvent(FETCH_CURRENT_PRICE, this.refresh_event_guid);
      this.refresh_event_guid = -1;
    }
  }
  Refresh() {
    this.ReadCustomStock();
    this.SumupAllStock();
    this.overview_title_el.setText("\u7F51\u683C\u603B\u89C8");
    this.overview_table_el.empty();
    this.DisplayTable(this.overview_table_el, this.stock_overview, false);
    this.holding_title_el.setText("\u6301\u4ED3\u5206\u6790");
    this.holding_table_el.empty();
    this.DisplayTable(this.holding_table_el, this.holding_overview, false);
    this.income_title_el.setText("\u76C8\u4E8F\u603B\u89C8");
    this.income_table_el.empty();
    this.DisplayTable(this.income_table_el, this.income_overview, false);
    this.custom_title_el.setText("\u6211\u7684\u7F51\u683C");
    this.custom_table_el.empty();
    this.DisplayTable(this.custom_table_el, this.custom_stock_overview, true);
    this.filled_tile_el.setText("\u8865\u4ED3\u4FE1\u606F");
    this.filled_table_el.empty();
    this.DisplayTable(this.filled_table_el, this.stock_filled_overview, true);
  }
  DisplayTable(table_el, table, is_color) {
    const table_body = table_el.createEl("tbody");
    table.forEach((row, i) => {
      const table_row = table_body.createEl("tr");
      row.forEach((cell, j) => {
        if (is_color) {
          if (j > 0) {
            table_row.createEl("td", { text: cell, attr: { "bgColor": table[i][0], "align": "right" } });
          }
        } else {
          table_row.createEl("td", { text: cell, attr: { "align": "right" } });
        }
      });
    });
  }
};

// src/cor_view.ts
var import_obsidian4 = require("obsidian");
var VIEW_TYPE_COR = "cor-view";
var CorView = class extends import_obsidian4.TextFileView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return VIEW_TYPE_COR;
  }
  getViewData() {
    return this.data;
  }
  setViewData(data, clear) {
    this.data = data;
    this.Refresh();
  }
  clear() {
    this.data = "";
  }
  async onOpen() {
    let div = this.contentEl.createEl("div");
    this.data_el = div.createEl("h1");
  }
  async onClose() {
    this.contentEl.empty();
  }
  Refresh() {
    this.data_el.setText(this.data);
  }
};

// src/main.ts
var TradingStrategy = class extends import_obsidian5.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.plugin_env = new PluginEnv();
    this.interval_callback_id = -1;
  }
  async onload() {
    await this.LoadSettingsFromDisk();
    const ribbonIconEl = this.addRibbonIcon("dice", "GridTrading", (evt) => {
      this.FetchAllStockCurrentPrice();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new TradingStrategySettingTab(this.app, this, this.plugin_env));
    this.interval_callback_id = window.setInterval(() => this.FetchAllStockCurrentPrice(), 1 * 1e3);
    this.registerInterval(this.interval_callback_id);
    this.registerView(VIEW_TYPE_GTV, (leaf) => {
      const gtv_view = new GTVView(leaf, this.plugin_env);
      return gtv_view;
    });
    this.registerView(VIEW_TYPE_GTO, (leaf) => {
      const gto_view = new GTOView(leaf, this.app.vault, this.plugin_env);
      return gto_view;
    });
    this.registerView(VIEW_TYPE_COR, (leaf) => {
      const cor_view = new CorView(leaf);
      return cor_view;
    });
    this.registerExtensions(["gtv"], VIEW_TYPE_GTV);
    this.registerExtensions(["gto"], VIEW_TYPE_GTO);
    this.registerExtensions(["cor"], VIEW_TYPE_COR);
  }
  onunload() {
  }
  async LoadSettingsFromDisk() {
    const setting_data = await this.loadData();
    if (setting_data != null) {
      this.plugin_env.UnserializedSettings(setting_data);
    }
  }
  SaveSettingsToDisk() {
    DebugLog("MAX_SLUMP_PCT1 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    const setting_data = this.plugin_env.SerializedSettings();
    DebugLog("MAX_SLUMP_PCT2 ", this.plugin_env.grid_settings.MAX_SLUMP_PCT);
    DebugLog(setting_data);
    this.saveData(setting_data);
  }
  async FetchAllStockCurrentPrice() {
    const api_licence = this.plugin_env.GetAPILisence();
    const grid_folder = this.app.vault.getAbstractFileByPath("GridTrading");
    if (grid_folder instanceof import_obsidian5.TFolder) {
      if (this.interval_callback_id > 0) {
        window.clearInterval(this.interval_callback_id);
        this.interval_callback_id = -1;
      }
      for (let index = 0; index < grid_folder.children.length; index++) {
        const grid_file = grid_folder.children[index];
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gtv")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const mode_str = content.split("\n")[0].split(",")[0];
          let grid_trading = this.plugin_env.GetAndGenGridTrading(grid_file.name, mode_str);
          grid_trading.InitGridTrading(content);
          if (grid_trading.is_debug) {
            continue;
          }
          let current_price = -1;
          if (grid_file.name.includes("LOF")) {
            current_price = await GetLOFCurrentPrice(grid_trading.market_code + String(grid_trading.target_stock), api_licence);
            current_price = Number(current_price);
          } else {
            current_price = await GetETFCurrentPrice(grid_trading.market_code + String(grid_trading.target_stock), api_licence);
            current_price = Number(current_price);
            await sleep(10);
          }
          this.plugin_env.stock_remote_price_dict.set(String(grid_trading.target_stock), current_price);
          grid_trading.UpdateRemotePrice(current_price);
        }
        if (grid_file instanceof import_obsidian5.TFile && grid_file.name.endsWith(".gto")) {
          const content = await this.app.vault.cachedRead(grid_file);
          const lines = content.split("\n");
          for (let index2 = 0; index2 < lines.length; index2++) {
            const strs = lines[index2].split(",");
            if (strs[0] != "BUY" && strs[0] != "SELL") {
              let current_price = await GetETFCurrentPrice(strs[2] + strs[0], api_licence);
              current_price = Number(current_price);
              this.plugin_env.stock_remote_price_dict.set(strs[0], current_price);
              await sleep(1e3);
            }
          }
        }
      }
      this.plugin_env.PublishEvent(FETCH_CURRENT_PRICE);
    }
  }
};
var TradingStrategySettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin, plugin_env) {
    super(app, plugin);
    this.plugin = plugin;
    this.plugin_env = plugin_env;
  }
  hide() {
    if (this.plugin_env.is_settings_changed) {
      this.plugin.SaveSettingsToDisk();
      this.plugin_env.is_settings_changed = false;
    }
    super.hide();
  }
  display() {
    this.containerEl.empty();
    this.containerEl.createEl("h1").setText("TradingStrategy");
    const base_div = this.containerEl.createEl("div");
    base_div.createEl("h2").setText("\u57FA\u7840\u914D\u7F6E");
    let bkey;
    for (bkey in this.plugin_env.base_settings) {
      const key_name = SETTING_NAME.get(bkey);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(base_div).setName(key_name);
        setting.addText((text_comp, setting_key = bkey) => {
          text_comp.setValue(String(GetSettingValue(this.plugin_env.base_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.base_settings, setting_key, value);
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
    const grid_div = this.containerEl.createEl("div");
    grid_div.createEl("h2").setText("\u7F51\u683C\u914D\u7F6E");
    let key;
    for (key in this.plugin_env.grid_settings) {
      const key_name = SETTING_NAME.get(key);
      if (key_name != void 0) {
        const setting = new import_obsidian5.Setting(grid_div).setName(key_name);
        setting.addText((text_comp, setting_key = key) => {
          DebugLog("add Setting Key: ", setting_key);
          text_comp.setValue(String(GetSettingValue(this.plugin_env.grid_settings, setting_key)));
          text_comp.onChange((value) => {
            SetSettingValue(this.plugin_env.grid_settings, setting_key, Number(value));
            DebugLog("SetValue succeed ", setting_key, GetSettingValue(this.plugin_env.grid_settings, setting_key));
            this.plugin_env.is_settings_changed = true;
          });
        });
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3RzLW1kNS9kaXN0L21kNS5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvbGFuZ19zdHIudHMiLCAic3JjL3NldHRpbmdzLnRzIiwgInNyYy9yZW1vdGVfdXRpbC50cyIsICJzcmMvZ3JpZF92aWV3LnRzIiwgInNyYy9teW1hdGgudHMiLCAic3JjL2dyaWRfdHJhZGluZy50cyIsICJzcmMvZ3JpZF90cmFkaW5nX20xLnRzIiwgInNyYy9ncmlkX3RyYWRpbmdfbTIudHMiLCAic3JjL2dyaWRfdHJhZGluZ19tMy50cyIsICJzcmMvcGx1Z2luX2Vudi50cyIsICJzcmMvY29tbWFuZF91dGlsLnRzIiwgInNyYy9ncmlkX292ZXJ2aWV3LnRzIiwgInNyYy9jb3Jfdmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuXG5UeXBlU2NyaXB0IE1kNVxuPT09PT09PT09PT09PT1cblxuQmFzZWQgb24gd29yayBieVxuKiBKb3NlcGggTXllcnM6IGh0dHA6Ly93d3cubXllcnNkYWlseS5vcmcvam9zZXBoL2phdmFzY3JpcHQvbWQ1LXRleHQuaHRtbFxuKiBBbmRyXHUwMEU5IENydXo6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYXRhem9yL1NwYXJrTUQ1XG4qIFJheW1vbmQgSGlsbDogaHR0cHM6Ly9naXRodWIuY29tL2dvcmhpbGwveWFtZDUuanNcblxuRWZmZWN0aXZlbHkgYSBUeXBlU2NyeXB0IHJlLXdyaXRlIG9mIFJheW1vbmQgSGlsbCBKUyBMaWJyYXJ5XG5cblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKEMpIDIwMTQgUmF5bW9uZCBIaWxsXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuXG5cbiAgICAgICAgICAgIERPIFdIQVQgWU9VIFdBTlQgVE8gUFVCTElDIExJQ0VOU0VcbiAgICAgICAgICAgICAgICAgICAgVmVyc2lvbiAyLCBEZWNlbWJlciAyMDA0XG5cbiBDb3B5cmlnaHQgKEMpIDIwMTUgQW5kclx1MDBFOSBDcnV6IDxhbWRmY3J1ekBnbWFpbC5jb20+XG5cbiBFdmVyeW9uZSBpcyBwZXJtaXR0ZWQgdG8gY29weSBhbmQgZGlzdHJpYnV0ZSB2ZXJiYXRpbSBvciBtb2RpZmllZFxuIGNvcGllcyBvZiB0aGlzIGxpY2Vuc2UgZG9jdW1lbnQsIGFuZCBjaGFuZ2luZyBpdCBpcyBhbGxvd2VkIGFzIGxvbmdcbiBhcyB0aGUgbmFtZSBpcyBjaGFuZ2VkLlxuXG4gICAgICAgICAgICBETyBXSEFUIFlPVSBXQU5UIFRPIFBVQkxJQyBMSUNFTlNFXG4gICBURVJNUyBBTkQgQ09ORElUSU9OUyBGT1IgQ09QWUlORywgRElTVFJJQlVUSU9OIEFORCBNT0RJRklDQVRJT05cblxuICAwLiBZb3UganVzdCBETyBXSEFUIFlPVSBXQU5UIFRPLlxuXG5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1kNSA9IHZvaWQgMDtcbjtcbnZhciBNZDUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWQ1KCkge1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgSW50MzJBcnJheSg0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDY4KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyOCA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlciwgMCwgNjgpO1xuICAgICAgICB0aGlzLl9idWZmZXIzMiA9IG5ldyBVaW50MzJBcnJheSh0aGlzLl9idWZmZXIsIDAsIDE3KTtcbiAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgICBNZDUuaGFzaFN0ciA9IGZ1bmN0aW9uIChzdHIsIHJhdykge1xuICAgICAgICBpZiAocmF3ID09PSB2b2lkIDApIHsgcmF3ID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMub25lUGFzc0hhc2hlclxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC5hcHBlbmRTdHIoc3RyKVxuICAgICAgICAgICAgLmVuZChyYXcpO1xuICAgIH07XG4gICAgTWQ1Lmhhc2hBc2NpaVN0ciA9IGZ1bmN0aW9uIChzdHIsIHJhdykge1xuICAgICAgICBpZiAocmF3ID09PSB2b2lkIDApIHsgcmF3ID0gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIHRoaXMub25lUGFzc0hhc2hlclxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC5hcHBlbmRBc2NpaVN0cihzdHIpXG4gICAgICAgICAgICAuZW5kKHJhdyk7XG4gICAgfTtcbiAgICBNZDUuX2hleCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHZhciBoYyA9IE1kNS5oZXhDaGFycztcbiAgICAgICAgdmFyIGhvID0gTWQ1LmhleE91dDtcbiAgICAgICAgdmFyIG47XG4gICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gaSAqIDg7XG4gICAgICAgICAgICBuID0geFtpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCA4OyBqICs9IDIpIHtcbiAgICAgICAgICAgICAgICBob1tvZmZzZXQgKyAxICsgal0gPSBoYy5jaGFyQXQobiAmIDB4MEYpO1xuICAgICAgICAgICAgICAgIG4gPj4+PSA0O1xuICAgICAgICAgICAgICAgIGhvW29mZnNldCArIDAgKyBqXSA9IGhjLmNoYXJBdChuICYgMHgwRik7XG4gICAgICAgICAgICAgICAgbiA+Pj49IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvLmpvaW4oJycpO1xuICAgIH07XG4gICAgTWQ1Ll9tZDVjeWNsZSA9IGZ1bmN0aW9uICh4LCBrKSB7XG4gICAgICAgIHZhciBhID0geFswXTtcbiAgICAgICAgdmFyIGIgPSB4WzFdO1xuICAgICAgICB2YXIgYyA9IHhbMl07XG4gICAgICAgIHZhciBkID0geFszXTtcbiAgICAgICAgLy8gZmYoKVxuICAgICAgICBhICs9IChiICYgYyB8IH5iICYgZCkgKyBrWzBdIC0gNjgwODc2OTM2IHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDcgfCBhID4+PiAyNSkgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGIgfCB+YSAmIGMpICsga1sxXSAtIDM4OTU2NDU4NiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzJdICsgNjA2MTA1ODE5IHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE3IHwgYyA+Pj4gMTUpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgJiBkIHwgfmMgJiBhKSArIGtbM10gLSAxMDQ0NTI1MzMwIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIyIHwgYiA+Pj4gMTApICsgYyB8IDA7XG4gICAgICAgIGEgKz0gKGIgJiBjIHwgfmIgJiBkKSArIGtbNF0gLSAxNzY0MTg4OTcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzVdICsgMTIwMDA4MDQyNiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzZdIC0gMTQ3MzIzMTM0MSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNyB8IGMgPj4+IDE1KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgZCB8IH5jICYgYSkgKyBrWzddIC0gNDU3MDU5ODMgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjIgfCBiID4+PiAxMCkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiAmIGMgfCB+YiAmIGQpICsga1s4XSArIDE3NzAwMzU0MTYgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzldIC0gMTk1ODQxNDQxNyB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMiB8IGQgPj4+IDIwKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYSB8IH5kICYgYikgKyBrWzEwXSAtIDQyMDYzIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE3IHwgYyA+Pj4gMTUpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgJiBkIHwgfmMgJiBhKSArIGtbMTFdIC0gMTk5MDQwNDE2MiB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMiB8IGIgPj4+IDEwKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgYyB8IH5iICYgZCkgKyBrWzEyXSArIDE4MDQ2MDM2ODIgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNyB8IGEgPj4+IDI1KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYiB8IH5hICYgYykgKyBrWzEzXSAtIDQwMzQxMTAxIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDEyIHwgZCA+Pj4gMjApICsgYSB8IDA7XG4gICAgICAgIGMgKz0gKGQgJiBhIHwgfmQgJiBiKSArIGtbMTRdIC0gMTUwMjAwMjI5MCB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNyB8IGMgPj4+IDE1KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgZCB8IH5jICYgYSkgKyBrWzE1XSArIDEyMzY1MzUzMjkgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjIgfCBiID4+PiAxMCkgKyBjIHwgMDtcbiAgICAgICAgLy8gZ2coKVxuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzFdIC0gMTY1Nzk2NTEwIHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDUgfCBhID4+PiAyNykgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGMgfCBiICYgfmMpICsga1s2XSAtIDEwNjk1MDE2MzIgfCAwO1xuICAgICAgICBkID0gKGQgPDwgOSB8IGQgPj4+IDIzKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYiB8IGEgJiB+YikgKyBrWzExXSArIDY0MzcxNzcxMyB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzBdIC0gMzczODk3MzAyIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIwIHwgYiA+Pj4gMTIpICsgYyB8IDA7XG4gICAgICAgIGEgKz0gKGIgJiBkIHwgYyAmIH5kKSArIGtbNV0gLSA3MDE1NTg2OTEgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYyB8IGIgJiB+YykgKyBrWzEwXSArIDM4MDE2MDgzIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDkgfCBkID4+PiAyMykgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCAmIGIgfCBhICYgfmIpICsga1sxNV0gLSA2NjA0NzgzMzUgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTQgfCBjID4+PiAxOCkgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoYyAmIGEgfCBkICYgfmEpICsga1s0XSAtIDQwNTUzNzg0OCB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMCB8IGIgPj4+IDEyKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzldICsgNTY4NDQ2NDM4IHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDUgfCBhID4+PiAyNykgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSAmIGMgfCBiICYgfmMpICsga1sxNF0gLSAxMDE5ODAzNjkwIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDkgfCBkID4+PiAyMykgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCAmIGIgfCBhICYgfmIpICsga1szXSAtIDE4NzM2Mzk2MSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzhdICsgMTE2MzUzMTUwMSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMCB8IGIgPj4+IDEyKSArIGMgfCAwO1xuICAgICAgICBhICs9IChiICYgZCB8IGMgJiB+ZCkgKyBrWzEzXSAtIDE0NDQ2ODE0NjcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhICYgYyB8IGIgJiB+YykgKyBrWzJdIC0gNTE0MDM3ODQgfCAwO1xuICAgICAgICBkID0gKGQgPDwgOSB8IGQgPj4+IDIzKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkICYgYiB8IGEgJiB+YikgKyBrWzddICsgMTczNTMyODQ3MyB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNCB8IGMgPj4+IDE4KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjICYgYSB8IGQgJiB+YSkgKyBrWzEyXSAtIDE5MjY2MDc3MzQgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjAgfCBiID4+PiAxMikgKyBjIHwgMDtcbiAgICAgICAgLy8gaGgoKVxuICAgICAgICBhICs9IChiIF4gYyBeIGQpICsga1s1XSAtIDM3ODU1OCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA0IHwgYSA+Pj4gMjgpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGEgXiBiIF4gYykgKyBrWzhdIC0gMjAyMjU3NDQ2MyB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMSB8IGQgPj4+IDIxKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkIF4gYSBeIGIpICsga1sxMV0gKyAxODM5MDMwNTYyIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzE0XSAtIDM1MzA5NTU2IHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiBeIGMgXiBkKSArIGtbMV0gLSAxNTMwOTkyMDYwIHwgMDtcbiAgICAgICAgYSA9IChhIDw8IDQgfCBhID4+PiAyOCkgKyBiIHwgMDtcbiAgICAgICAgZCArPSAoYSBeIGIgXiBjKSArIGtbNF0gKyAxMjcyODkzMzUzIHwgMDtcbiAgICAgICAgZCA9IChkIDw8IDExIHwgZCA+Pj4gMjEpICsgYSB8IDA7XG4gICAgICAgIGMgKz0gKGQgXiBhIF4gYikgKyBrWzddIC0gMTU1NDk3NjMyIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzEwXSAtIDEwOTQ3MzA2NDAgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjMgfCBiID4+PiA5KSArIGMgfCAwO1xuICAgICAgICBhICs9IChiIF4gYyBeIGQpICsga1sxM10gKyA2ODEyNzkxNzQgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNCB8IGEgPj4+IDI4KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhIF4gYiBeIGMpICsga1swXSAtIDM1ODUzNzIyMiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMSB8IGQgPj4+IDIxKSArIGEgfCAwO1xuICAgICAgICBjICs9IChkIF4gYSBeIGIpICsga1szXSAtIDcyMjUyMTk3OSB8IDA7XG4gICAgICAgIGMgPSAoYyA8PCAxNiB8IGMgPj4+IDE2KSArIGQgfCAwO1xuICAgICAgICBiICs9IChjIF4gZCBeIGEpICsga1s2XSArIDc2MDI5MTg5IHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYiBeIGMgXiBkKSArIGtbOV0gLSA2NDAzNjQ0ODcgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNCB8IGEgPj4+IDI4KSArIGIgfCAwO1xuICAgICAgICBkICs9IChhIF4gYiBeIGMpICsga1sxMl0gLSA0MjE4MTU4MzUgfCAwO1xuICAgICAgICBkID0gKGQgPDwgMTEgfCBkID4+PiAyMSkgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoZCBeIGEgXiBiKSArIGtbMTVdICsgNTMwNzQyNTIwIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE2IHwgYyA+Pj4gMTYpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGMgXiBkIF4gYSkgKyBrWzJdIC0gOTk1MzM4NjUxIHwgMDtcbiAgICAgICAgYiA9IChiIDw8IDIzIHwgYiA+Pj4gOSkgKyBjIHwgMDtcbiAgICAgICAgLy8gaWkoKVxuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1swXSAtIDE5ODYzMDg0NCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzddICsgMTEyNjg5MTQxNSB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1sxNF0gLSAxNDE2MzU0OTA1IHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE1IHwgYyA+Pj4gMTcpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGQgXiAoYyB8IH5hKSkgKyBrWzVdIC0gNTc0MzQwNTUgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjEgfCBiID4+PiAxMSkgKyBjIHwgMDtcbiAgICAgICAgYSArPSAoYyBeIChiIHwgfmQpKSArIGtbMTJdICsgMTcwMDQ4NTU3MSB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzNdIC0gMTg5NDk4NjYwNiB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1sxMF0gLSAxMDUxNTIzIHwgMDtcbiAgICAgICAgYyA9IChjIDw8IDE1IHwgYyA+Pj4gMTcpICsgZCB8IDA7XG4gICAgICAgIGIgKz0gKGQgXiAoYyB8IH5hKSkgKyBrWzFdIC0gMjA1NDkyMjc5OSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMSB8IGIgPj4+IDExKSArIGMgfCAwO1xuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1s4XSArIDE4NzMzMTMzNTkgfCAwO1xuICAgICAgICBhID0gKGEgPDwgNiB8IGEgPj4+IDI2KSArIGIgfCAwO1xuICAgICAgICBkICs9IChiIF4gKGEgfCB+YykpICsga1sxNV0gLSAzMDYxMTc0NCB8IDA7XG4gICAgICAgIGQgPSAoZCA8PCAxMCB8IGQgPj4+IDIyKSArIGEgfCAwO1xuICAgICAgICBjICs9IChhIF4gKGQgfCB+YikpICsga1s2XSAtIDE1NjAxOTgzODAgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTUgfCBjID4+PiAxNykgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoZCBeIChjIHwgfmEpKSArIGtbMTNdICsgMTMwOTE1MTY0OSB8IDA7XG4gICAgICAgIGIgPSAoYiA8PCAyMSB8IGIgPj4+IDExKSArIGMgfCAwO1xuICAgICAgICBhICs9IChjIF4gKGIgfCB+ZCkpICsga1s0XSAtIDE0NTUyMzA3MCB8IDA7XG4gICAgICAgIGEgPSAoYSA8PCA2IHwgYSA+Pj4gMjYpICsgYiB8IDA7XG4gICAgICAgIGQgKz0gKGIgXiAoYSB8IH5jKSkgKyBrWzExXSAtIDExMjAyMTAzNzkgfCAwO1xuICAgICAgICBkID0gKGQgPDwgMTAgfCBkID4+PiAyMikgKyBhIHwgMDtcbiAgICAgICAgYyArPSAoYSBeIChkIHwgfmIpKSArIGtbMl0gKyA3MTg3ODcyNTkgfCAwO1xuICAgICAgICBjID0gKGMgPDwgMTUgfCBjID4+PiAxNykgKyBkIHwgMDtcbiAgICAgICAgYiArPSAoZCBeIChjIHwgfmEpKSArIGtbOV0gLSAzNDM0ODU1NTEgfCAwO1xuICAgICAgICBiID0gKGIgPDwgMjEgfCBiID4+PiAxMSkgKyBjIHwgMDtcbiAgICAgICAgeFswXSA9IGEgKyB4WzBdIHwgMDtcbiAgICAgICAgeFsxXSA9IGIgKyB4WzFdIHwgMDtcbiAgICAgICAgeFsyXSA9IGMgKyB4WzJdIHwgMDtcbiAgICAgICAgeFszXSA9IGQgKyB4WzNdIHwgMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2UgYnVmZmVyIHRvIGJlIGhhc2hlZFxuICAgICAqL1xuICAgIE1kNS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZS5zZXQoTWQ1LnN0YXRlSWRlbnRpdHkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIENoYXIgdG8gY29kZSBwb2ludCB0byB0byBhcnJheSBjb252ZXJzaW9uOlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9jaGFyQ29kZUF0XG4gICAgLy8gI0V4YW1wbGUuM0FfRml4aW5nX2NoYXJDb2RlQXRfdG9faGFuZGxlX25vbi1CYXNpYy1NdWx0aWxpbmd1YWwtUGxhbmVfY2hhcmFjdGVyc19pZl90aGVpcl9wcmVzZW5jZV9lYXJsaWVyX2luX3RoZV9zdHJpbmdfaXNfdW5rbm93blxuICAgIC8qKlxuICAgICAqIEFwcGVuZCBhIFVURi04IHN0cmluZyB0byB0aGUgaGFzaCBidWZmZXJcbiAgICAgKiBAcGFyYW0gc3RyIFN0cmluZyB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZFN0ciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgdmFyIGJ1ZjggPSB0aGlzLl9idWZmZXI4O1xuICAgICAgICB2YXIgYnVmMzIgPSB0aGlzLl9idWZmZXIzMjtcbiAgICAgICAgdmFyIGJ1ZkxlbiA9IHRoaXMuX2J1ZmZlckxlbmd0aDtcbiAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA8IDEyOCkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gY29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDYpICsgMHhDMDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IGNvZGUgJiAweDNGIHwgMHg4MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZGUgPCAweEQ4MDAgfHwgY29kZSA+IDB4REJGRikge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDEyKSArIDB4RTA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gNiAmIDB4M0YpIHwgMHg4MDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IChjb2RlICYgMHgzRikgfCAweDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29kZSA9ICgoY29kZSAtIDB4RDgwMCkgKiAweDQwMCkgKyAoc3RyLmNoYXJDb2RlQXQoKytpKSAtIDB4REMwMCkgKyAweDEwMDAwO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmljb2RlIHN0YW5kYXJkIHN1cHBvcnRzIGNvZGUgcG9pbnRzIHVwIHRvIFUrMTBGRkZGJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gKGNvZGUgPj4+IDE4KSArIDB4RjA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gMTIgJiAweDNGKSB8IDB4ODA7XG4gICAgICAgICAgICAgICAgYnVmOFtidWZMZW4rK10gPSAoY29kZSA+Pj4gNiAmIDB4M0YpIHwgMHg4MDtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IChjb2RlICYgMHgzRikgfCAweDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZkxlbiA+PSA2NCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gNjQ7XG4gICAgICAgICAgICAgICAgTWQ1Ll9tZDVjeWNsZSh0aGlzLl9zdGF0ZSwgYnVmMzIpO1xuICAgICAgICAgICAgICAgIGJ1ZkxlbiAtPSA2NDtcbiAgICAgICAgICAgICAgICBidWYzMlswXSA9IGJ1ZjMyWzE2XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBidWZMZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQXBwZW5kIGFuIEFTQ0lJIHN0cmluZyB0byB0aGUgaGFzaCBidWZmZXJcbiAgICAgKiBAcGFyYW0gc3RyIFN0cmluZyB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZEFzY2lpU3RyID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpID0gTWF0aC5taW4oc3RyLmxlbmd0aCAtIGosIDY0IC0gYnVmTGVuKTtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgICAgICBidWY4W2J1ZkxlbisrXSA9IHN0ci5jaGFyQ29kZUF0KGorKyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmTGVuIDwgNjQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RhdGFMZW5ndGggKz0gNjQ7XG4gICAgICAgICAgICBNZDUuX21kNWN5Y2xlKHRoaXMuX3N0YXRlLCBidWYzMik7XG4gICAgICAgICAgICBidWZMZW4gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IGJ1ZkxlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBlbmQgYSBieXRlIGFycmF5IHRvIHRoZSBoYXNoIGJ1ZmZlclxuICAgICAqIEBwYXJhbSBpbnB1dCBhcnJheSB0byBhcHBlbmRcbiAgICAgKi9cbiAgICBNZDUucHJvdG90eXBlLmFwcGVuZEJ5dGVBcnJheSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBpID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoIC0gaiwgNjQgLSBidWZMZW4pO1xuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgICAgIGJ1ZjhbYnVmTGVuKytdID0gaW5wdXRbaisrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWZMZW4gPCA2NCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCArPSA2NDtcbiAgICAgICAgICAgIE1kNS5fbWQ1Y3ljbGUodGhpcy5fc3RhdGUsIGJ1ZjMyKTtcbiAgICAgICAgICAgIGJ1ZkxlbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gYnVmTGVuO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RhdGUgb2YgdGhlIGhhc2ggYnVmZmVyXG4gICAgICovXG4gICAgTWQ1LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJ1ZmZlcjogU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBBcnJheS5mcm9tKHRoaXMuX2J1ZmZlcjgpKSxcbiAgICAgICAgICAgIGJ1ZmxlbjogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLl9kYXRhTGVuZ3RoLFxuICAgICAgICAgICAgc3RhdGU6IFtzWzBdLCBzWzFdLCBzWzJdLCBzWzNdXVxuICAgICAgICB9O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGhhc2ggYnVmZmVyXG4gICAgICogQHBhcmFtIHN0YXRlIE5ldyBoYXNoIGJ1ZmZlciBzdGF0ZVxuICAgICAqL1xuICAgIE1kNS5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHN0YXRlLmJ1ZmZlcjtcbiAgICAgICAgdmFyIHggPSBzdGF0ZS5zdGF0ZTtcbiAgICAgICAgdmFyIHMgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IHN0YXRlLmJ1ZmxlbjtcbiAgICAgICAgc1swXSA9IHhbMF07XG4gICAgICAgIHNbMV0gPSB4WzFdO1xuICAgICAgICBzWzJdID0geFsyXTtcbiAgICAgICAgc1szXSA9IHhbM107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBidWYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcjhbaV0gPSBidWYuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFzaCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaGFzaCBidWZmZXIgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gICAgICogQHBhcmFtIHJhdyBXaGV0aGVyIHRvIHJldHVybiB0aGUgdmFsdWUgYXMgYW4gYEludDMyQXJyYXlgXG4gICAgICovXG4gICAgTWQ1LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgIGlmIChyYXcgPT09IHZvaWQgMCkgeyByYXcgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgYnVmTGVuID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICB2YXIgYnVmOCA9IHRoaXMuX2J1ZmZlcjg7XG4gICAgICAgIHZhciBidWYzMiA9IHRoaXMuX2J1ZmZlcjMyO1xuICAgICAgICB2YXIgaSA9IChidWZMZW4gPj4gMikgKyAxO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IGJ1ZkxlbjtcbiAgICAgICAgdmFyIGRhdGFCaXRzTGVuID0gdGhpcy5fZGF0YUxlbmd0aCAqIDg7XG4gICAgICAgIGJ1ZjhbYnVmTGVuXSA9IDB4ODA7XG4gICAgICAgIGJ1ZjhbYnVmTGVuICsgMV0gPSBidWY4W2J1ZkxlbiArIDJdID0gYnVmOFtidWZMZW4gKyAzXSA9IDA7XG4gICAgICAgIGJ1ZjMyLnNldChNZDUuYnVmZmVyMzJJZGVudGl0eS5zdWJhcnJheShpKSwgaSk7XG4gICAgICAgIGlmIChidWZMZW4gPiA1NSkge1xuICAgICAgICAgICAgTWQ1Ll9tZDVjeWNsZSh0aGlzLl9zdGF0ZSwgYnVmMzIpO1xuICAgICAgICAgICAgYnVmMzIuc2V0KE1kNS5idWZmZXIzMklkZW50aXR5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEbyB0aGUgZmluYWwgY29tcHV0YXRpb24gYmFzZWQgb24gdGhlIHRhaWwgYW5kIGxlbmd0aFxuICAgICAgICAvLyBCZXdhcmUgdGhhdCB0aGUgZmluYWwgbGVuZ3RoIG1heSBub3QgZml0IGluIDMyIGJpdHMgc28gd2UgdGFrZSBjYXJlIG9mIHRoYXRcbiAgICAgICAgaWYgKGRhdGFCaXRzTGVuIDw9IDB4RkZGRkZGRkYpIHtcbiAgICAgICAgICAgIGJ1ZjMyWzE0XSA9IGRhdGFCaXRzTGVuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBkYXRhQml0c0xlbi50b1N0cmluZygxNikubWF0Y2goLyguKj8pKC57MCw4fSkkLyk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsbyA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDE2KTtcbiAgICAgICAgICAgIHZhciBoaSA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDE2KSB8fCAwO1xuICAgICAgICAgICAgYnVmMzJbMTRdID0gbG87XG4gICAgICAgICAgICBidWYzMlsxNV0gPSBoaTtcbiAgICAgICAgfVxuICAgICAgICBNZDUuX21kNWN5Y2xlKHRoaXMuX3N0YXRlLCBidWYzMik7XG4gICAgICAgIHJldHVybiByYXcgPyB0aGlzLl9zdGF0ZSA6IE1kNS5faGV4KHRoaXMuX3N0YXRlKTtcbiAgICB9O1xuICAgIC8vIFByaXZhdGUgU3RhdGljIFZhcmlhYmxlc1xuICAgIE1kNS5zdGF0ZUlkZW50aXR5ID0gbmV3IEludDMyQXJyYXkoWzE3MzI1ODQxOTMsIC0yNzE3MzM4NzksIC0xNzMyNTg0MTk0LCAyNzE3MzM4NzhdKTtcbiAgICBNZDUuYnVmZmVyMzJJZGVudGl0eSA9IG5ldyBJbnQzMkFycmF5KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSk7XG4gICAgTWQ1LmhleENoYXJzID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuICAgIE1kNS5oZXhPdXQgPSBbXTtcbiAgICAvLyBQZXJtYW5lbnQgaW5zdGFuY2UgaXMgdG8gdXNlIGZvciBvbmUtY2FsbCBoYXNoaW5nXG4gICAgTWQ1Lm9uZVBhc3NIYXNoZXIgPSBuZXcgTWQ1KCk7XG4gICAgcmV0dXJuIE1kNTtcbn0oKSk7XG5leHBvcnRzLk1kNSA9IE1kNTtcbmlmIChNZDUuaGFzaFN0cignaGVsbG8nKSAhPT0gJzVkNDE0MDJhYmM0YjJhNzZiOTcxOWQ5MTEwMTdjNTkyJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTWQ1IHNlbGYgdGVzdCBmYWlsZWQuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZDUuanMubWFwIiwgIi8qXHJcbiAgICBNYWluOiBcdTYzRDJcdTRFRjZcdTVCOUFcdTRFNDlcdTUzQ0FcdTRFM0JcdTkwM0JcdThGOTFcclxuICAgIFx1OEJCRVx1N0Y2RVx1OTc2Mlx1Njc3Rlx1OTAwOVx1OTg3OVxyXG4qL1xyXG5pbXBvcnQgeyBBcHAsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgUGx1Z2luTWFuaWZlc3QsIFNldHRpbmcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZ1NldHRpbmdzLCBQbHVnaW5CYXNlU2V0dGluZ3MsIFNldFNldHRpbmdWYWx1ZSwgR2V0U2V0dGluZ1ZhbHVlIH0gZnJvbSBcIi4vc2V0dGluZ3NcIlxyXG5pbXBvcnQgeyBHZXRFVEZDdXJyZW50UHJpY2UsIEdldExPRkN1cnJlbnRQcmljZSwgRGVidWdMb2cgfSBmcm9tICcuL3JlbW90ZV91dGlsJztcclxuaW1wb3J0IHsgR1RWVmlldywgVklFV19UWVBFX0dUViB9IGZyb20gXCIuL2dyaWRfdmlld1wiXHJcbmltcG9ydCB7IEdUT1ZpZXcsIFZJRVdfVFlQRV9HVE8gfSBmcm9tICcuL2dyaWRfb3ZlcnZpZXcnO1xyXG5pbXBvcnQgeyBDb3JWaWV3LCBWSUVXX1RZUEVfQ09SIH0gZnJvbSAnLi9jb3Jfdmlldyc7XHJcbmltcG9ydCB7IFBsdWdpbkVudiwgRkVUQ0hfQ1VSUkVOVF9QUklDRSB9IGZyb20gJy4vcGx1Z2luX2Vudic7XHJcbmltcG9ydCB7IFNFVFRJTkdfTkFNRSB9IGZyb20gXCIuL2xhbmdfc3RyXCJcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFkaW5nU3RyYXRlZ3kgZXh0ZW5kcyBQbHVnaW5cclxue1xyXG4gICAgcGx1Z2luX2VudjogUGx1Z2luRW52O1xyXG4gICAgaW50ZXJ2YWxfY2FsbGJhY2tfaWQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgbWFuaWZlc3Q6IFBsdWdpbk1hbmlmZXN0KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgbWFuaWZlc3QpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luX2VudiA9IG5ldyBQbHVnaW5FbnYoKTtcclxuICAgICAgICB0aGlzLmludGVydmFsX2NhbGxiYWNrX2lkID0gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuTG9hZFNldHRpbmdzRnJvbURpc2soKTtcclxuICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXHJcbiAgICAgICAgY29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ0dyaWRUcmFkaW5nJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGljb24uXHJcbiAgICAgICAgICAgIHRoaXMuRmV0Y2hBbGxTdG9ja0N1cnJlbnRQcmljZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFBlcmZvcm0gYWRkaXRpb25hbCB0aGluZ3Mgd2l0aCB0aGUgcmliYm9uXHJcbiAgICAgICAgcmliYm9uSWNvbkVsLmFkZENsYXNzKCdteS1wbHVnaW4tcmliYm9uLWNsYXNzJyk7XHJcblxyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUcmFkaW5nU3RyYXRlZ3lTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzLCB0aGlzLnBsdWdpbl9lbnYpKTtcclxuXHJcbiAgICAgICAgLy8gV2hlbiByZWdpc3RlcmluZyBpbnRlcnZhbHMsIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFyIHRoZSBpbnRlcnZhbCB3aGVuIHRoZSBwbHVnaW4gaXMgZGlzYWJsZWQuXHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLkZldGNoQWxsU3RvY2tDdXJyZW50UHJpY2UoKSwgMSAqIDEwMDApO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJJbnRlcnZhbCh0aGlzLmludGVydmFsX2NhbGxiYWNrX2lkKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoVklFV19UWVBFX0dUViwgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ3R2X3ZpZXcgPSBuZXcgR1RWVmlldyhsZWFmLCB0aGlzLnBsdWdpbl9lbnYpO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3R2X3ZpZXc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoVklFV19UWVBFX0dUTywgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ3RvX3ZpZXcgPSBuZXcgR1RPVmlldyhsZWFmLCB0aGlzLmFwcC52YXVsdCwgdGhpcy5wbHVnaW5fZW52KTtcclxuICAgICAgICAgICAgcmV0dXJuIGd0b192aWV3O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFZJRVdfVFlQRV9DT1IsIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcl92aWV3ID0gbmV3IENvclZpZXcobGVhZik7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JfdmlldztcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFeHRlbnNpb25zKFtcImd0dlwiXSwgVklFV19UWVBFX0dUVik7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckV4dGVuc2lvbnMoW1wiZ3RvXCJdLCBWSUVXX1RZUEVfR1RPKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXh0ZW5zaW9ucyhbXCJjb3JcIl0sIFZJRVdfVFlQRV9DT1IpO1xyXG4gICAgfVxyXG5cclxuICAgIG9udW5sb2FkKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBMb2FkU2V0dGluZ3NGcm9tRGlzaygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ19kYXRhID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJGaW5pc2ggbG9hZGluZyBzZXR0aW5nLCBzZXR0aW5nX2RhdGE6IFwiLCBzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIGlmIChzZXR0aW5nX2RhdGEgIT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5VbnNlcmlhbGl6ZWRTZXR0aW5ncyhzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBTYXZlU2V0dGluZ3NUb0Rpc2soKVxyXG4gICAge1xyXG4gICAgICAgIERlYnVnTG9nKFwiTUFYX1NMVU1QX1BDVDEgXCIsIHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QpO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdfZGF0YSA9IHRoaXMucGx1Z2luX2Vudi5TZXJpYWxpemVkU2V0dGluZ3MoKTtcclxuICAgICAgICBEZWJ1Z0xvZyhcIk1BWF9TTFVNUF9QQ1QyIFwiLCB0aGlzLnBsdWdpbl9lbnYuZ3JpZF9zZXR0aW5ncy5NQVhfU0xVTVBfUENUKTtcclxuICAgICAgICBEZWJ1Z0xvZyhzZXR0aW5nX2RhdGEpO1xyXG4gICAgICAgIHRoaXMuc2F2ZURhdGEoc2V0dGluZ19kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBGZXRjaEFsbFN0b2NrQ3VycmVudFByaWNlKClcclxuICAgIHtcclxuICAgICAgICAvL0RlYnVnTG9nKCdydW4gRmV0Y2hBbGxTdG9ja0N1cnJlbnRQcmljZSAnLCB0aGlzLmFwcC52YXVsdC5nZXROYW1lKCkpO1xyXG4gICAgICAgIGNvbnN0IGFwaV9saWNlbmNlID0gdGhpcy5wbHVnaW5fZW52LkdldEFQSUxpc2VuY2UoKVxyXG4gICAgICAgIGNvbnN0IGdyaWRfZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKCdHcmlkVHJhZGluZycpO1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJnZXRBYnN0cmFjdEZpbGVCeVBhdGggXCIsIFN0cmluZyhncmlkX2ZvbGRlcikpO1xyXG4gICAgICAgIGlmIChncmlkX2ZvbGRlciBpbnN0YW5jZW9mIFRGb2xkZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA+IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxfY2FsbGJhY2tfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcnZhbF9jYWxsYmFja19pZCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vRGVidWdMb2coJ0ZvbGRlciBjaGlsZHJlbiBjb3VudCAnLCBTdHJpbmcoZ3JpZF9mb2xkZXIuY2hpbGRyZW4ubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4PTA7IGluZGV4IDwgZ3JpZF9mb2xkZXIuY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmlkX2ZpbGUgPSBncmlkX2ZvbGRlci5jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiRm9yIGZpbGUgbmFtZSBcIiwgZ3JpZF9maWxlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfZmlsZSBpbnN0YW5jZW9mIFRGaWxlICYmIGdyaWRfZmlsZS5uYW1lLmVuZHNXaXRoKFwiLmd0dlwiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwicmVhZCBmaWxlIFwiLCBncmlkX2ZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQoZ3JpZF9maWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RlX3N0ciA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCIsXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncmlkX3RyYWRpbmcgPSB0aGlzLnBsdWdpbl9lbnYuR2V0QW5kR2VuR3JpZFRyYWRpbmcoZ3JpZF9maWxlLm5hbWUsIG1vZGVfc3RyKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiR2V0QW5kR2VuR3JpZFRyYWRpbmcsIG5hbWU6IFwiLCBncmlkX2ZpbGUubmFtZSwgXCIsIG1vZGU6IFwiLCBtb2RlX3N0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZF90cmFkaW5nLkluaXRHcmlkVHJhZGluZyhjb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZF90cmFkaW5nLmlzX2RlYnVnKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vRGVidWdMb2coXCJUcnkgdG8gZmV0Y2ggcmVtb3RlIHByaWNlLCBcIiwgZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlLCBncmlkX3RyYWRpbmcudGFyZ2V0X3N0b2NrKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudF9wcmljZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmlkX2ZpbGUubmFtZS5pbmNsdWRlcyhcIkxPRlwiKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRMT0ZDdXJyZW50UHJpY2UoZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlICsgU3RyaW5nKGdyaWRfdHJhZGluZy50YXJnZXRfc3RvY2spLCBhcGlfbGljZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBOdW1iZXIoY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRFVEZDdXJyZW50UHJpY2UoZ3JpZF90cmFkaW5nLm1hcmtldF9jb2RlICsgU3RyaW5nKGdyaWRfdHJhZGluZy50YXJnZXRfc3RvY2spLCBhcGlfbGljZW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBTOiBcdTk3MDBcdTg5ODFcdTVGM0FcdThGNkNcdTRFMDBcdTRFMEJcdUZGMENcdTRFMERcdTVGM0FcdTUyMzZcdThGNkNcdTYzNjJcdTY1RTBcdTZDRDVcdTRGN0ZcdTc1MjggdG9GaXhlZCBcdTUxRkRcdTY1NzBcdUZGMENcdTUzRUZcdTgwRkRcdTY2MkZcdTdDN0JcdTU3OEJcdTk1RUVcdTk4OThcdUZGMENcdTZDQTFcdTZERjFcdTdBNzZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcmljZSA9IE51bWJlcihjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3Quc2V0KFN0cmluZyhncmlkX3RyYWRpbmcudGFyZ2V0X3N0b2NrKSwgY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9EZWJ1Z0xvZyhcIlx1NjdFNVx1OEJFMiBcIiwgZ3JpZF90cmFkaW5nLnN0b2NrX25hbWUsIFwiIFx1NUY1M1x1NTI0RFx1NjcwMFx1NjVCMFx1NEVGN1x1NjgzQ1x1NEUzQTogXCIsIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRfdHJhZGluZy5VcGRhdGVSZW1vdGVQcmljZShjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZF9maWxlIGluc3RhbmNlb2YgVEZpbGUgJiYgZ3JpZF9maWxlLm5hbWUuZW5kc1dpdGgoXCIuZ3RvXCIpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGdyaWRfZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy81MjE4ODAsXHU4QkMxXHU1MjM4RVRGLHNoLDEuMDMwLDAuODkwXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4PTA7IGluZGV4IDwgbGluZXMubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RycyA9IGxpbmVzW2luZGV4XS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJzWzBdICE9IFwiQlVZXCIgJiYgc3Ryc1swXSAhPSBcIlNFTExcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRfcHJpY2UgPSBhd2FpdCBHZXRFVEZDdXJyZW50UHJpY2Uoc3Ryc1syXSArIHN0cnNbMF0sIGFwaV9saWNlbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UgPSBOdW1iZXIoY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3Quc2V0KHN0cnNbMF0sIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2xlZXAoMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0RlYnVnTG9nKFwiXHU2N0U1XHU4QkUyIFwiLCBzdHJzWzFdLCBcIiBcdTVGNTNcdTUyNERcdTY3MDBcdTY1QjBcdTRFRjdcdTY4M0NcdTRFM0E6IFwiLCBjdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuUHVibGlzaEV2ZW50KEZFVENIX0NVUlJFTlRfUFJJQ0UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFRyYWRpbmdTdHJhdGVneVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHJcbiAgICBwbHVnaW46IFRyYWRpbmdTdHJhdGVneTtcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUcmFkaW5nU3RyYXRlZ3ksIHBsdWdpbl9lbnY6IFBsdWdpbkVudikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLnBsdWdpbl9lbnYgPSBwbHVnaW5fZW52O1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luX2Vudi5pc19zZXR0aW5nc19jaGFuZ2VkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uU2F2ZVNldHRpbmdzVG9EaXNrKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luX2Vudi5pc19zZXR0aW5nc19jaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJlbnRlciBkaXNwbGF5IHNldHRpbmdzXCIpXHJcbiAgICAgICAgLy8gXHU2RTA1XHU3QTdBXHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICAgIC8vIFx1OEJCRVx1N0Y2RVx1NjgwN1x1OTg5OFxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMVwiKS5zZXRUZXh0KFwiVHJhZGluZ1N0cmF0ZWd5XCIpO1xyXG4gICAgICAgIC8vIFx1NTdGQVx1Nzg0MFx1OTE0RFx1N0Y2RVxyXG4gICAgICAgIGNvbnN0IGJhc2VfZGl2ID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICBiYXNlX2Rpdi5jcmVhdGVFbChcImgyXCIpLnNldFRleHQoXCJcdTU3RkFcdTc4NDBcdTkxNERcdTdGNkVcIik7XHJcbiAgICAgICAgbGV0IGJrZXk6IChrZXlvZiBQbHVnaW5CYXNlU2V0dGluZ3MpO1xyXG4gICAgICAgIGZvciAoYmtleSBpbiB0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleV9uYW1lID0gU0VUVElOR19OQU1FLmdldChia2V5KVxyXG4gICAgICAgICAgICBpZiAoa2V5X25hbWUgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoYmFzZV9kaXYpLnNldE5hbWUoa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0X2NvbXAsIHNldHRpbmdfa2V5PWJrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2NvbXAuc2V0VmFsdWUoU3RyaW5nKEdldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncywgc2V0dGluZ19rZXkpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dF9jb21wLm9uQ2hhbmdlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuYmFzZV9zZXR0aW5ncywgc2V0dGluZ19rZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5fZW52LmlzX3NldHRpbmdzX2NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gXHU3RjUxXHU2ODNDXHU0RUE0XHU2NjEzXHU1M0MyXHU2NTcwXHJcbiAgICAgICAgY29uc3QgZ3JpZF9kaXYgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIGdyaWRfZGl2LmNyZWF0ZUVsKFwiaDJcIikuc2V0VGV4dChcIlx1N0Y1MVx1NjgzQ1x1OTE0RFx1N0Y2RVwiKTsgICBcclxuICAgICAgICBsZXQga2V5OiAoa2V5b2YgR3JpZFRyYWRpbmdTZXR0aW5ncyk7XHJcbiAgICAgICAgZm9yIChrZXkgaW4gdGhpcy5wbHVnaW5fZW52LmdyaWRfc2V0dGluZ3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlfbmFtZSA9IFNFVFRJTkdfTkFNRS5nZXQoa2V5KVxyXG4gICAgICAgICAgICBpZiAoa2V5X25hbWUgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoZ3JpZF9kaXYpLnNldE5hbWUoa2V5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0X2NvbXAsIHNldHRpbmdfa2V5PWtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnTG9nKFwiYWRkIFNldHRpbmcgS2V5OiBcIiwgc2V0dGluZ19rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRfY29tcC5zZXRWYWx1ZShTdHJpbmcoR2V0U2V0dGluZ1ZhbHVlKHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLCBzZXR0aW5nX2tleSkpKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0X2NvbXAub25DaGFuZ2UoKHZhbHVlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldFNldHRpbmdWYWx1ZSh0aGlzLnBsdWdpbl9lbnYuZ3JpZF9zZXR0aW5ncywgc2V0dGluZ19rZXksIE51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWdMb2coXCJTZXRWYWx1ZSBzdWNjZWVkIFwiLCBzZXR0aW5nX2tleSwgR2V0U2V0dGluZ1ZhbHVlKHRoaXMucGx1Z2luX2Vudi5ncmlkX3NldHRpbmdzLCBzZXR0aW5nX2tleSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5fZW52LmlzX3NldHRpbmdzX2NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsICJcclxuZXhwb3J0IGNvbnN0IFNFVFRJTkdfTkFNRSA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KFtcclxuICAgIFtcIk9ORV9HUklEX0xJTUlUXCIsIFwiXHU5OTk2XHU3RjUxXHU0RTBBXHU5NjUwXHU1MDNDXCJdLFxyXG4gICAgW1wiTUFYX1NMVU1QX1BDVFwiLCBcIlx1NjcwMFx1NTkyN1x1NTZERVx1NjRBNFx1NTAzQ1wiXSxcclxuICAgIFtcIlRSSUdHRVJfQUREX1BPSU5UXCIsIFwiXHU4OUU2XHU1M0QxXHU0RUY3XHU1MkEwXHU3MEI5XCJdLFxyXG4gICAgW1wiVFJBRElOR19QUklDRV9QUkVDSVNJT05cIiwgXCJcdTRFQTRcdTY2MTNcdTRFRjdcdTdDQkVcdTVFQTZcIl0sXHJcbiAgICBbXCJNSU5fQkFUQ0hfQ09VTlRcIiwgXCJcdTUzNTVcdTYyNEJcdTRFRkRcdTY1NzBcdTk4OURcIl0sXHJcbiAgICBbXCJNQVhfUklTRV9QQ1RcIiwgXCJcdTUzNTVcdTY1RTVcdTY3MDBcdTU5MjdcdTZEQThcdTVFNDVcIl0sXHJcbiAgICBbXCJTR1JJRF9TVEVQX1BDVFwiLCBcIlx1NUMwRlx1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIlNHUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIlNHUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJNR1JJRF9TVEVQX1BDVFwiLCBcIlx1NEUyRFx1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIk1HUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIk1HUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJMR1JJRF9TVEVQX1BDVFwiLCBcIlx1NTkyN1x1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiXSxcclxuICAgIFtcIkxHUklEX1JFVEFJTl9DT1VOVFwiLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiXSxcclxuICAgIFtcIkxHUklEX0FERF9QQ1RcIiwgXCJcdTZCQ0ZcdTdGNTFcdThGRkRcdTUyQTBcIl0sXHJcbiAgICBbXCJEQVRBX0FQSV9MSUNFTkNFXCIsIFwiXHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzXHU4QkMxXHU0RTY2XCJdXHJcbl0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNHUklEX1RZUEVfTkFNRV9TVFIgPSBcIlx1NUMwRlx1N0Y1MVwiO1xyXG5leHBvcnQgY29uc3QgTUdSSURfVFlQRV9OQU1FX1NUUiA9IFwiXHU0RTJEXHU3RjUxXCI7XHJcbmV4cG9ydCBjb25zdCBMR1JJRF9UWVBFX05BTUVfU1RSID0gXCJcdTU5MjdcdTdGNTFcIjtcclxuZXhwb3J0IGNvbnN0IFBFUkZJVF9UWVBFX05BTUVfU1RSID0gXCJcdTUyMjlcdTZEQTZcIjsiLCAiLypcclxuICAgIFNldHRpbmcgXHU1NDA0XHU3OUNEXHU5MTREXHU3RjZFXHU0RkUxXHU2MDZGXHU1M0NBXHU1RTM4XHU5MUNGXHU1QjlBXHU0RTQ5XHJcbiAgICBHcmlkVHJhZGluZ1NldHRpbmdzOiBcdTdGNTFcdTY4M0NcdTRFQTRcdTY2MTNcdTc2ODRcdTUzQzJcdTY1NzBcdTVCOUFcdTRFNDlcdUZGMENcdTg5ODZcdTc2RDZcdTUxNzNcdTdDRkJcdTRFM0EgXHU5RUQ4XHU4QkE0XHU1MTY4XHU1QzQwXHU1M0MyXHU2NTcwPC0tXHU4MUVBXHU1QjlBXHU0RTQ5XHU1MTY4XHU1QzQwXHU1M0MyXHU2NTcwPC0tXHU4MUVBXHU1QjlBXHU0RTQ5XHU2ODA3XHU3Njg0XHU1M0MyXHU2NTcwXHJcbiovXHJcblxyXG5pbXBvcnQgeyBTRVRUSU5HX05BTUUgfSBmcm9tIFwiLi9sYW5nX3N0clwiO1xyXG5cclxuLy8gXHU5ODlDXHU4MjcyXHU1QjlBXHU0RTQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9NT05JVE9SICAgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU5RUM0XHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfTU9OSVRPUiAgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU5RUM0XHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQgICAgICAgPSBcIiNEM0QzRDNcIjsgICAgLy8gXHU3MDcwXHU4MjcyXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfVFJJR0dFUkVEICAgICAgPSBcIiNGRkZGRTBcIjsgICAgLy8gXHU2RDQ1XHU5RUM0XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0RJU0FCTEUgICAgICAgICAgICAgPSBcIiNGRkZGRTBcIjsgICAgLy8gXHU2REYxXHU3MDcwXHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NUT0NLX09WRVJWSUVXICAgICAgPSBcIiNGRkZGRkZcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1RBQkxFX1RJVExFICAgICAgICAgPSBcIiNEM0QzRDNcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX0JVWV9PVkVSVklFVyAgICAgICAgPSBcIiNGRkZGMDFcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcbmV4cG9ydCBjb25zdCBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcgICAgICAgPSBcIiNGRkZGMDBcIjsgICAgLy8gXHU1NDBDXHU2NUY2XHU4MEE5XHU4RDFGXHU2ODA3XHU4QkIwXHU2NTcwXHU2MzZFXHU3QzdCXHU1NzhCXHVGRjBDXHU2NTQ1XHU5ODlDXHU4MjcyXHU1MDNDXHU0RTBEXHU4MEZEXHU1QjhDXHU1MTY4XHU3NkY4XHU3QjQ5XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFBhY2tTZXR0aW5nczxUPihzZXR0aW5nczogVCk6IHN0cmluZ1xyXG57XHJcbiAgICBsZXQgcGFja19zdHIgPSBcIlwiO1xyXG4gICAgbGV0IGtleToga2V5b2YgVDtcclxuICAgIGZvciAoa2V5IGluIHNldHRpbmdzKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChTRVRUSU5HX05BTUUuaGFzKFN0cmluZyhrZXkpKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhY2tfc3RyID0gcGFja19zdHIgKyBTdHJpbmcoa2V5KSArIFwiOlwiICsgU3RyaW5nKHNldHRpbmdzW2tleV0pICsgXCJcXG5cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFja19zdHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBVbnBhY2tTZXR0aW5nczxUPihzZXR0aW5nczogVCwgbGluZXM6IHN0cmluZ1tdKVxyXG57XHJcbiAgICBsaW5lcy5mb3JFYWNoKChsaW5lLCBpZHgpID0+IHtcclxuICAgICAgICBjb25zdCBzdHJzID0gbGluZS5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgaWYgKFNFVFRJTkdfTkFNRS5oYXMoc3Ryc1swXSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBTZXRTZXR0aW5nVmFsdWUoc2V0dGluZ3MsIHN0cnNbMF0gYXMga2V5b2YgVCwgc3Ryc1sxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHZXRTZXR0aW5nVmFsdWU8VD4oc2V0dGluZ3M6IFQsIGtleToga2V5b2YgVClcclxue1xyXG4gICAgcmV0dXJuIHNldHRpbmdzW2tleV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTZXRTZXR0aW5nVmFsdWU8VCwgVlQ+KHNldHRpbmdzOiBULCBrZXk6IGtleW9mIFQsIHZhbHVlOiBWVClcclxue1xyXG4gICAgaWYgKGtleSBpbiBzZXR0aW5ncylcclxuICAgIHtcclxuICAgICAgICBzZXR0aW5nc1trZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFx1NjNEMlx1NEVGNlx1OTE0RFx1N0Y2RVxyXG5leHBvcnQgY2xhc3MgUGx1Z2luQmFzZVNldHRpbmdzXHJcbntcclxuICAgIERBVEFfQVBJX0xJQ0VOQ0U6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU1MTREXHU4RDM5XHU5RUQ4XHU4QkE0TGljZW5zZVxyXG4gICAgICAgIHRoaXMuREFUQV9BUElfTElDRU5DRSA9IFwiMTEyZTg0NjU2MTc0ZjBhNVwiO1xyXG4gICAgICAgIC8vIFx1NEUyQVx1NEVCQVx1NEVEOFx1OEQzOUxpY2Vuc2VcclxuICAgICAgICB0aGlzLkRBVEFfQVBJX0xJQ0VOQ0UgPSBcImIxOTJmNTNhNmQ2OTI4MDMzXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyBcdTdGNTFcdTY4M0NcdTkxNERcdTdGNkVcclxuZXhwb3J0IGNsYXNzIEdyaWRUcmFkaW5nU2V0dGluZ3Mge1xyXG4gICAgT05FX0dSSURfTElNSVQ6IG51bWJlcjtcclxuICAgIE1BWF9TTFVNUF9QQ1Q6IG51bWJlcjtcclxuICAgIFRSSUdHRVJfQUREX1BPSU5UOiBudW1iZXI7XHJcbiAgICBUUkFESU5HX1BSSUNFX1BSRUNJU0lPTjogbnVtYmVyO1xyXG4gICAgTUlOX0JBVENIX0NPVU5UOiBudW1iZXI7XHJcbiAgICBNQVhfUklTRV9QQ1Q6IG51bWJlcjtcclxuICAgIE1JTklNVU1fQlVZX1BDVDogbnVtYmVyO1xyXG4gICAgQ0xFQVJfU1RFUF9QQ1Q6IG51bWJlcjtcclxuICAgIEJPVFRPTV9CVVlfUENUOiBudW1iZXI7XHJcblxyXG4gICAgU0dSSURfU1RFUF9QQ1Q6IG51bWJlcjtcclxuICAgIFNHUklEX0FERF9QQ1Q6IG51bWJlcjtcclxuICAgIFNHUklEX1JFVEFJTl9DT1VOVDogbnVtYmVyO1xyXG5cclxuICAgIE1HUklEX1NURVBfUENUOiBudW1iZXI7XHJcbiAgICBNR1JJRF9BRERfUENUOiBudW1iZXI7XHJcbiAgICBNR1JJRF9SRVRBSU5fQ09VTlQ6IG51bWJlcjtcclxuXHJcbiAgICBMR1JJRF9TVEVQX1BDVDogbnVtYmVyO1xyXG4gICAgTEdSSURfQUREX1BDVDogbnVtYmVyO1xyXG4gICAgTEdSSURfUkVUQUlOX0NPVU5UOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFx1NjMwOVx1NzE2N1x1OUVEOFx1OEJBNFx1NTNDMlx1NjU3MFx1NTAzQ1x1NTIxRFx1NTlDQlx1NTMxNlxyXG4gICAgICAgIHRoaXMuT05FX0dSSURfTElNSVQgPSAxMDAwMDtcclxuICAgICAgICB0aGlzLk1BWF9TTFVNUF9QQ1QgPSAwLjY3O1xyXG4gICAgICAgIHRoaXMuVFJJR0dFUl9BRERfUE9JTlQgPSAwLjAwNTtcclxuICAgICAgICB0aGlzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OID0gMztcclxuICAgICAgICB0aGlzLk1JTl9CQVRDSF9DT1VOVCA9IDEwMDtcclxuICAgICAgICB0aGlzLk1BWF9SSVNFX1BDVCA9IDAuMTtcclxuICAgICAgICB0aGlzLkNMRUFSX1NURVBfUENUID0gMC4yNTtcclxuICAgICAgICB0aGlzLk1JTklNVU1fQlVZX1BDVCA9IDAuMTtcclxuICAgICAgICB0aGlzLkJPVFRPTV9CVVlfUENUID0gMC4yXHJcbiAgICBcclxuICAgICAgICB0aGlzLlNHUklEX1NURVBfUENUID0gMC4wNTtcclxuICAgICAgICB0aGlzLlNHUklEX0FERF9QQ1QgPSAwLjA1O1xyXG4gICAgICAgIHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UID0gNDtcclxuXHJcbiAgICAgICAgdGhpcy5NR1JJRF9TVEVQX1BDVCA9IDAuMjI7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9BRERfUENUID0gMC4yO1xyXG4gICAgICAgIHRoaXMuTUdSSURfUkVUQUlOX0NPVU5UID0gMjtcclxuXHJcbiAgICAgICAgdGhpcy5MR1JJRF9TVEVQX1BDVCA9IDAuNTI7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9BRERfUENUID0gMC41O1xyXG4gICAgICAgIHRoaXMuTEdSSURfUkVUQUlOX0NPVU5UID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBDbG9uZSgpOiBHcmlkVHJhZGluZ1NldHRpbmdzXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgR3JpZFRyYWRpbmdTZXR0aW5ncygpO1xyXG4gICAgICAgIGNsb25lLk9ORV9HUklEX0xJTUlUID0gdGhpcy5PTkVfR1JJRF9MSU1JVDtcclxuICAgICAgICBjbG9uZS5NQVhfU0xVTVBfUENUID0gdGhpcy5NQVhfU0xVTVBfUENUO1xyXG4gICAgICAgIGNsb25lLlRSSUdHRVJfQUREX1BPSU5UID0gdGhpcy5UUklHR0VSX0FERF9QT0lOVDtcclxuICAgICAgICBjbG9uZS5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiA9IHRoaXMuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY2xvbmUuTUlOX0JBVENIX0NPVU5UID0gdGhpcy5NSU5fQkFUQ0hfQ09VTlQ7XHJcbiAgICAgICAgY2xvbmUuTUFYX1JJU0VfUENUID0gdGhpcy5NQVhfUklTRV9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuQ0xFQVJfU1RFUF9QQ1QgPSB0aGlzLkNMRUFSX1NURVBfUENUO1xyXG4gICAgICAgIGNsb25lLk1JTklNVU1fQlVZX1BDVCA9IHRoaXMuTUlOSU1VTV9CVVlfUENUO1xyXG4gICAgICAgIGNsb25lLkJPVFRPTV9CVVlfUENUID0gdGhpcy5CT1RUT01fQlVZX1BDVDtcclxuICAgIFxyXG4gICAgICAgIGNsb25lLlNHUklEX1NURVBfUENUID0gdGhpcy5TR1JJRF9TVEVQX1BDVDtcclxuICAgICAgICBjbG9uZS5TR1JJRF9BRERfUENUID0gdGhpcy5TR1JJRF9BRERfUENUO1xyXG4gICAgICAgIGNsb25lLlNHUklEX1JFVEFJTl9DT1VOVCA9IHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UO1xyXG4gICAgXHJcbiAgICAgICAgY2xvbmUuTUdSSURfU1RFUF9QQ1QgPSB0aGlzLk1HUklEX1NURVBfUENUO1xyXG4gICAgICAgIGNsb25lLk1HUklEX0FERF9QQ1QgPSB0aGlzLk1HUklEX0FERF9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuTUdSSURfUkVUQUlOX0NPVU5UID0gdGhpcy5NR1JJRF9SRVRBSU5fQ09VTlQ7XHJcbiAgICBcclxuICAgICAgICBjbG9uZS5MR1JJRF9TVEVQX1BDVCA9IHRoaXMuTEdSSURfU1RFUF9QQ1Q7XHJcbiAgICAgICAgY2xvbmUuTEdSSURfQUREX1BDVCA9IHRoaXMuTEdSSURfQUREX1BDVDtcclxuICAgICAgICBjbG9uZS5MR1JJRF9SRVRBSU5fQ09VTlQgPSB0aGlzLkxHUklEX1JFVEFJTl9DT1VOVDtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja0Jhc2UoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZyA9IFtcIkJBU0VcIiwgU3RyaW5nKHRoaXMuT05FX0dSSURfTElNSVQpLCBTdHJpbmcodGhpcy5NQVhfU0xVTVBfUENUKSwgU3RyaW5nKHRoaXMuVFJJR0dFUl9BRERfUE9JTlQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmcodGhpcy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiksIFN0cmluZyh0aGlzLk1JTl9CQVRDSF9DT1VOVCksIFN0cmluZyh0aGlzLk1BWF9SSVNFX1BDVCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyh0aGlzLkNMRUFSX1NURVBfUENUKSwgU3RyaW5nKHRoaXMuTUlOSU1VTV9CVVlfUENUKSwgU3RyaW5nKHRoaXMuQk9UVE9NX0JVWV9QQ1QpXVxyXG4gICAgICAgIHJldHVybiBzZXR0aW5nLmpvaW4oXCIsXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIFVucGFja0Jhc2Uoc3Ryczogc3RyaW5nW10pXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHN0cnMubGVuZ3RoIDwgMTApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuT05FX0dSSURfTElNSVQgPSBOdW1iZXIoc3Ryc1sxXSk7XHJcbiAgICAgICAgdGhpcy5NQVhfU0xVTVBfUENUID0gTnVtYmVyKHN0cnNbMl0pO1xyXG4gICAgICAgIHRoaXMuVFJJR0dFUl9BRERfUE9JTlQgPSBOdW1iZXIoc3Ryc1szXSk7XHJcbiAgICAgICAgdGhpcy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTiA9IE51bWJlcihzdHJzWzRdKTtcclxuICAgICAgICB0aGlzLk1JTl9CQVRDSF9DT1VOVCA9IE51bWJlcihzdHJzWzVdKTtcclxuICAgICAgICB0aGlzLk1BWF9SSVNFX1BDVCA9IE51bWJlcihzdHJzWzZdKTtcclxuICAgICAgICB0aGlzLkNMRUFSX1NURVBfUENUID0gTnVtYmVyKHN0cnNbN10pO1xyXG4gICAgICAgIHRoaXMuTUlOSU1VTV9CVVlfUENUID0gTnVtYmVyKHN0cnNbOF0pO1xyXG4gICAgICAgIHRoaXMuQk9UVE9NX0JVWV9QQ1QgPSBOdW1iZXIoc3Ryc1s5XSk7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja1N0ZXAoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZyA9IFtcIlNURVBcIiwgU3RyaW5nKHRoaXMuU0dSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5TR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuU0dSSURfUkVUQUlOX0NPVU5UKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRoaXMuTUdSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5NR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuTUdSSURfUkVUQUlOX0NPVU5UKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRoaXMuTEdSSURfU1RFUF9QQ1QpLCBTdHJpbmcodGhpcy5MR1JJRF9BRERfUENUKSwgU3RyaW5nKHRoaXMuTEdSSURfUkVUQUlOX0NPVU5UKV1cclxuICAgICAgICByZXR1cm4gc2V0dGluZy5qb2luKFwiLFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBVbnBhY2tTdGVwKHN0cnM6IHN0cmluZ1tdKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChzdHJzLmxlbmd0aCAhPSAxMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5TR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzFdKTtcclxuICAgICAgICB0aGlzLlNHUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1syXSk7XHJcbiAgICAgICAgdGhpcy5TR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1szXSk7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzRdKTtcclxuICAgICAgICB0aGlzLk1HUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1s1XSk7XHJcbiAgICAgICAgdGhpcy5NR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1s2XSk7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9TVEVQX1BDVCA9IE51bWJlcihzdHJzWzddKTtcclxuICAgICAgICB0aGlzLkxHUklEX0FERF9QQ1QgPSBOdW1iZXIoc3Ryc1s4XSk7XHJcbiAgICAgICAgdGhpcy5MR1JJRF9SRVRBSU5fQ09VTlQgPSBOdW1iZXIoc3Ryc1s5XSk7XHJcbiAgICB9XHJcblxyXG4gICAgUGFja1F1YW50KCk6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmcgPSBbXCJRVUFOVFwiLCBdXHJcblxyXG4gICAgICAgIHJldHVybiBzZXR0aW5nLmpvaW4oXCIsXCIpXHJcbiAgICB9XHJcblxyXG4gICAgVW5wYWNrUXVhbnQoc3Ryczogc3RyaW5nIFtdKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxufVxyXG4iLCAiLypcclxuICAgIFx1NjU3MFx1NjM2RVx1Njc2NVx1NkU5MDogXHU1RkM1XHU3NkM4XHU2NTcwXHU2MzZFKGh0dHBzOi8vYWQuYml5aW5nYXBpLmNvbS9hcGlkb2MuaHRtbClcclxuICAgIFx1NjU3MFx1NjM2RVx1ODMwM1x1NTZGNDpcclxuICAgICAgICBcdTZDQUFcdTZERjFcdTU3RkFcdTc4NDBcdTY1NzBcdTYzNkU6IFx1ODBBMVx1Nzk2OFx1NTIxN1x1ODg2OFx1MzAwMVx1NTE2Q1x1NTNGOFx1OEJFNlx1NjBDNVx1MzAwMVx1NUI5RVx1NjVGNlx1NEVBNFx1NjYxM1x1MzAwMVx1NTM4Nlx1NTNGMlx1NjU3MFx1NjM2RVx1MzAwMVx1NkRBOFx1OERDQ1x1ODBBMVx1NkM2MFx1MzAwMVx1OEQ0NFx1OTFEMVx1NkQ0MVx1NTQxMVx1N0I0OTYwXHU0RjU5XHU0RTJBXHU0RTBEXHU1NDBDXHU3QzdCXHU1NzhCXHU3Njg0XHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzXHJcbiAgICAgICAgXHU2Q0FBXHU2REYxXHU2REYxXHU1RUE2XHU2NTcwXHU2MzZFOiBcdTYyOTVcdThENDRcdTUzQzJcdTgwMDNcdTMwMDFcdTlGOTlcdTg2NEVcdTY5OUNcdTMwMDFcdTVFMDJcdTU3M0FcdTg4NjhcdTczQjBcdTMwMDFcdThEMjJcdTUyQTFcdTUyMDZcdTY3OTBcdTMwMDFcdTY3M0FcdTY3ODRcdTYzMDFcdTgwQTFcdTMwMDFcdThENDRcdTkxRDFcdTZENDFcdTdCNDk4MFx1NEY1OVx1NEUyQVx1NTQxMVx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgICAgIFx1NkNBQVx1NkRGMVx1NjMwN1x1NjU3MFx1NjU3MFx1NjM2RTogXHU2Q0FBXHU2REYxXHU2MzA3XHU2NTcwXHU1MjE3XHU4ODY4XHUzMDAxXHU1QjlFXHU2NUY2XHU0RUE0XHU2NjEzXHUzMDAxXHU1Mzg2XHU1M0YyXHU2NTcwXHU2MzZFXHUzMDAxXHU1MjA2XHU2NUY2S0RKXHUzMDAxXHU1MjA2XHU2NUY2TUFDRFx1MzAwMVx1NTIwNlx1NjVGNkJPTExcdTdCNDkxNlx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgICAgIFx1NTdGQVx1OTFEMVx1ODg0Q1x1NjBDNVx1NjU3MFx1NjM2RTogXHU1N0ZBXHU5MUQxXHU1MjE3XHU4ODY4XHUzMDAxXHU0RjMwXHU1MDNDXHU4ODRDXHU2MEM1XHUzMDAxXHU2NzAwXHU2NUIwS1x1N0VCRlx1MzAwMVx1NTM4Nlx1NTNGMktcdTdFQkZcdTMwMDFcdThENDRcdTRFQTdcdThEMUZcdTUwM0FcdTg4NjhcdTMwMDFcdTY4NjNcdTY4NDhcdTRGRTFcdTYwNkZcdTdCNDk3MFx1NEY1OVx1NEUyQVx1NEUwRFx1NTQwQ1x1N0M3Qlx1NTc4Qlx1NzY4NFx1NjU3MFx1NjM2RVx1NjNBNVx1NTNFM1xyXG4gICAgXHU2NTcwXHU2MzZFXHU2M0E1XHU1M0UzOlxyXG4gICAgICAgIEVURlx1NTdGQVx1OTFEMVx1ODg0Q1x1NjBDNVxyXG4gICAgICAgICAgICBBUElcdTYzQTVcdTUzRTNcdUZGMUFodHRwczovL2FwaS5iaXlpbmdhcGkuY29tL2pqL2V0ZmhxL0VURlx1NTdGQVx1OTFEMVx1NEVFM1x1NzgwMS9cdTYwQThcdTc2ODRsaWNlbmNlXHJcbiAgICAgICAgICAgIFx1NTkwN1x1NzUyOFx1NjNBNVx1NTNFM1x1RkYxQWh0dHBzOi8vYXBpMS5iaXlpbmdhcGkuY29tL2pqL2V0ZmhxL0VURlx1NTdGQVx1OTFEMVx1NEVFM1x1NzgwMS9cdTYwQThcdTc2ODRsaWNlbmNlXHJcbiAgICAgICAgTE9GXHU1N0ZBXHU5MUQxXHU4ODRDXHU2MEM1XHJcbiAgICAgICAgICAgIEFQSVx1NjNBNVx1NTNFM1x1RkYxQWh0dHBzOi8vYXBpLmJpeWluZ2FwaS5jb20vamovbG9maHEvTE9GXHU1N0ZBXHU5MUQxXHU0RUUzXHU3ODAxL1x1NjBBOFx1NzY4NGxpY2VuY2VcclxuICAgICAgICAgICAgXHU1OTA3XHU3NTI4XHU2M0E1XHU1M0UzXHVGRjFBaHR0cHM6Ly9hcGkxLmJpeWluZ2FwaS5jb20vamovbG9maHEvTE9GXHU1N0ZBXHU5MUQxXHU0RUUzXHU3ODAxL1x1NjBBOFx1NzY4NGxpY2VuY2VcclxuKi9cclxuaW1wb3J0IHsgTm90aWNlLCByZXF1ZXN0VXJsIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5jb25zdCBkYXRhX3VybF9wcmVmaXggPSBcImh0dHA6Ly9hcGkuYml5aW5nYXBpLmNvbVwiO1xyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIEZldGNoRGF0YShkYXRhX2FwaTogc3RyaW5nLCBhcGlfbGljZW5jZTogc3RyaW5nLCBkZWJ1Z19sb2c6IHN0cmluZ1tdW10pXHJcbntcclxuICAgIGNvbnN0IHVybCA9IGRhdGFfdXJsX3ByZWZpeCArIGRhdGFfYXBpICsgXCIvXCIgKyBhcGlfbGljZW5jZTtcclxuICAgIGRlYnVnX2xvZy5wdXNoKFtcIkluZm9cIiwgXCJmdWxsIHVybFwiLCB1cmxdKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh1cmwpO1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb247XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHZXRFVEZDdXJyZW50UHJpY2UoZXRmX2NvZGU6IHN0cmluZywgYXBpX2xpY2VuY2U6IHN0cmluZywgcmV0cnlfY291bnQgPSAzKVxyXG57XHJcbiAgICBpZiAoIShldGZfY29kZS5zdGFydHNXaXRoKFwic3pcIikgfHwgZXRmX2NvZGUuc3RhcnRzV2l0aChcInNoXCIpKSlcclxuICAgIHtcclxuICAgICAgICAvLyBcdTk3NUVzei9zaFx1NUUwMlx1NTczQVx1NzY4NEVURlx1NEVGN1x1NjgzQ1x1NjVFMFx1NkNENVx1ODFFQVx1NTJBOFx1ODNCN1x1NTNENlxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGFfYXBpID0gZGF0YV91cmxfcHJlZml4ICsgXCIvamovZXRmaHEvXCIgKyBldGZfY29kZSArIFwiL1wiICsgYXBpX2xpY2VuY2U7XHJcbiAgICAvL0RlYnVnTG9nKFwicmVxdWVzdCB1cmw6IFwiLCBkYXRhX2FwaSk7XHJcblxyXG4gICAgd2hpbGUgKHJldHJ5X2NvdW50ID49IDApXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwoZGF0YV9hcGkpO1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGV0Zl9jb2RlLCBcIiAgcmVzdWx0IFwiLCByZXNwb25zZS5qc29uW1wienhqXCJdKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb25bXCJ6eGpcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGRhdGFfYXBpLCBcIiAgZXJyb3IgXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDMwICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHJ5X2NvdW50ID0gcmV0cnlfY291bnQgLSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR2V0TE9GQ3VycmVudFByaWNlKGxvZl9jb2RlOiBzdHJpbmcsIGFwaV9saWNlbmNlOiBzdHJpbmcsIHJldHJ5X2NvdW50ID0gMylcclxue1xyXG4gICAgaWYgKCEobG9mX2NvZGUuc3RhcnRzV2l0aChcInN6XCIpIHx8IGxvZl9jb2RlLnN0YXJ0c1dpdGgoXCJzaFwiKSkpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gXHU5NzVFc3ovc2hcdTVFMDJcdTU3M0FcdTc2ODRMT0ZcdTRFRjdcdTY4M0NcdTY1RTBcdTZDRDVcdTgxRUFcdTUyQThcdTgzQjdcdTUzRDZcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhX2FwaSA9IGRhdGFfdXJsX3ByZWZpeCArIFwiL2pqL2xvZmhxL1wiICsgbG9mX2NvZGUgKyBcIi9cIiArIGFwaV9saWNlbmNlO1xyXG4gICAgLy9EZWJ1Z0xvZyhcInJlcXVlc3QgdXJsOiBcIiwgZGF0YV9hcGkpO1xyXG4gICAgd2hpbGUgKHJldHJ5X2NvdW50ID49IDApXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwoZGF0YV9hcGkpO1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGxvZl9jb2RlLCBcIiAgcmVzdWx0IFwiLCByZXNwb25zZS5qc29uW1wienhqXCJdKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb25bXCJ6eGpcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEZWJ1Z0xvZyhcInJlcXVlc3QgXCIsIGRhdGFfYXBpLCBcIiAgZXJyb3IgXCIsIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDMwICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRGVidWdMb2coLi4uYXJncylcclxue1xyXG4gICAgbGV0IGxvZ19zdHIgPSBcIlwiO1xyXG4gICAgYXJncy5mb3JFYWNoKChjZWxsLCBpKSA9PiB7XHJcbiAgICAgICAgbG9nX3N0ciA9IGxvZ19zdHIgKyBTdHJpbmcoY2VsbCk7XHJcbiAgICB9KTtcclxuICAgIG5ldyBOb3RpY2UobG9nX3N0cik7XHJcbn1cclxuIiwgIi8qXHJcbiAgICBHcmlkIFRyYWRpbmcgVmlld1xyXG4gICAgXHU3RjUxXHU2ODNDXHU3QjU2XHU3NTY1XHU3Njg0XHU1MTc3XHU0RjUzXHU2ODA3XHU3Njg0XHU1QzU1XHU3OTNBXHU4OUM2XHU1NkZFXHJcbiovXHJcblxyXG5pbXBvcnQgeyBUZXh0RmlsZVZpZXcsIFdvcmtzcGFjZUxlYWYgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmcgfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52LCBGRVRDSF9DVVJSRU5UX1BSSUNFIH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBHUklEX0NPTE9SX0JVWV9NT05JVE9SLCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQsIEdSSURfQ09MT1JfRElTQUJMRSwgR1JJRF9DT0xPUl9TRUxMX01PTklUT1IsIEdSSURfQ09MT1JfU0VMTF9UUklHR0VSRUQgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xvZyB9IGZyb20gXCIuL3JlbW90ZV91dGlsXCI7XHJcbmltcG9ydCB7IEV4Y3V0ZUdyaWRDb21tYW5kIH0gZnJvbSBcIi4vY29tbWFuZF91dGlsXCI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9HVFYgPSBcImd0di12aWV3XCJcclxuXHJcbmV4cG9ydCBjbGFzcyBHVFZWaWV3IGV4dGVuZHMgVGV4dEZpbGVWaWV3XHJcbntcclxuICAgIGRhdGE6IHN0cmluZztcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuICAgIHJlZnJlc2hfZXZlbnRfZ3VpZDogbnVtYmVyO1xyXG4gICAgdmlld19ndWlkOiBudW1iZXI7XHJcblxyXG4gICAgc3RvY2tfdGlsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBzdG9ja190YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwYXJhbV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwYXJhbV90YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICB0cmFkaW5nX3RpdGxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIHRyYWRpbmdfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgaG9sZGluZ190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBob2xkaW5nX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGluY29tZV90aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBpbmNvbWVfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgYW5hbHlzaXNfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgYW5hbHlzaXNfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgcmVjb3JkX3RpdGxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIHJlY29yZF90YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBhZGp1c3RfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgYWRqdXN0X3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGRlYnVnX2xvZ190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBkZWJ1Z19sb2dfdGFibGVfZWw6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIGNvbW1hbmRfdGV4dF9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBjb21tYW5kX2lucHV0X2VsOiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgY29tbWFuZF9idG5fZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgY29tbWFuZF9saXN0X2VsOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW5fZW52OiBQbHVnaW5FbnYpXHJcbiAgICB7XHJcbiAgICAgICAgc3VwZXIobGVhZik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5fZW52ID0gcGx1Z2luX2VudjtcclxuICAgICAgICB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA9IC0xO1xyXG4gICAgICAgIHRoaXMudmlld19ndWlkID0gcGx1Z2luX2Vudi5HZW5HVUlEKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Vmlld0RhdGEoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRWaWV3RGF0YShkYXRhOiBzdHJpbmcsIGNsZWFyOiBib29sZWFuKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5SZWZyZXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9HVFY7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IFxyXG4gICAge1xyXG4gICAgICAgIGxldCBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRfYnRuX2VsID0gZGl2LmNyZWF0ZUVsKFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZF9idG5fZWwuc2V0VGV4dChcIkV4Y3V0ZVwiKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRfYnRuX2VsLm9uQ2xpY2tFdmVudCgoZXY6IE1vdXNlRXZlbnQpID0+IHt0aGlzLk9uQ2xpY2tBZGRSZWNvcmRCdG4oZXYsIHRoaXMuY29tbWFuZF9pbnB1dF9lbCl9KTtcclxuXHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2lucHV0X2VsID0gZGl2LmNyZWF0ZUVsKFwiaW5wdXRcIik7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2lucHV0X2VsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kX2lucHV0X2VsLnNpemUgPSA3MDtcclxuICAgICAgICB0aGlzLmNvbW1hbmRfaW5wdXRfZWwucGxhY2Vob2xkZXIgPSBcIklucHV0IHlvdXIgY29tbWFuZFwiXHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfdGlsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5wYXJhbV90aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMucGFyYW1fdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpXHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5hbmFseXNpc190aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuYW5hbHlzaXNfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKVxyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLnJlY29yZF90aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMucmVjb3JkX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcbiAgXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5hZGp1c3RfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmFkanVzdF90YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKVxyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2dfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoX2V2ZW50X2d1aWQgPSB0aGlzLnBsdWdpbl9lbnYuU3Vic2NyaWJlRXZlbnQoRkVUQ0hfQ1VSUkVOVF9QUklDRSwgKCk9PnRoaXMuUmVmcmVzaCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBPbkNsaWNrQWRkUmVjb3JkQnRuKGV2OiBNb3VzZUV2ZW50LCBpbnB1dF9lbDogSFRNTEVsZW1lbnQpXHJcbiAgICB7XHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gaW5wdXRfZWwudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyaWRfY21kID0gRXhjdXRlR3JpZENvbW1hbmQodGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChncmlkX2NtZC5lcnJvcl9jb2RlID09IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChncmlkX2NtZC5jb21tYW5kID09IFwiYWRkX3JlY29yZFwiKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuZGF0YSArIGdyaWRfY21kLmRhdGFfcmVzdWx0X3N0cjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdEYXRhKHRoaXMuZGF0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGdyaWRfY21kLmNvbW1hbmQgPT0gXCJkZWxfcmVjb3JkXCIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLmRhdGEuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXg9MDsgaW5kZXggPCBsaW5lcy5sZW5ndGg7IGluZGV4KyspXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXNbaW5kZXhdLnN0YXJ0c1dpdGgoXCJCVVksXCIpIHx8IGxpbmVzW2luZGV4XS5zdGFydHNXaXRoKFwiU0VMTCxcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09IGdyaWRfY21kLmRhdGFfcmVzdWx0X251bSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbGluZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gbGluZXMuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZpZXdEYXRhKHRoaXMuZGF0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRGVidWdMb2coXCJDb21tYW5kIGhhcyBlcnJvciBcIiwgZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBhc3luYyBvbkNsb3NlKCk6IFByb21pc2U8dm9pZD5cclxuICAgIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuVW5zdWJzY3JpYmVFdmVudChGRVRDSF9DVVJSRU5UX1BSSUNFLCB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaF9ldmVudF9ndWlkID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFJlZnJlc2goKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFx1NTIxRFx1NTlDQlx1NTMxNlx1NjgwN1x1OTg5OFx1NEUwRVx1ODg2OFx1NjgzQ1xyXG4gICAgICAgIHRoaXMuc3RvY2tfdGlsZV9lbC5zZXRUZXh0KFwiXHU2NzJBXHU3N0U1XHU2ODA3XHU3Njg0XCIpO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLnBhcmFtX3RpdGxlX2VsLnNldFRleHQoXCJcdTdGNTFcdTY4M0NcdTUzQzJcdTY1NzBcIik7XHJcbiAgICAgICAgdGhpcy5wYXJhbV90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ190aXRsZV9lbC5zZXRUZXh0KFwiXHU0RUE0XHU2NjEzXHU3RjUxXHU2ODNDXCIpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190aXRsZV9lbC5zZXRUZXh0KFwiXHU2MzAxXHU0RUQzXHU1MjA2XHU2NzkwXCIpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX3RpdGxlX2VsLnNldFRleHQoXCJcdTY1MzZcdTc2Q0FcdTUyMDZcdTY3OTBcIik7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLmFuYWx5c2lzX3RpdGxlX2VsLnNldFRleHQoXCJcdTU2REVcdTY0QTRcdTUyMDZcdTY3OTBcIik7XHJcbiAgICAgICAgdGhpcy5hbmFseXNpc190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMucmVjb3JkX3RpdGxlX2VsLnNldFRleHQoXCJcdTRFQTRcdTY2MTNcdThCQjBcdTVGNTVcIik7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLmFkanVzdF90aXRsZV9lbC5zZXRUZXh0KFwiXHU4QzAzXHU2NTc0XHU4QkIwXHU1RjU1XCIpO1xyXG4gICAgICAgIHRoaXMuYWRqdXN0X3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgLy8gdGhpcy5kZWJ1Z19sb2dfdGl0bGVfZWwuc2V0VGV4dChcIlx1OEMwM1x1OEJENVx1NjVFNVx1NUZEN1wiKTtcclxuICAgICAgICAvLyB0aGlzLmRlYnVnX2xvZ190YWJsZV9lbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5maWxlICE9IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBtb2RlX3N0ciA9IHRoaXMuZGF0YS5zcGxpdChcIlxcblwiKVswXS5zcGxpdChcIixcIilbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGdyaWRfdHJhZGluZyA9IHRoaXMucGx1Z2luX2Vudi5HZXRBbmRHZW5HcmlkVHJhZGluZyh0aGlzLmZpbGUubmFtZSwgbW9kZV9zdHIpO1xyXG4gICAgICAgICAgICBncmlkX3RyYWRpbmcuSW5pdEdyaWRUcmFkaW5nKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIFx1NjgwN1x1NzY4NFx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICB0aGlzLnN0b2NrX3RpbGVfZWwuc2V0VGV4dChncmlkX3RyYWRpbmcuc3RvY2tfbmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKGdyaWRfdHJhZGluZywgdGhpcy5zdG9ja190YWJsZV9lbCwgZ3JpZF90cmFkaW5nLnN0b2NrX3RhYmxlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIFx1N0Y1MVx1NjgzQ1x1NTNDMlx1NjU3MFxyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMucGFyYW1fdGFibGVfZWwsIGdyaWRfdHJhZGluZy5wYXJhbV90YWJsZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBcdTRFQTRcdTY2MTNcdTdGNTFcdTY4M0NcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUoZ3JpZF90cmFkaW5nLCB0aGlzLnRyYWRpbmdfdGFibGVfZWwsIGdyaWRfdHJhZGluZy50cmFkaW5nX3RhYmxlLCB0cnVlKTtcclxuICAgICAgICAgICAgLy8gXHU2MzAxXHU0RUQzXHU1MjA2XHU2NzkwXHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKGdyaWRfdHJhZGluZywgdGhpcy5ob2xkaW5nX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcuaG9sZGluZ19hbmFseXNpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAvLyBcdTY1MzZcdTc2Q0FcdTUyMDZcdTY3OTBcclxuICAgICAgICAgICAgdGhpcy5EaXNwbGF5VGFibGUoZ3JpZF90cmFkaW5nLCB0aGlzLmluY29tZV90YWJsZV9lbCwgZ3JpZF90cmFkaW5nLnRyYWRpbmdfaW5jb21lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIFx1NTZERVx1NjRBNFx1NTIwNlx1Njc5MFxyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMuYW5hbHlzaXNfdGFibGVfZWwsIGdyaWRfdHJhZGluZy50cmFkaW5nX2FuYWx5c2lzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIFx1NEVBNFx1NjYxM1x1OEJCMFx1NUY1NVxyXG4gICAgICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMucmVjb3JkX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcudHJhZGluZ19yZWNvcmQsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gXHU4QzAzXHU2NTc0XHU4QkIwXHU1RjU1XHJcbiAgICAgICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKGdyaWRfdHJhZGluZywgdGhpcy5hZGp1c3RfdGFibGVfZWwsIGdyaWRfdHJhZGluZy5hZGp1c3RfcmVjb3JkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIC8vIFx1OEMwM1x1OEJENVx1NEZFMVx1NjA2RlxyXG4gICAgICAgICAgICAvLyB0aGlzLkRpc3BsYXlUYWJsZShncmlkX3RyYWRpbmcsIHRoaXMuZGVidWdfbG9nX3RhYmxlX2VsLCBncmlkX3RyYWRpbmcuZGVidWdfbG9nLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIERpc3BsYXlUYWJsZShncmlkX3RyYWRpbmc6IEdyaWRUcmFkaW5nLCB0YWJsZV9lbDogSFRNTEVsZW1lbnQsIHRhYmxlOiBzdHJpbmdbXVtdLCBpc19jb2xvcjogYm9vbGVhbilcclxuICAgIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZV9ib2R5ID0gdGFibGVfZWwuY3JlYXRlRWwoXCJ0Ym9keVwiKTtcclxuICAgICAgICAgICAgdGFibGUuZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJsZV9yb3cgPSB0YWJsZV9ib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoY2VsbCwgaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYmxlX2NlbGwgPSB0YWJsZV9yb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IGNlbGwsIGF0dHI6IHtcImFsaWduXCI6IFwicmlnaHRcIn19KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNfY29sb3IgJiYgaSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChqID09IDAgJiYgZ3JpZF90cmFkaW5nLmRpc2FibGVfcm93cy5pbmNsdWRlcyhpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHRhYmxlX2NlbGwuc2V0QXR0cihcImJnQ29sb3JcIiwgR1JJRF9DT0xPUl9ESVNBQkxFKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqIDw9NSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWRfdHJhZGluZy5idXlfdHJpZ2dlcmVkX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX0JVWV9UUklHR0VSRUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyaWRfdHJhZGluZy5idXlfbW9uaXRvcl9yb3dzLmluY2x1ZGVzKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlX2NlbGwuc2V0QXR0cihcImJnQ29sb3JcIiwgR1JJRF9DT0xPUl9CVVlfTU9OSVRPUik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JpZF90cmFkaW5nLnNlbGxfdHJpZ2dlcmVkX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX1NFTExfVFJJR0dFUkVEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncmlkX3RyYWRpbmcuc2VsbF9tb25pdG9yX3Jvd3MuaW5jbHVkZXMoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfY2VsbC5zZXRBdHRyKFwiYmdDb2xvclwiLCBHUklEX0NPTE9SX1NFTExfTU9OSVRPUik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgRGVidWdMb2coXCJEaXNwbGF5VGFibGUgZXJyb3I6IFwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgIi8qXHJcbiAgICBteW1hdGg6IFx1N0Y1MVx1NjgzQ1x1NUI5QVx1NTIzNlx1NjU3MFx1NUI2Nlx1NUU5MywgXHU1QkY5XHU1MzlGXHU3NTFGXHU3Njg0TWF0aFx1NUU5M1x1OEZEQlx1ODg0Q1x1NUMwMVx1ODhDNVx1RkYwQ1x1NEY3Rlx1NUY5N1x1OEJBMVx1N0I5N1x1OTAzQlx1OEY5MVx1NjZGNFx1NTJBMFx1N0IyNlx1NTQwOFx1N0Y1MVx1NjgzQ1x1NEVBNFx1NjYxM1x1ODlDNFx1NTIxOVxyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEZpeGVkUHJpY2UocHJpY2U6IG51bWJlciwgcGN0OiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKVxyXG57XHJcbiAgICBjb25zdCBzY2FsZSA9IDEwICoqIHByZWNpc2lvbjtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGguZmxvb3IocHJpY2UgKiBzY2FsZSkgKiBNYXRoLmZsb29yKHBjdCAqIDEwMCkgLyAxMDApIC8gc2NhbGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBBbGlnblByaWNlKHByaWNlOiBudW1iZXIsIHByZWNpc2lvbjogbnVtYmVyKVxyXG57XHJcbiAgICBjb25zdCBzY2FsZSA9IDEwICoqIHByZWNpc2lvbjtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKHByaWNlICogc2NhbGUpIC8gc2NhbGU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBNeUZsb29yKG51bTogbnVtYmVyLCBzaW5nbGU6IG51bWJlcilcclxue1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobnVtIC8gc2luZ2xlKSAqIHNpbmdsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIE15Q2VpbChudW06IG51bWJlciwgc2luZ2xlOiBudW1iZXIpXHJcbntcclxuICAgIHJldHVybiBNYXRoLmNlaWwobnVtIC8gc2luZ2xlKSAqIHNpbmdsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRvUGVyY2VudChudW06IG51bWJlciwgY291bnQgPSAwKTogc3RyaW5nXHJcbntcclxuICAgIHJldHVybiAobnVtICogMTAwKS50b0ZpeGVkKGNvdW50KSArIFwiJVwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVG9QZXJjZW50U3RyKG51bTogbnVtYmVyLCBjb3VudCA9IDApOiBzdHJpbmdcclxue1xyXG4gICAgcmV0dXJuIG51bS50b0ZpeGVkKGNvdW50KSArIFwiJVwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVG9OdW1iZXIocGVyY2VudDogc3RyaW5nKTogbnVtYmVyXHJcbntcclxuICAgIHJldHVybiBOdW1iZXIocGVyY2VudC5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDAuMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRvVHJhZGluZ0dhcChjdXJyZW50X3ByaWNlOiBudW1iZXJ8dW5kZWZpbmVkLCB0YXJnZXRfcHJpY2U6IG51bWJlcnx1bmRlZmluZWQsIGNvdW50PTApOiBzdHJpbmdcclxue1xyXG4gICAgaWYgKHRhcmdldF9wcmljZSA9PSB1bmRlZmluZWQgfHwgY3VycmVudF9wcmljZSA9PSB1bmRlZmluZWQgfHwgY3VycmVudF9wcmljZSA9PSAwKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBcIi1cIjtcclxuICAgIH1cclxuICAgIGNvbnN0IGdhcCA9IE1hdGguYWJzKHRhcmdldF9wcmljZSAtIGN1cnJlbnRfcHJpY2UpO1xyXG4gICAgaWYgKHRhcmdldF9wcmljZSA+IGN1cnJlbnRfcHJpY2UpXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFwiK1wiICsgVG9QZXJjZW50KGdhcCAvIGN1cnJlbnRfcHJpY2UsIGNvdW50KTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gXCItXCIgKyBUb1BlcmNlbnQoZ2FwIC8gY3VycmVudF9wcmljZSwgY291bnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSXNOdW1lcmljKHN0cjogc3RyaW5nKTogYm9vbGVhblxyXG57XHJcbiAgICByZXR1cm4gIWlzTmFOKE51bWJlcihzdHIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVEdWFyaW9uKGRhdGVTdHIxOiBzdHJpbmcsIGRhdGVTdHIyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgLy8gXHU1MjFCXHU1RUZBRGF0ZVx1NUJGOVx1OEM2MVx1RkYwOFx1ODFFQVx1NTJBOFx1OEY2Q1x1NjM2Mlx1NEUzQVVUQ1x1NjVGNlx1OTVGNFx1RkYwOVxyXG4gICAgY29uc3QgZGF0ZTEgPSBuZXcgRGF0ZShkYXRlU3RyMSk7XHJcbiAgICBjb25zdCBkYXRlMiA9IG5ldyBEYXRlKGRhdGVTdHIyKTtcclxuXHJcbiAgICAvLyBcdTlBOENcdThCQzFcdTY1RTVcdTY3MUZcdTY3MDlcdTY1NDhcdTYwMjdcclxuICAgIGlmIChpc05hTihkYXRlMS5nZXRUaW1lKCkpIHx8IGlzTmFOKGRhdGUyLmdldFRpbWUoKSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcdThGOTNcdTUxNjVcdTc2ODRcdTY1RTVcdTY3MUZcdTY4M0NcdTVGMEZcdTRFMERcdTZCNjNcdTc4NkVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU4QkExXHU3Qjk3VVRDXHU1MzQ4XHU1OTFDXHU2NUY2XHU5NUY0XHU2MjMzXHU1REVFXHU1MDNDXHVGRjA4XHU5MDdGXHU1MTREXHU1OTBGXHU0RUU0XHU2NUY2XHU1RjcxXHU1NENEXHVGRjA5XHJcbiAgICBjb25zdCB1dGMxID0gRGF0ZS5VVEMoXHJcbiAgICAgICAgZGF0ZTEuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgICAgICBkYXRlMS5nZXRVVENNb250aCgpLFxyXG4gICAgICAgIGRhdGUxLmdldFVUQ0RhdGUoKVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHV0YzIgPSBEYXRlLlVUQyhcclxuICAgICAgICBkYXRlMi5nZXRVVENGdWxsWWVhcigpLFxyXG4gICAgICAgIGRhdGUyLmdldFVUQ01vbnRoKCksXHJcbiAgICAgICAgZGF0ZTIuZ2V0VVRDRGF0ZSgpXHJcbiAgICApO1xyXG5cclxuICAgIC8vIFx1OEJBMVx1N0I5N1x1NTkyOVx1NjU3MFx1NURFRVx1NUU3Nlx1OEZENFx1NTZERVxyXG4gICAgcmV0dXJuIE1hdGguYWJzKE1hdGguZmxvb3IoKHV0YzEgLSB1dGMyKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQXZlcmFnZVByaWNlU3RyKGNvc3Q6IG51bWJlciwgY291bnQ6IG51bWJlciwgc2luZ2xlOiBudW1iZXIpOiBzdHJpbmdcclxue1xyXG4gICAgaWYgKGNvdW50ID09IDApXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIGNvdW50LnRvRml4ZWQoc2luZ2xlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcoKGNvc3QgLyBjb3VudCkudG9GaXhlZChzaW5nbGUpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFN0cmluZ1BsdXMobnVtMTogc3RyaW5nLCBudW0yOiBzdHJpbmcsIHNpbmdsZTogbnVtYmVyKTogc3RyaW5nXHJcbntcclxuICAgIHJldHVybiBTdHJpbmcoTXlGbG9vcihOdW1iZXIobnVtMSkgKyBOdW1iZXIobnVtMiksIHNpbmdsZSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJvcG9ydGlvblBjdFN0cihjb3VudDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBzaW5nbGU6IG51bWJlcik6IHN0cmluZ1xyXG57XHJcbiAgICBpZiAodG90YWwgPT0gMClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdG90YWwudG9GaXhlZChzaW5nbGUpICsgXCIlXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKChjb3VudCAvIHRvdGFsICogMTAwKS50b0ZpeGVkKHNpbmdsZSkpICsgXCIlXCI7XHJcbn1cclxuIiwgIi8qXHJcbiAgICBcdTdGNTFcdTY4M0NcdTdCNTZcdTc1NjVcdTc2ODRcdThCQTFcdTdCOTdcdTkwM0JcdThGOTFcclxuICAgIFx1NTdGQVx1N0M3Qlx1RkYwQ1x1NEUwRFx1OEQxRlx1OEQyM1x1N0Y1MVx1NjgzQ1x1NzY4NFx1NEVBNFx1NjYxM1x1OEJBMVx1N0I5N1x1RkYwQ1x1NUMwMVx1ODhDNVx1N0VERlx1NEUwMFx1NzY4NFx1NjNBNVx1NTNFM1xyXG4qL1xyXG5pbXBvcnQgeyBNZDUgfSBmcm9tIFwidHMtbWQ1L2Rpc3QvbWQ1XCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nU2V0dGluZ3MsIEdSSURfQ09MT1JfU1RPQ0tfT1ZFUlZJRVcsIEdSSURfQ09MT1JfQlVZX09WRVJWSUVXLCBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcgfSBmcm9tIFwiLi9zZXR0aW5nc1wiXHJcbmltcG9ydCB7IFBFUkZJVF9UWVBFX05BTUVfU1RSIH0gZnJvbSBcIi4vbGFuZ19zdHJcIjtcclxuaW1wb3J0IHsgTXlGbG9vciwgTXlDZWlsLCBUb1BlcmNlbnQsIFRvTnVtYmVyLCBUb1RyYWRpbmdHYXAsIFRpbWVEdWFyaW9uLCBBdmVyYWdlUHJpY2VTdHIsIEZpeGVkUHJpY2UsIFRvUGVyY2VudFN0ciwgUHJvcG9ydGlvblBjdFN0ciwgSXNOdW1lcmljIH0gZnJvbSBcIi4vbXltYXRoXCI7XHJcbmltcG9ydCB7IFBsdWdpbkVudiB9IGZyb20gXCIuL3BsdWdpbl9lbnZcIjtcclxuaW1wb3J0IHsgRGVidWdMb2cgfSBmcm9tIFwiLi9yZW1vdGVfdXRpbFwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkVHJhZGluZyBcclxue1xyXG4gICAgcGx1Z2luX2VudjogUGx1Z2luRW52O1xyXG4gICAgZ3JpZF9zZXR0aW5nczogR3JpZFRyYWRpbmdTZXR0aW5ncztcclxuICAgIGlzX2VtcHR5OiBib29sZWFuO1xyXG4gICAgaXNfZGVidWc6IGJvb2xlYW47XHJcbiAgICBkYXRhX21kNTogc3RyaW5nO1xyXG4gICAgc3RvY2tfdGFibGU6IHN0cmluZyBbXVtdO1xyXG4gICAgcGFyYW1fdGFibGU6IHN0cmluZyBbXVtdO1xyXG4gICAgdHJhZGluZ190YWJsZTogc3RyaW5nIFtdW107XHJcbiAgICB0cmFkaW5nX2FuYWx5c2lzOiBzdHJpbmcgW11bXTtcclxuICAgIHRyYWRpbmdfcmVjb3JkOiBzdHJpbmcgW11bXTtcclxuICAgIHRyYWRpbmdfaW5jb21lOiBzdHJpbmcgW11bXTtcclxuICAgIGhvbGRpbmdfYW5hbHlzaXM6IHN0cmluZyBbXVtdO1xyXG4gICAgaG9sZGluZ19yZWNvcmQ6IHN0cmluZyBbXVtdO1xyXG4gICAgc3RvY2tfYW5hbHlzaXM6IHN0cmluZyBbXVtdO1xyXG4gICAgYWRqdXN0X3JlY29yZDogc3RyaW5nIFtdW107XHJcbiAgICBkZWJ1Z19sb2c6IHN0cmluZyBbXVtdO1xyXG4gICAgbW9kZV90eXBlOiBzdHJpbmc7XHJcblxyXG4gICAgdGFyZ2V0X3N0b2NrOiBudW1iZXI7XHJcbiAgICBzdG9ja19uYW1lOiBzdHJpbmc7XHJcbiAgICBtYXJrZXRfY29kZTogc3RyaW5nO1xyXG4gICAgY3VycmVudF9wcmljZTogbnVtYmVyO1xyXG4gICAgcmVtb3RlX2N1cnJlbnRfcHJpY2U6IG51bWJlcjtcclxuICAgIHRhcmdldF9wcmljZTogbnVtYmVyO1xyXG4gICAgZW1wdHlfcHJpY2U6IG51bWJlcjtcclxuICAgIGNsZWFyX3ByaWNlOiBudW1iZXI7XHJcbiAgICBjbGVhcl9hdmdfcHJpY2U6IG51bWJlcjtcclxuICAgIHJhd190cmFkaW5nX3JlY29yZDogc3RyaW5nIFtdW107XHJcbiAgICByYXdfYWRqdXN0X3JlY29yZDogc3RyaW5nIFtdW107XHJcbiAgICBjbGVhcl9zZWxsX3JlY29yZDogTWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgIGJ1eV9ncmlkX3JlY29yZDogc3RyaW5nIFtdO1xyXG4gICAgc2dyaWRfc3RlcF90YWJsZTogc3RyaW5nIFtdW107XHJcbiAgICBtZ3JpZF9zdGVwX3RhYmxlOiBzdHJpbmcgW11bXTtcclxuICAgIGxncmlkX3N0ZXBfdGFibGU6IHN0cmluZyBbXVtdO1xyXG5cclxuICAgIHRvdGFsX3JldGFpbjogbnVtYmVyO1xyXG4gICAgcmV0YWluX2Nvc3Q6IG51bWJlcjtcclxuICAgIHRvdGFsX2hvbGQ6IG51bWJlcjtcclxuICAgIHRvdGFsX2Nvc3Q6IG51bWJlcjtcclxuICAgIGJ1eV90cmlnZ2VyZWRfcm93czogbnVtYmVyIFtdO1xyXG4gICAgc2VsbF90cmlnZ2VyZWRfcm93czogbnVtYmVyIFtdO1xyXG4gICAgYnV5X21vbml0b3Jfcm93czogbnVtYmVyIFtdO1xyXG4gICAgc2VsbF9tb25pdG9yX3Jvd3M6IG51bWJlciBbXTtcclxuICAgIGRpc2FibGVfcm93czogbnVtYmVyIFtdO1xyXG5cclxuICAgIHN0b2NrX292ZXJ2aWV3OiBzdHJpbmcgW107XHJcbiAgICBzdG9ja19idXlfb3ZlcnZpZXc6IHN0cmluZyBbXVtdO1xyXG4gICAgc3RvY2tfc2VsbF9vdmVydmlldzogc3RyaW5nIFtdW107XHJcbiAgICBzdG9ja19wYXNzaXZlX2ZpbGxlZF9yZWNvcmQ6IHN0cmluZyBbXVtdO1xyXG4gICAgc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmQ6IHN0cmluZyBbXVtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbl9lbnY6IFBsdWdpbkVudilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnBsdWdpbl9lbnYgPSBwbHVnaW5fZW52O1xyXG4gICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncyA9IHBsdWdpbl9lbnYuZ3JpZF9zZXR0aW5ncy5DbG9uZSgpO1xyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nID0gW11cclxuICAgICAgICB0aGlzLmRhdGFfbWQ1ID0gXCJcIjtcclxuICAgICAgICB0aGlzLmlzX2VtcHR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzX2RlYnVnID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA9IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRHcmlkVHJhZGluZyhkYXRhOiBzdHJpbmcpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIFVwZGF0ZVJlbW90ZVByaWNlKHJlbW90ZV9wcmljZTogbnVtYmVyKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBEZWJ1Z0xvZyhsZXZlbDogc3RyaW5nLCBsb2dfc3RyOiBzdHJpbmcsIGV4dHJhX2luZm86IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICB0aGlzLmRlYnVnX2xvZy5wdXNoKFtsZXZlbCwgbG9nX3N0ciwgZXh0cmFfaW5mb10pO1xyXG4gICAgfVxyXG5cclxuICAgIEdldFRyYWRpbmdUaXRsZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9ja19uYW1lICsgXCIoXCIgKyBTdHJpbmcodGhpcy50YXJnZXRfc3RvY2spICsgXCIpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgSXNTdG9jaygpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfZW1wdHkgPT0gZmFsc2UgJiYgKHRoaXMubWFya2V0X2NvZGUgPT0gXCJzelwiIHx8IHRoaXMubWFya2V0X2NvZGUgPT0gXCJzaFwiKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFBhcnNlUmF3RGF0YShkYXRhOiBzdHJpbmcpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbmV3X21kNSA9IE1kNS5oYXNoU3RyKGRhdGEpO1xyXG4gICAgICAgIGlmIChuZXdfbWQ1ID09PSB0aGlzLmRhdGFfbWQ1KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGFfbWQ1ID0gbmV3X21kNTtcclxuICAgICAgICAvLyAxNTk4NjksXHU2RTM4XHU2MjBGRVRGLHN6LDEsMC45NVxyXG4gICAgICAgIGNvbnN0IGxpbmVzID0gZGF0YS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICBjb25zdCBzdHJzID0gbGluZXNbMF0uc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0X3N0b2NrID0gTnVtYmVyKHN0cnNbMV0pO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfbmFtZSA9IHN0cnNbMl07XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvY2tfbmFtZSA9PSBcIkRFQlVHVEVTVFwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5pc19kZWJ1ZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWFya2V0X2NvZGUgPSBzdHJzWzNdO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0X3ByaWNlID0gTnVtYmVyKHN0cnNbNF0pO1xyXG4gICAgICAgIHRoaXMuY3VycmVudF9wcmljZSA9IE51bWJlcihzdHJzWzVdKTtcclxuICAgICAgICB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlID0gdGhpcy5wbHVnaW5fZW52LkdldFN0b2NrUmVtb3RlUHJpY2Uoc3Ryc1sxXSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2UgPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3ByaWNlID0gdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQkFTRSwxMDAwMCwwLjY3LDAuMDA1LDAuMDAxLDEwMCwwLjFcclxuICAgICAgICAvLyBTVEVQLDAuMDUsMC4wNSw0LDAuMjIsMC4yLDIsMC41MiwwLjUsMVxyXG4gICAgICAgIC8vIEFESiwyMDI1LTAzLTI0LFx1OEMwM1x1NjU3NFx1OTk5Nlx1N0Y1MVx1NEVGN1x1NjgzQywwLjc1Ni0+MC44NTYsMC41NjcsMTAwMDBcclxuICAgICAgICAvLyBCVVksMjAyNC0wMS0yMyxcdTVDMEZcdTdGNTEwLDAuNzYwLDEyMDAwXHJcbiAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzID0gdGhpcy5wbHVnaW5fZW52LmdyaWRfc2V0dGluZ3MuQ2xvbmUoKTtcclxuICAgICAgICB0aGlzLnJhd190cmFkaW5nX3JlY29yZCA9IFtdO1xyXG4gICAgICAgIHRoaXMucmF3X2FkanVzdF9yZWNvcmQgPSBbXTtcclxuICAgICAgICB0aGlzLmJ1eV9ncmlkX3JlY29yZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2dyaWRfc3RlcF90YWJsZSA9IFtdO1xyXG4gICAgICAgIHRoaXMubWdyaWRfc3RlcF90YWJsZSA9IFtdO1xyXG4gICAgICAgIHRoaXMubGdyaWRfc3RlcF90YWJsZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2xlYXJfc2VsbF9yZWNvcmQgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPjtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4IDwgbGluZXMubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cnMgPSBsaW5lc1tpZHhdLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJCVVlcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXdfdHJhZGluZ19yZWNvcmQucHVzaChbc3Ryc1swXSwgc3Ryc1sxXSwgc3Ryc1syXSwgc3Ryc1szXSwgc3Ryc1s0XV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfZ3JpZF9yZWNvcmQucHVzaChzdHJzWzJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3Ryc1swXSA9PSBcIlNFTExcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXdfdHJhZGluZ19yZWNvcmQucHVzaChbc3Ryc1swXSwgc3Ryc1sxXSwgc3Ryc1syXSwgc3Ryc1szXSwgc3Ryc1s0XV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfZ3JpZF9yZWNvcmQucmVtb3ZlKHN0cnNbMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiU0hBUkVcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXdfdHJhZGluZ19yZWNvcmQucHVzaChbc3Ryc1swXSwgc3Ryc1sxXSwgc3Ryc1syXSwgc3Ryc1szXSwgc3Ryc1s0XV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiQkFTRVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuVW5wYWNrQmFzZShzdHJzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3Ryc1swXSA9PSBcIlNURVBcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzLlVucGFja1N0ZXAoc3Rycyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJTR1JJRFwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNncmlkX3N0ZXBfdGFibGUucHVzaChbc3Ryc1sxXSwgc3Ryc1syXSwgc3Ryc1szXSwgc3Ryc1s0XV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdHJzWzBdID09IFwiTUdSSURcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZ3JpZF9zdGVwX3RhYmxlLnB1c2goW3N0cnNbMV0sIHN0cnNbMl0sIHN0cnNbM10sIHN0cnNbNF1dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3Ryc1swXSA9PSBcIkxHUklEXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGdyaWRfc3RlcF90YWJsZS5wdXNoKFtzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0cnNbMF0gPT0gXCJBREpcIilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYXdfYWRqdXN0X3JlY29yZC5wdXNoKFtzdHJzWzFdLCBzdHJzWzJdLCBzdHJzWzNdLCBzdHJzWzRdLCBzdHJzWzVdXSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBJbml0VHJhZGluZ092ZXJ2aWV3KClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnN0b2NrX292ZXJ2aWV3ID0gW0dSSURfQ09MT1JfU1RPQ0tfT1ZFUlZJRVcsIFN0cmluZyh0aGlzLnRhcmdldF9zdG9jayksIHRoaXMuc3RvY2tfbmFtZSwgdGhpcy50YXJnZXRfcHJpY2UudG9GaXhlZCgzKSwgdGhpcy5jdXJyZW50X3ByaWNlLnRvRml4ZWQoMyksXHJcbiAgICAgICAgICAgICAgICBUb1BlcmNlbnQodGhpcy5jdXJyZW50X3ByaWNlIC8gdGhpcy50YXJnZXRfcHJpY2UsIDEpLCBTdHJpbmcodGhpcy50b3RhbF9ob2xkKSwgU3RyaW5nKHRoaXMudG90YWxfY29zdCksXHJcbiAgICAgICAgICAgICAgICBUb1RyYWRpbmdHYXAodGhpcy50b3RhbF9jb3N0LCB0aGlzLnRvdGFsX2hvbGQgKiB0aGlzLmN1cnJlbnRfcHJpY2UsIDIpLCB0aGlzLnRyYWRpbmdfaW5jb21lWzVdWzEwXV07XHJcbiAgICAgICAgdGhpcy5zdG9ja19idXlfb3ZlcnZpZXcgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5idXlfbW9uaXRvcl9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuYnV5X21vbml0b3Jfcm93cy5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLmJ1eV9tb25pdG9yX3Jvd3NbaWR4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWRpbmdfZ2FwID0gVG9UcmFkaW5nR2FwKHRoaXMuY3VycmVudF9wcmljZSwgTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzNdKSwgMik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b2NrX2J1eV9vdmVydmlldy5wdXNoKFtHUklEX0NPTE9SX0JVWV9PVkVSVklFVywgU3RyaW5nKHRoaXMudGFyZ2V0X3N0b2NrKSwgdGhpcy5zdG9ja19uYW1lLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVswXSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzJdLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVszXSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bNF0sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzVdLCB0cmFkaW5nX2dhcF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RvY2tfc2VsbF9vdmVydmlldyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5zZWxsX21vbml0b3Jfcm93c1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhZGluZ19nYXAgPSBUb1RyYWRpbmdHYXAodGhpcy5jdXJyZW50X3ByaWNlLCBOdW1iZXIodGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bN10pLCAyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvY2tfc2VsbF9vdmVydmlldy5wdXNoKFtHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcsIFN0cmluZyh0aGlzLnRhcmdldF9zdG9jayksIHRoaXMuc3RvY2tfbmFtZSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bMF0sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVs2XSwgdGhpcy50cmFkaW5nX3RhYmxlW3Jvd11bN10sIHRoaXMudHJhZGluZ190YWJsZVtyb3ddWzhdLCB0aGlzLnRyYWRpbmdfdGFibGVbcm93XVs5XSwgdHJhZGluZ19nYXBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zdG9ja19hY3RpdmVfZmlsbGVkX3JlY29yZC5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFQTRcdTY2MTNcdTY1RTVcdTY3MUZcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTVGNTNcdTUyNERcdTRFRjdcdTY4M0NcIiwgXCJcdTYzMDFcdTRFRDNcdTY1MzZcdTc2Q0FcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRkRcdTY1NzBcIiwgXCJcdTdEMkZcdTc5RUZcdTdCNzlcdTc4MDFcIlxyXG4gICAgICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuc3RvY2tfYWN0aXZlX2ZpbGxlZF9yZWNvcmQubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5zdG9ja19hY3RpdmVfZmlsbGVkX3JlY29yZFtpZHhdO1xyXG4gICAgICAgICAgICAgICAgcm93WzhdID0gU3RyaW5nKHRoaXMuY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICByb3dbOV0gPSBUb1RyYWRpbmdHYXAoTnVtYmVyKHJvd1s1XSksIHRoaXMuY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICByb3dbMTBdID0gU3RyaW5nKE15Q2VpbChOdW1iZXIocm93WzddKSAvIHRoaXMuY3VycmVudF9wcmljZSwgdGhpcy5ncmlkX3NldHRpbmdzLk1JTl9CQVRDSF9DT1VOVCkpO1xyXG4gICAgICAgICAgICAgICAgcm93WzExXSA9IFN0cmluZyhOdW1iZXIocm93WzZdKSAtIE51bWJlcihyb3dbMTBdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0b2NrX3Bhc3NpdmVfZmlsbGVkX3JlY29yZC5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTVGNTNcdTUyNERcdTRFRjdcdTY4M0NcIiwgXCJcdTVGNTNcdTUyNERcdThEQ0NcdTVFNDVcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTZEQThcdTVFNDVcIlxyXG4gICAgICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuc3RvY2tfcGFzc2l2ZV9maWxsZWRfcmVjb3JkLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuc3RvY2tfcGFzc2l2ZV9maWxsZWRfcmVjb3JkW2lkeF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmlkX3JvdyA9IHRoaXMuRmluZFRyYWRpbmdHcmlkUm93KHJvd1szXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JpZF9yb3cubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByb3dbM10gPSBncmlkX3Jvd1swXTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbNF0gPSBncmlkX3Jvd1sxXTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbNV0gPSBncmlkX3Jvd1szXTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbNl0gPSBncmlkX3Jvd1s0XTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbN10gPSBncmlkX3Jvd1s1XTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbOF0gPSBTdHJpbmcodGhpcy5jdXJyZW50X3ByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICByb3dbOV0gPSBUb1RyYWRpbmdHYXAoTnVtYmVyKHJvd1s1XSksIHRoaXMuY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93WzEwXSA9IGdyaWRfcm93WzddO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd1sxMV0gPSBUb1RyYWRpbmdHYXAodGhpcy5jdXJyZW50X3ByaWNlLCBOdW1iZXIocm93WzEwXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEluaXRTdG9ja1RhYmxlKClcclxuICAgIHtcclxuICAgICAgICAvLyBcdTY3MDBcdTlBRDhcdTUzNTZcdTUxRkFcdTRFRjdcdTRFM0FcdTZFMDVcdTdGNTFcdTRFRjdcclxuICAgICAgICB0aGlzLmVtcHR5X3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgMS4wICsgdGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX1NURVBfUENULCB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT04pO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0xOyBpZHg8dGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVtpZHhdWzddKSA+IHRoaXMuZW1wdHlfcHJpY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1wdHlfcHJpY2UgPSBOdW1iZXIodGhpcy50cmFkaW5nX3RhYmxlW2lkeF1bN10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFx1NkUwNVx1NEVEM1x1NUU3M1x1NTc0N1x1NEVGN1x1NEUwRVx1NkUwNVx1NEVEM1x1NjcwMFx1OUFEOFx1NEVGN1xyXG4gICAgICAgIGNvbnN0IGNsZWFyX3BjdCA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5DTEVBUl9TVEVQX1BDVDtcclxuICAgICAgICB0aGlzLmNsZWFyX2F2Z19wcmljZSA9IE51bWJlcigoKHRoaXMuQ2FsY0NsZWFyUHJpY2UoY2xlYXJfcGN0LCAxKSArIHRoaXMuQ2FsY0NsZWFyUHJpY2UoY2xlYXJfcGN0LCAyKSArIHRoaXMuQ2FsY0NsZWFyUHJpY2UoY2xlYXJfcGN0LCAzKSkgLyAzKS50b0ZpeGVkKHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTikpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJfcHJpY2UgPSB0aGlzLkNhbGNDbGVhclByaWNlKGNsZWFyX3BjdCwgMyk7XHJcbiAgICAgICAgY29uc3QgbWluaV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5JTVVNX0JVWV9QQ1QsIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTik7XHJcbiAgICAgICAgY29uc3QgYm90dG9tX3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgdGhpcy5ncmlkX3NldHRpbmdzLkJPVFRPTV9CVVlfUENULCB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT04pO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfdGFibGUgPSBbXHJcbiAgICAgICAgICAgIFtcIlx1NjgwN1x1NzY4NFx1NEVFM1x1NTNGN1wiLCBTdHJpbmcodGhpcy50YXJnZXRfc3RvY2spXSxcclxuICAgICAgICAgICAgW1wiXHU2ODA3XHU3Njg0XHU1NDBEXHU3OUYwXCIsIHRoaXMuc3RvY2tfbmFtZV0sXHJcbiAgICAgICAgICAgIFtcIlx1N0Y1MVx1NjgzQ1x1NkEyMVx1NUYwRlwiLCB0aGlzLm1vZGVfdHlwZV0sXHJcbiAgICAgICAgICAgIFtcIlx1OTk5Nlx1N0Y1MVx1NEVGN1x1NjgzQ1wiLCBTdHJpbmcodGhpcy50YXJnZXRfcHJpY2UpXSxcclxuICAgICAgICAgICAgW1wiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFN0cmluZyh0aGlzLmN1cnJlbnRfcHJpY2UpLCBcIlx1NEVGN1x1NjgzQ1x1NzY3RVx1NTIwNlx1NEY0RFwiLCBUb1BlcmNlbnQodGhpcy5jdXJyZW50X3ByaWNlIC8gdGhpcy50YXJnZXRfcHJpY2UsIDEpXSxcclxuICAgICAgICAgICAgW1wiXHU1NkRFXHU4QzAzXHU0RUY3XHU2ODNDXCIsIFN0cmluZyhib3R0b21fcHJpY2UpLCBcIlx1NEVGN1x1NjgzQ1x1NzY3RVx1NTIwNlx1NEY0RFwiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLkJPVFRPTV9CVVlfUENULCAxKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NjcwMFx1NEY0RVx1NEVGN1x1NjgzQ1wiLCBTdHJpbmcobWluaV9wcmljZSksIFwiXHU0RUY3XHU2ODNDXHU3NjdFXHU1MjA2XHU0RjREXCIsIFRvUGVyY2VudCh0aGlzLmdyaWRfc2V0dGluZ3MuTUlOSU1VTV9CVVlfUENULCAxKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NTA1Q1x1NjgzQ1x1OERDQ1x1NUU0NVwiLCBUb1RyYWRpbmdHYXAodGhpcy5jdXJyZW50X3ByaWNlLCBtaW5pX3ByaWNlKSwgXCJcdTZFMDVcdTY4M0NcdTZEQThcdTVFNDVcIiwgVG9UcmFkaW5nR2FwKHRoaXMuY3VycmVudF9wcmljZSwgdGhpcy5lbXB0eV9wcmljZSwgMSldLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdEdyaWRQYXJhbSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5wYXJhbV90YWJsZSA9IFtcclxuICAgICAgICAgICAgW1wiXHU5OTk2XHU3RjUxXHU3NkVFXHU2ODA3XHU5MUQxXHU5ODlEXCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuT05FX0dSSURfTElNSVQpLCBcIlx1NjcwMFx1NTkyN1x1NTZERVx1NjRBNFx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QpLCBcIlx1NjcwMFx1NTkyN1x1NkRBOFx1OERDQ1x1NUU0NVwiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLk1BWF9SSVNFX1BDVCldLFxyXG4gICAgICAgICAgICBbXCJcdTg5RTZcdTUzRDFcdTRFRjdcdTUyQTBcdTcwQjlcIiwgU3RyaW5nKHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCksIFwiXHU2QkNGXHU2MjRCXHU0RUZEXHU2NTcwXHU5ODlEXCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKSwgXCJcdTRFQTRcdTY2MTNcdTRFRjdcdTdDQkVcdTVFQTZcIiwgU3RyaW5nKHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTildLFxyXG4gICAgICAgICAgICBbXCJcdTVDMEZcdTdGNTFcdTZCNjVcdThGREJcdTUwM0NcIiwgVG9QZXJjZW50KHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVCksIFwiXHU0RTJEXHU3RjUxXHU2QjY1XHU4RkRCXHU1MDNDXCIsIFRvUGVyY2VudCh0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1QpLCBcIlx1NTkyN1x1N0Y1MVx1NkI2NVx1OEZEQlx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENUKV0sXHJcbiAgICAgICAgICAgIFtcIlx1NjI5NVx1NTE2NVx1OEZGRFx1NTJBMFx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX0FERF9QQ1QpLCBcIlx1NjI5NVx1NTE2NVx1OEZGRFx1NTJBMFx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX0FERF9QQ1QpLCBcIlx1NjI5NVx1NTE2NVx1OEZGRFx1NTJBMFx1NTAzQ1wiLCBUb1BlcmNlbnQodGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX0FERF9QQ1QpXSxcclxuICAgICAgICAgICAgW1wiXHU0RkREXHU3NTU5XHU1MjI5XHU2REE2XHU2NTcwXCIsIFN0cmluZyh0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfUkVUQUlOX0NPVU5UKSwgXCJcdTRGRERcdTc1NTlcdTUyMjlcdTZEQTZcdTY1NzBcIiwgU3RyaW5nKHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9SRVRBSU5fQ09VTlQpLCBcIlx1NEZERFx1NzU1OVx1NTIyOVx1NkRBNlx1NjU3MFwiLCBTdHJpbmcodGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1JFVEFJTl9DT1VOVCldLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdBbmFseXNpcygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSB0aGlzLnRhcmdldF9wcmljZTtcclxuICAgICAgICBjb25zdCByaXNlX3BjdCA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVDtcclxuICAgICAgICBjb25zdCB0YWJsZTpBcnJheTxBcnJheTxzdHJpbmc+PiA9IHRoaXMudHJhZGluZ190YWJsZTtcclxuICAgICAgICBmdW5jdGlvbiBBbmFseXNpcyhzbHVtcF9wY3Q6IG51bWJlcikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxfY29zdCA9IDA7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbF9hbW91bnQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgdG90YWxfc2VsbCA9IDA7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbF9nYWluID0gMDtcclxuICAgICAgICAgICAgY29uc3QgbWluX3ByaWNlID0gcHJpY2UgKiAoMSAtIHNsdW1wX3BjdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heF9wcmljZSA9IHByaWNlICogKDEgKyByaXNlX3BjdCk7XHJcblxyXG4gICAgICAgICAgICB0YWJsZS5mb3JFYWNoKChyb3c6QXJyYXk8c3RyaW5nPiwgaTpudW1iZXIpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiBUb051bWJlcihyb3dbMV0pID49IDEuMCAtIHNsdW1wX3BjdClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9jb3N0ID0gdG90YWxfY29zdCArIE51bWJlcihyb3dbNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX2Ftb3VudCA9IHRvdGFsX2Ftb3VudCArIE51bWJlcihyb3dbNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsX2dhaW4gPSB0b3RhbF9nYWluICsgTnVtYmVyKHJvd1s5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxfc2VsbCA9IHRvdGFsX3NlbGwgKyBOdW1iZXIocm93WzhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvc3RfcHJpY2UgPSAodG90YWxfY29zdCAtIHRvdGFsX2dhaW4pIC8gKHRvdGFsX2Ftb3VudCAtIHRvdGFsX3NlbGwpO1xyXG4gICAgICAgICAgICBjb25zdCBnYWluX21vbmV5ID0gTWF0aC5mbG9vcihtYXhfcHJpY2UgKiAodG90YWxfYW1vdW50IC0gdG90YWxfc2VsbCkgLSAodG90YWxfY29zdCAtIHRvdGFsX2dhaW4pKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtUb1BlcmNlbnQoc2x1bXBfcGN0KSArIFwiKFwiICsgbWluX3ByaWNlLnRvRml4ZWQoMykgKyBcIilcIixcclxuICAgICAgICAgICAgICAgICAgICBTdHJpbmcodG90YWxfY29zdCksIFN0cmluZyh0b3RhbF9hbW91bnQpLCBTdHJpbmcoTWF0aC5jZWlsKHRvdGFsX2Ftb3VudCAqIG1pbl9wcmljZSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICh0b3RhbF9jb3N0L3RvdGFsX2Ftb3VudCkudG9GaXhlZCgzKSwgU3RyaW5nKE1hdGguY2VpbCh0b3RhbF9jb3N0IC0gdG90YWxfYW1vdW50ICogbWluX3ByaWNlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgKCh0b3RhbF9jb3N0IC0gdG90YWxfYW1vdW50ICogbWluX3ByaWNlKSAvIHRvdGFsX2Nvc3QgKiAxMDApLnRvRml4ZWQoMikgKyBcIiVcIixcclxuICAgICAgICAgICAgICAgICAgICAoKHRvdGFsX2Nvc3QgLyB0b3RhbF9hbW91bnQgLSBtaW5fcHJpY2UpIC8gbWluX3ByaWNlICogMTAwKS50b0ZpeGVkKDIpICsgXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKHRvdGFsX2Ftb3VudCAtIHRvdGFsX3NlbGwpLCBTdHJpbmcoTWF0aC5mbG9vcihtYXhfcHJpY2UgKiAodG90YWxfYW1vdW50IC0gdG90YWxfc2VsbCkpKSwgU3RyaW5nKHRvdGFsX2Nvc3QgLSB0b3RhbF9nYWluKSxcclxuICAgICAgICAgICAgICAgICAgICBjb3N0X3ByaWNlLnRvRml4ZWQoMyksICgobWF4X3ByaWNlIC0gY29zdF9wcmljZSkgLyBjb3N0X3ByaWNlICogMTAwKS50b0ZpeGVkKDIpICsgXCIlXCIsIFN0cmluZyhnYWluX21vbmV5KSwgKGdhaW5fbW9uZXkgLyB0b3RhbF9jb3N0ICogMTAwKS50b0ZpeGVkKDIpICsgXCIlXCJdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX2FuYWx5c2lzID0gW1xyXG4gICAgICAgICAgICBbXCJcdTRFOEZcdTYzNUZcdTUyMDZcdTY3OTBcIiwgXCJcdTU2REVcdTY0QTRcdTZCRDRcdTRGOEJcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjI5NVx1NTE2NVx1OEQ0NFx1OTFEMVwiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU2MzAxXHU0RUQzXHU0RUZEXHU5ODlEXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTYzMDFcdTRFRDNcdTkxRDFcdTk4OURcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjMwMVx1NEVEM1x1NjIxMFx1NjcyQ1wiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU0RThGXHU2MzVGXHU5MUQxXHU5ODlEXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTRFOEZcdTYzNUZcdTZCRDRcdTRGOEJcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjI0MFx1OTcwMFx1NkRBOFx1NUU0NVwiXSxcclxuICAgICAgICAgICAgW1wiXHU1M0NEXHU1RjM5XHU3NkM4XHU1MjI5XCIsIFwiXHU2MzAxXHU0RUQzXHU0RUZEXHU5ODlEXCJdLFxyXG4gICAgICAgICAgICBbKHByaWNlICogKDEgKyByaXNlX3BjdCkpLnRvRml4ZWQoMyksIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjMwMVx1NEVEM1x1NjIxMFx1NjcyQ1wiXSxcclxuICAgICAgICAgICAgW1wiXCIsIFwiXHU2RDZFXHU3NkM4XHU2QkQ0XHU0RjhCXCJdLFxyXG4gICAgICAgICAgICBbXCJcIiwgXCJcdTdGNTFcdTY4M0NcdTc2QzhcdTUyMjlcIl0sXHJcbiAgICAgICAgICAgIFtcIlwiLCBcIlx1NjAzQlx1NkQ2RVx1NzZDOFx1NkJENFwiXSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCBzbHVtcF9wY3RzOiBudW1iZXIgW10gPSBbMjAsIDMwLCA0MCwgNTAsIDYwLCA3MCwgODBdO1xyXG4gICAgICAgIGZvciAoY29uc3QgcGN0IG9mIHNsdW1wX3BjdHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBBbmFseXNpcyhwY3QgLyAxMDAuMCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8cmVzdWx0Lmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19hbmFseXNpc1tpZHhdLnB1c2gocmVzdWx0W2lkeF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEluaXRUcmFkaW5nUmVjb3JkKClcclxuICAgIHtcclxuICAgICAgICAvLyBcdThDMDNcdTY1NzRcdThCQjBcdTVGNTVcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgbGV0IGFkanVzdF9wcmljZSA9IDA7XHJcbiAgICAgICAgbGV0IGFkanVzdF9jb3VudCA9IDA7XHJcbiAgICAgICAgbGV0IGFkanVzdF9jb3N0ID0gMDtcclxuICAgICAgICB0aGlzLmFkanVzdF9yZWNvcmQgPSBbW1wiXHU4QzAzXHU2NTc0XHU2NUU1XHU2NzFGXCIsIFwiXHU4QzAzXHU2NTc0XHU3QzdCXHU1NzhCXCIsIFwiXHU4QzAzXHU2NTc0XHU1MTg1XHU1QkI5XCIsXCJcdTRFQTRcdTY2MTNcdTRFRjdcdTY4M0NcIiwgXCJcdTRFQTRcdTY2MTNcdTgwQTFcdTY1NzBcIiwgXCJcdTZEODhcdTgwMTdcdTY3MkNcdTkxRDFcIl1dO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8dGhpcy5yYXdfYWRqdXN0X3JlY29yZC5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKElzTnVtZXJpYyh0aGlzLnJhd19hZGp1c3RfcmVjb3JkW2lkeF1bM10pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhZGp1c3RfcHJpY2UgPSBOdW1iZXIodGhpcy5yYXdfYWRqdXN0X3JlY29yZFtpZHhdWzNdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFkanVzdF9wcmljZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKElzTnVtZXJpYyh0aGlzLnJhd19hZGp1c3RfcmVjb3JkW2lkeF1bNF0pKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhZGp1c3RfY291bnQgPSBOdW1iZXIodGhpcy5yYXdfYWRqdXN0X3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGFkanVzdF9jb3VudCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRqdXN0X2Nvc3QgPSBNYXRoLmNlaWwoYWRqdXN0X3ByaWNlICogYWRqdXN0X2NvdW50KTtcclxuICAgICAgICAgICAgaWYgKGFkanVzdF9jb3N0ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RfcmVjb3JkLnB1c2goW3RoaXMucmF3X2FkanVzdF9yZWNvcmRbaWR4XVswXSwgdGhpcy5yYXdfYWRqdXN0X3JlY29yZFtpZHhdWzFdLCB0aGlzLnJhd19hZGp1c3RfcmVjb3JkW2lkeF1bMl0sIGFkanVzdF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksIFN0cmluZyhhZGp1c3RfY291bnQpLCBTdHJpbmcoYWRqdXN0X2Nvc3QpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkanVzdF9yZWNvcmQucHVzaChbdGhpcy5yYXdfYWRqdXN0X3JlY29yZFtpZHhdWzBdLCB0aGlzLnJhd19hZGp1c3RfcmVjb3JkW2lkeF1bMV0sIHRoaXMucmF3X2FkanVzdF9yZWNvcmRbaWR4XVsyXSwgXCItXCIsIFwiLVwiLCBcIi1cIl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFx1NEVBNFx1NjYxM1x1OEJCMFx1NUY1NVxyXG4gICAgICAgIHRoaXMudG90YWxfcmV0YWluID0gMDtcclxuICAgICAgICB0aGlzLnJldGFpbl9jb3N0ID0gMDtcclxuICAgICAgICB0aGlzLnRvdGFsX2Nvc3QgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfaG9sZCA9IDA7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3JlY29yZCA9IFtbXCJcdTRFQTRcdTY2MTNcdTY1QjlcdTU0MTFcIiwgXCJcdTRFQTRcdTY2MTNcdTY1RTVcdTY3MUZcIiwgXCJcdTdGNTFcdTY4M0NcdTdDN0JcdTU3OEJcIiwgXCJcdTRFQTRcdTY2MTNcdTRFRjdcdTY4M0NcIiwgXCJcdTRFQTRcdTY2MTNcdTgwQTFcdTY1NzBcIiwgXCJcdTZEODhcdTgwMTdcdTY3MkNcdTkxRDFcIiwgXCJcdTdEMkZcdTc5RUZcdTdCNzlcdTc4MDFcIiwgXCJcdTYzMDFcdTRFRDNcdTY1RjZcdTk1N0ZcIl1dO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfcGFzc2l2ZV9maWxsZWRfcmVjb3JkID0gW107XHJcbiAgICAgICAgdGhpcy5zdG9ja19hY3RpdmVfZmlsbGVkX3JlY29yZCA9IFtdO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19yZWNvcmQgPSBbXTtcclxuICAgICAgICBsZXQgcmF3X3JlY29yZCA9IFsuLi4gdGhpcy5yYXdfdHJhZGluZ19yZWNvcmRdO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSAwO1xyXG4gICAgICAgIGxldCByZXRhaW5fc2VsbCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciA8IHJhd19yZWNvcmQubGVuZ3RoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHJhd19yZWNvcmRbY3Vyc29yXVswXSA9PSBcIkJVWVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2N1cnNvciA9IC0xO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaWR4PWN1cnNvcjsgaWR4PHJhd19yZWNvcmQubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3X3JlY29yZFtpZHhdWzBdID09IFwiU0VMTFwiICYmIHJhd19yZWNvcmRbaWR4XVsyXSA9PSByYXdfcmVjb3JkW2N1cnNvcl1bMl0pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3Vyc29yID0gaWR4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2N1cnNvciA+PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1OEJBMVx1N0I5N1x1NEZERFx1NzU1OVx1NEVGRFx1NjU3MC9cdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDEvXHU2MzAxXHU0RUQzXHU2NUY2XHU5NUY0XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmV0YWluX2NvdW50ID0gTWF0aC5mbG9vcihOdW1iZXIocmF3X3JlY29yZFtjdXJzb3JdWzRdKSAtIE51bWJlcihyYXdfcmVjb3JkW3NjdXJzb3JdWzRdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29zdF9jb3VudCA9IE1hdGguZmxvb3IoTnVtYmVyKHJhd19yZWNvcmRbY3Vyc29yXVszXSkgKiBOdW1iZXIocmF3X3JlY29yZFtjdXJzb3JdWzRdKSAtIE51bWJlcihyYXdfcmVjb3JkW3NjdXJzb3JdWzNdKSAqIE51bWJlcihyYXdfcmVjb3JkW3NjdXJzb3JdWzRdKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZV9kID0gVGltZUR1YXJpb24ocmF3X3JlY29yZFtjdXJzb3JdWzFdLCByYXdfcmVjb3JkW3NjdXJzb3JdWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3JldGFpbiA9IHRoaXMudG90YWxfcmV0YWluICsgcmV0YWluX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmV0YWluX2Nvc3QgPSB0aGlzLnJldGFpbl9jb3N0ICsgY29zdF9jb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdThCQjBcdTVGNTVcdTYyMTBcdTVCRjlcdTc2ODRcdTRFNzBcdTUzNTZcdThCQjBcdTVGNTVcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbY3Vyc29yXVswXSwgcmF3X3JlY29yZFtjdXJzb3JdWzFdLCByYXdfcmVjb3JkW2N1cnNvcl1bMl0sIHJhd19yZWNvcmRbY3Vyc29yXVszXSwgcmF3X3JlY29yZFtjdXJzb3JdWzRdLCBTdHJpbmcoY29zdF9jb3VudCldKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbc2N1cnNvcl1bMF0sIHJhd19yZWNvcmRbc2N1cnNvcl1bMV0sIHJhd19yZWNvcmRbc2N1cnNvcl1bMl0sIHJhd19yZWNvcmRbc2N1cnNvcl1bM10sIHJhd19yZWNvcmRbc2N1cnNvcl1bNF0sIFwiLS1cIiwgU3RyaW5nKHJldGFpbl9jb3VudCksIFN0cmluZyh0aW1lX2QpK1wiXHU1OTI5XCJdKTtcclxuICAgICAgICAgICAgICAgICAgICByYXdfcmVjb3JkLnNwbGljZShjdXJzb3IsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd19yZWNvcmQuc3BsaWNlKHNjdXJzb3IgLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3IrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnNvcisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8cmF3X3JlY29yZC5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHJhd19yZWNvcmRbaWR4XVswXSA9PSBcIkJVWVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3N0X2NvdW50ID0gTWF0aC5mbG9vcihOdW1iZXIocmF3X3JlY29yZFtpZHhdWzNdKSAqIE51bWJlcihyYXdfcmVjb3JkW2lkeF1bNF0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ19yZWNvcmQucHVzaChbcmF3X3JlY29yZFtpZHhdWzBdLCByYXdfcmVjb3JkW2lkeF1bMV0sIHJhd19yZWNvcmRbaWR4XVsyXSwgcmF3X3JlY29yZFtpZHhdWzNdLCByYXdfcmVjb3JkW2lkeF1bNF0sIFN0cmluZyhjb3N0X2NvdW50KV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbF9jb3N0ID0gdGhpcy50b3RhbF9jb3N0ICsgY29zdF9jb3VudDtcclxuICAgICAgICAgICAgICAgIGlmIChOdW1iZXIocmF3X3JlY29yZFtpZHhdWzNdKSA+IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3RhbF9ob2xkID0gdGhpcy50b3RhbF9ob2xkICsgTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob2xkaW5nX3JlY29yZC5wdXNoKFtyYXdfcmVjb3JkW2lkeF1bMF0sIHJhd19yZWNvcmRbaWR4XVsxXSwgcmF3X3JlY29yZFtpZHhdWzJdLCByYXdfcmVjb3JkW2lkeF1bM10sIHJhd19yZWNvcmRbaWR4XVs0XV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihyYXdfcmVjb3JkW2lkeF1bM10pID09IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9ja19wYXNzaXZlX2ZpbGxlZF9yZWNvcmQucHVzaChbR1JJRF9DT0xPUl9CVVlfT1ZFUlZJRVcsIFN0cmluZyh0aGlzLnRhcmdldF9zdG9jayksIHRoaXMuc3RvY2tfbmFtZSwgcmF3X3JlY29yZFtpZHhdWzJdLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMl0uc3RhcnRzV2l0aChcIlx1ODg2NVx1NEVEM1wiKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b2NrX2FjdGl2ZV9maWxsZWRfcmVjb3JkLnB1c2goW0dSSURfQ09MT1JfU0VMTF9PVkVSVklFVywgU3RyaW5nKHRoaXMudGFyZ2V0X3N0b2NrKSwgdGhpcy5zdG9ja19uYW1lLCByYXdfcmVjb3JkW2lkeF1bMl0sIHJhd19yZWNvcmRbaWR4XVsxXSwgcmF3X3JlY29yZFtpZHhdWzNdLCByYXdfcmVjb3JkW2lkeF1bNF0sIFN0cmluZyhjb3N0X2NvdW50KSwgXCJcIiwgXCJcIiwgXCJcIl0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3X3JlY29yZFtpZHhdWzBdID09IFwiU0hBUkVcIilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3X3JlY29yZFtpZHhdWzJdID09IFwiXHU3RUEyXHU1MjI5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYWluX2NvdW50ID0gTWF0aC5mbG9vcihOdW1iZXIocmF3X3JlY29yZFtpZHhdWzNdKSAqIE51bWJlcihyYXdfcmVjb3JkW2lkeF1bNF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3JlY29yZC5wdXNoKFtyYXdfcmVjb3JkW2lkeF1bMF0sIHJhd19yZWNvcmRbaWR4XVsxXSwgcmF3X3JlY29yZFtpZHhdWzJdLCByYXdfcmVjb3JkW2lkeF1bM10sIHJhd19yZWNvcmRbaWR4XVs0XSwgXCItXCIgKyBTdHJpbmcoZ2Fpbl9jb3VudCldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXRhaW5fY29zdCA9IHRoaXMucmV0YWluX2Nvc3QgLSBnYWluX2NvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3X3JlY29yZFtpZHhdWzJdID09IFwiXHU2MkM2XHU4MEExXCIpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbaWR4XVswXSwgcmF3X3JlY29yZFtpZHhdWzFdLCByYXdfcmVjb3JkW2lkeF1bMl0sIHJhd19yZWNvcmRbaWR4XVszXSwgcmF3X3JlY29yZFtpZHhdWzRdLCBcIi0tXCIsIHJhd19yZWNvcmRbaWR4XVs0XV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3JldGFpbiA9IHRoaXMudG90YWxfcmV0YWluICsgTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdfcmVjb3JkW2lkeF1bMF0gPT0gXCJTRUxMXCIgJiYgcmF3X3JlY29yZFtpZHhdWzJdLnN0YXJ0c1dpdGgoXCJcdTUyMjlcdTZEQTZcIikpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3JldGFpbiA9IHRoaXMudG90YWxfcmV0YWluIC0gTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmV0YWluX2Nvc3QgPSB0aGlzLnJldGFpbl9jb3N0IC0gTnVtYmVyKHJhd19yZWNvcmRbaWR4XVszXSkgKiBOdW1iZXIocmF3X3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0YWluX3NlbGwgPSByZXRhaW5fc2VsbCArIE51bWJlcihyYXdfcmVjb3JkW2lkeF1bNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsbF9jb3VudCA9IHRoaXMuY2xlYXJfc2VsbF9yZWNvcmQuZ2V0KHJhd19yZWNvcmRbaWR4XVsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxsX2NvdW50ID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsbF9jb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcl9zZWxsX3JlY29yZC5zZXQocmF3X3JlY29yZFtpZHhdWzJdLCBzZWxsX2NvdW50ICsgTnVtYmVyKHJhd19yZWNvcmRbaWR4XVs0XSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW3Jhd19yZWNvcmRbaWR4XVswXSwgcmF3X3JlY29yZFtpZHhdWzFdLCByYXdfcmVjb3JkW2lkeF1bMl0sIHJhd19yZWNvcmRbaWR4XVszXSwgcmF3X3JlY29yZFtpZHhdWzRdXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50b3RhbF9ob2xkID0gdGhpcy50b3RhbF9ob2xkICsgdGhpcy50b3RhbF9yZXRhaW47XHJcbiAgICAgICAgdGhpcy50b3RhbF9jb3N0ID0gdGhpcy50b3RhbF9jb3N0ICsgdGhpcy5yZXRhaW5fY29zdDtcclxuICAgICAgICBpZiAodGhpcy50b3RhbF9jb3N0ICE9IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW1wiQ29zdFwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBTdHJpbmcodGhpcy50b3RhbF9jb3N0KSwgXCJcIiwgXCJcIl0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy50b3RhbF9yZXRhaW4gIDw9IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b3RhbF9ob2xkID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFkaW5nX3JlY29yZC5wdXNoKFtcIlJldGFpblwiLCBcIlwiLCBcIlwiLCBcIlwiLCBTdHJpbmcodGhpcy50b3RhbF9ob2xkKSwgXCJcIiwgIFwiMFwiLCBcIlwiXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRyYWRpbmdfcmVjb3JkLnB1c2goW1wiUmV0YWluXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFN0cmluZyh0aGlzLnRvdGFsX2hvbGQpLCBcIlwiLCAgU3RyaW5nKHRoaXMudG90YWxfcmV0YWluKSwgXCJcIl0pO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRfcGN0ID0gTXlDZWlsKHRoaXMuY3VycmVudF9wcmljZSAvIHRoaXMudGFyZ2V0X3ByaWNlLCAwLjAwMSk7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXg9MTsgaW5kZXg8PTM7IGluZGV4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLkdlbmVyYXRlQ2xlYXJSb3coUEVSRklUX1RZUEVfTkFNRV9TVFIsIGluZGV4LCB0aGlzLmdyaWRfc2V0dGluZ3MuQ0xFQVJfU1RFUF9QQ1QsIE15Rmxvb3IoKHRoaXMudG90YWxfcmV0YWluICsgcmV0YWluX3NlbGwpIC8gMywgMTAwKSk7XHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZS5wdXNoKHJvdyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50X3BjdCArIHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfUklTRV9QQ1QgPj0gVG9OdW1iZXIocm93WzFdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaCh0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEluaXRUcmFkaW5nSW5jb21lKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnRyYWRpbmdfaW5jb21lID0gW107XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX2luY29tZS5wdXNoKFtcIlwiLCBcIlx1NjMwMVx1NEVEM1x1ODBBMVx1NjU3MFwiLCBcIlx1NTM2MFx1NzUyOFx1NjcyQ1x1OTFEMVwiLCBcIlx1NjMwMVx1NEVEM1x1OTFEMVx1OTg5RFwiLCBcIlx1NjMwMVx1NEVEM1x1NTc0N1x1NEVGN1wiLCBcIlx1NUI5RVx1OTY0NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NjMwMVx1NEVEM1x1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1OEQ0NFx1OTFEMVwiLCBcIlx1OEQyNlx1OTc2Mlx1OEQ0NFx1OTFEMVwiLCBcIlx1NjI5NVx1NTE2NVx1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1NEVEM1x1NEY0RFwiXSk7XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX2luY29tZS5wdXNoKHRoaXMuR2VuZXJhdGVJbmNvbWVSb3coXCJcdTdEMkZcdThCQTFcdTdCNzlcdTc4MDFcIiwgdGhpcy50b3RhbF9yZXRhaW4sIHRoaXMucmV0YWluX2Nvc3QsIHRoaXMuY3VycmVudF9wcmljZSwgdGhpcy5yZXRhaW5fY29zdCwgMCwgMCkpO1xyXG5cclxuICAgICAgICAvLyBcdTVGNTNcdTUyNERcdTYzMDFcdTRFRDNcclxuICAgICAgICB0aGlzLkNhbGNUcmFkaW5nSW5jb21lKFwiXHU1RjUzXHU1MjREXCIsIHRoaXMuY3VycmVudF9wcmljZSAvIHRoaXMudGFyZ2V0X3ByaWNlLCB0aGlzLmVtcHR5X3ByaWNlLCB0aGlzLmNsZWFyX2F2Z19wcmljZSwgdGhpcy5jbGVhcl9wcmljZSwgZmFsc2UpO1xyXG4gICAgICAgIC8vIFx1NzdFRFx1NjcxRlx1NTZERVx1OEMwM1xyXG4gICAgICAgIHRoaXMuQ2FsY1RyYWRpbmdJbmNvbWUoXCJcdTU2REVcdThDMDNcIiwgdGhpcy5ncmlkX3NldHRpbmdzLkJPVFRPTV9CVVlfUENULCB0aGlzLmVtcHR5X3ByaWNlLCB0aGlzLmNsZWFyX2F2Z19wcmljZSwgdGhpcy5jbGVhcl9wcmljZSk7XHJcbiAgICAgICAgLy8gXHU2NzAwXHU1OTI3XHU1NkRFXHU2NEE0XHJcbiAgICAgICAgdGhpcy5DYWxjVHJhZGluZ0luY29tZShcIlx1NjcwMFx1NTkyN1wiLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOSU1VTV9CVVlfUENULCB0aGlzLmVtcHR5X3ByaWNlLCB0aGlzLmNsZWFyX2F2Z19wcmljZSwgdGhpcy5jbGVhcl9wcmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdEhvbGRpbmdBbmFseXNpcygpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgdG90YWxfaG9sZCA9IHRoaXMudG90YWxfaG9sZDtcclxuICAgICAgICBjb25zdCB0b3RhbF9jb3N0ID0gdGhpcy50b3RhbF9jb3N0O1xyXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5UUkFESU5HX1BSSUNFX1BSRUNJU0lPTjtcclxuXHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX2FuYWx5c2lzID0gW107XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX2FuYWx5c2lzLnB1c2goW1wiXHU3Qjc5XHU3ODAxXHU3QzdCXHU1NzhCXCIsIFwiXHU2MzAxXHU0RUQzXHU4MEExXHU2NTcwXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCIsIFwiXHU2MzAxXHU0RUQzXHU1NzQ3XHU0RUY3XCIsIFwiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFwiXHU2MzAxXHU0RUQzXHU3NkM4XHU0RThGXCIsIFwiXHU2RTA1XHU2ODNDXHU3NkM4XHU1MjI5XCIsIFwiXHU2RTA1XHU0RUQzXHU3NkM4XHU1MjI5XCIsIFwiXHU2MzAxXHU0RUQzXHU1MzYwXHU2QkQ0XCIsIFwiXHU2NzJDXHU5MUQxXHU1MzYwXHU2QkQ0XCJdKTtcclxuICAgICAgICAvLyBcdTYwM0JcdTk4OURcclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXMucHVzaChbXCJcdTYwM0JcdTk4OURcIixdKTtcclxuICAgICAgICAvLyBcdTVDMEZcdTdGNTFcclxuICAgICAgICB0aGlzLkNhbGNIb2xkaW5nUGVyY2VudChcIlx1NUMwRlx1N0Y1MVwiLCB0aGlzLmVtcHR5X3ByaWNlLCB0aGlzLmNsZWFyX2F2Z19wcmljZSk7XHJcbiAgICAgICAgLy8gXHU0RTJEXHU3RjUxXHJcbiAgICAgICAgdGhpcy5DYWxjSG9sZGluZ1BlcmNlbnQoXCJcdTRFMkRcdTdGNTFcIiwgdGhpcy5lbXB0eV9wcmljZSwgdGhpcy5jbGVhcl9hdmdfcHJpY2UpO1xyXG4gICAgICAgIC8vIFx1NTkyN1x1N0Y1MVxyXG4gICAgICAgIHRoaXMuQ2FsY0hvbGRpbmdQZXJjZW50KFwiXHU1OTI3XHU3RjUxXCIsIHRoaXMuZW1wdHlfcHJpY2UsIHRoaXMuY2xlYXJfYXZnX3ByaWNlKTtcclxuICAgICAgICAvLyBcdTdEMkZcdTc5RUZcclxuICAgICAgICBsZXQgZ3JpZF90b3RhbF9ob2xkID0gdGhpcy50b3RhbF9yZXRhaW47XHJcbiAgICAgICAgbGV0IGdyaWRfdG90YWxfY29zdCA9IHRoaXMucmV0YWluX2Nvc3Q7XHJcbiAgICAgICAgbGV0IGdyaWRfY3VycmVudF92YWx1ZSA9IE1hdGguZmxvb3IoZ3JpZF90b3RhbF9ob2xkICogdGhpcy5jdXJyZW50X3ByaWNlKTtcclxuICAgICAgICBsZXQgZ3JpZF9lbXB0eV9pbmNvbWUgPSBncmlkX3RvdGFsX2hvbGQgKiB0aGlzLmVtcHR5X3ByaWNlIC0gZ3JpZF90b3RhbF9jb3N0O1xyXG4gICAgICAgIGxldCBncmlkX2NsZWFyX2luY29tZSA9IGdyaWRfdG90YWxfaG9sZCAqIHRoaXMuY2xlYXJfYXZnX3ByaWNlIC0gZ3JpZF90b3RhbF9jb3N0O1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19hbmFseXNpcy5wdXNoKFtcIlx1N0QyRlx1NzlFRlwiLCBTdHJpbmcoZ3JpZF90b3RhbF9ob2xkKSwgU3RyaW5nKGdyaWRfdG90YWxfY29zdCksIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgQXZlcmFnZVByaWNlU3RyKGdyaWRfdG90YWxfY29zdCwgZ3JpZF90b3RhbF9ob2xkLCBwcmVjaXNpb24pLCB0aGlzLmN1cnJlbnRfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nKGdyaWRfY3VycmVudF92YWx1ZSAtIGdyaWRfdG90YWxfY29zdCksIGdyaWRfZW1wdHlfaW5jb21lLnRvRml4ZWQoMCksIGdyaWRfY2xlYXJfaW5jb21lLnRvRml4ZWQoMCksIFxyXG4gICAgICAgICAgICAgICAgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2hvbGQsIHRvdGFsX2hvbGQsIDIpLCBQcm9wb3J0aW9uUGN0U3RyKGdyaWRfdG90YWxfY29zdCwgdG90YWxfY29zdCwgMildKTtcclxuICAgICAgICAvLyBcdTg4NjVcdTRFRDNcclxuICAgICAgICBncmlkX3RvdGFsX2hvbGQgPSAwO1xyXG4gICAgICAgIGdyaWRfdG90YWxfY29zdCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLmhvbGRpbmdfcmVjb3JkLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzJdLnN0YXJ0c1dpdGgoXCJcdTg4NjVcdTRFRDNcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdyaWRfdG90YWxfaG9sZCArPSBOdW1iZXIodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzRdKTtcclxuICAgICAgICAgICAgICAgIGdyaWRfdG90YWxfY29zdCArPSBOdW1iZXIodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzNdKSAqIE51bWJlcih0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bNF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyaWRfdG90YWxfY29zdCA9IE1hdGguY2VpbChncmlkX3RvdGFsX2Nvc3QpO1xyXG4gICAgICAgIGdyaWRfY3VycmVudF92YWx1ZSA9IE1hdGguZmxvb3IoZ3JpZF90b3RhbF9ob2xkICogdGhpcy5jdXJyZW50X3ByaWNlKTtcclxuICAgICAgICBncmlkX2VtcHR5X2luY29tZSA9IGdyaWRfdG90YWxfaG9sZCAqIHRoaXMuZW1wdHlfcHJpY2UgLSBncmlkX3RvdGFsX2Nvc3Q7XHJcbiAgICAgICAgZ3JpZF9jbGVhcl9pbmNvbWUgPSBncmlkX3RvdGFsX2hvbGQgKiB0aGlzLmNsZWFyX2F2Z19wcmljZSAtIGdyaWRfdG90YWxfY29zdDtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfYW5hbHlzaXMucHVzaChbXCJcdTg4NjVcdTRFRDNcIiwgU3RyaW5nKGdyaWRfdG90YWxfaG9sZCksIFN0cmluZyhncmlkX3RvdGFsX2Nvc3QpLCBTdHJpbmcoZ3JpZF9jdXJyZW50X3ZhbHVlKSxcclxuICAgICAgICAgICAgICAgIEF2ZXJhZ2VQcmljZVN0cihncmlkX3RvdGFsX2Nvc3QsIGdyaWRfdG90YWxfaG9sZCwgcHJlY2lzaW9uKSwgdGhpcy5jdXJyZW50X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUgLSBncmlkX3RvdGFsX2Nvc3QpLCBncmlkX2VtcHR5X2luY29tZS50b0ZpeGVkKDApLCBncmlkX2NsZWFyX2luY29tZS50b0ZpeGVkKDApLCBcclxuICAgICAgICAgICAgICAgIFByb3BvcnRpb25QY3RTdHIoZ3JpZF90b3RhbF9ob2xkLCB0b3RhbF9ob2xkLCAyKSwgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2Nvc3QsIHRvdGFsX2Nvc3QsIDIpXSk7XHJcbiAgICAgICAgLy8gXHU2MDNCXHU5ODlEXHJcbiAgICAgICAgZ3JpZF90b3RhbF9ob2xkID0gMDtcclxuICAgICAgICBncmlkX3RvdGFsX2Nvc3QgPSAwO1xyXG4gICAgICAgIGdyaWRfY3VycmVudF92YWx1ZSA9IDA7XHJcbiAgICAgICAgZ3JpZF9lbXB0eV9pbmNvbWUgPSAwO1xyXG4gICAgICAgIGdyaWRfY2xlYXJfaW5jb21lID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MjsgaWR4PHRoaXMuaG9sZGluZ19hbmFseXNpcy5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ3JpZF90b3RhbF9ob2xkICs9IE51bWJlcih0aGlzLmhvbGRpbmdfYW5hbHlzaXNbaWR4XVsxXSk7XHJcbiAgICAgICAgICAgIGdyaWRfdG90YWxfY29zdCArPSBOdW1iZXIodGhpcy5ob2xkaW5nX2FuYWx5c2lzW2lkeF1bMl0pO1xyXG4gICAgICAgICAgICBncmlkX2N1cnJlbnRfdmFsdWUgKz0gTnVtYmVyKHRoaXMuaG9sZGluZ19hbmFseXNpc1tpZHhdWzNdKTtcclxuICAgICAgICAgICAgZ3JpZF9lbXB0eV9pbmNvbWUgKz0gTnVtYmVyKHRoaXMuaG9sZGluZ19hbmFseXNpc1tpZHhdWzddKTtcclxuICAgICAgICAgICAgZ3JpZF9jbGVhcl9pbmNvbWUgKz0gTnVtYmVyKHRoaXMuaG9sZGluZ19hbmFseXNpc1tpZHhdWzhdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX2FuYWx5c2lzWzFdID0gW1wiXHU2MDNCXHU5ODlEXCIsIFN0cmluZyhncmlkX3RvdGFsX2hvbGQpLCBTdHJpbmcoZ3JpZF90b3RhbF9jb3N0KSwgU3RyaW5nKGdyaWRfY3VycmVudF92YWx1ZSksXHJcbiAgICAgICAgICAgICAgICBBdmVyYWdlUHJpY2VTdHIoZ3JpZF90b3RhbF9jb3N0LCBncmlkX3RvdGFsX2hvbGQsIHByZWNpc2lvbiksIHRoaXMuY3VycmVudF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcoZ3JpZF9jdXJyZW50X3ZhbHVlIC0gZ3JpZF90b3RhbF9jb3N0KSwgZ3JpZF9lbXB0eV9pbmNvbWUudG9GaXhlZCgwKSwgZ3JpZF9jbGVhcl9pbmNvbWUudG9GaXhlZCgwKSwgXHJcbiAgICAgICAgICAgICAgICBQcm9wb3J0aW9uUGN0U3RyKGdyaWRfdG90YWxfaG9sZCwgdG90YWxfaG9sZCwgMiksIFByb3BvcnRpb25QY3RTdHIoZ3JpZF90b3RhbF9jb3N0LCB0b3RhbF9jb3N0LCAyKV07XHJcbiAgICB9XHJcblxyXG4gICAgQ2FsY0hvbGRpbmdQZXJjZW50KGdyaWRfdHlwZTogc3RyaW5nLCBlbXB0eV9wcmljZTogbnVtYmVyLCBjbGVhcl9hdmdfcHJpY2U6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCB0b3RhbF9ob2xkID0gdGhpcy50b3RhbF9ob2xkO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsX2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3Q7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBncmlkX3RvdGFsX2hvbGQgPSAwOyAvLyBcdTYzMDFcdTRFRDNcdTgwQTFcdTY1NzBcclxuICAgICAgICBsZXQgZ3JpZF90b3RhbF9jb3N0ID0gMDsgLy8gXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXHJcbiAgICAgICAgbGV0IGdyaWRfZW1wdHlfaW5jb21lID0gMDsgLy8gXHU2RTA1XHU2ODNDXHU3NkM4XHU1MjI5XHJcbiAgICAgICAgbGV0IGdyaWRfY2xlYXJfaW5jb21lID0gMDsgLy8gXHU2RTA1XHU0RUQzXHU3NkM4XHU1MjI5XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLmhvbGRpbmdfcmVjb3JkLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzJdLnN0YXJ0c1dpdGgoZ3JpZF90eXBlKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JpZF9ob2xkID0gTnVtYmVyKHRoaXMuaG9sZGluZ19yZWNvcmRbaWR4XVs0XSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncmlkX2Nvc3QgPSBOdW1iZXIodGhpcy5ob2xkaW5nX3JlY29yZFtpZHhdWzNdKSAqIE51bWJlcih0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bNF0pO1xyXG4gICAgICAgICAgICAgICAgZ3JpZF90b3RhbF9ob2xkICs9IGdyaWRfaG9sZDtcclxuICAgICAgICAgICAgICAgIGdyaWRfdG90YWxfY29zdCArPSBncmlkX2Nvc3Q7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JpZF9yb3cgPSB0aGlzLkZpbmRUcmFkaW5nR3JpZFJvdyh0aGlzLmhvbGRpbmdfcmVjb3JkW2lkeF1bMl0pOyAvLyA3IDggOSBcIlx1NTM1Nlx1NTFGQVx1NEVGN1x1NjgzQ1wiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGRFx1NjU3MFwiLCBcIlx1NTM1Nlx1NTFGQVx1OTFEMVx1OTg5RFwiXHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eV9pbmNvbWUgPSBOdW1iZXIoZ3JpZF9yb3dbOV0pICsgKGdyaWRfaG9sZCAtIE51bWJlcihncmlkX3Jvd1s4XSkpICogZW1wdHlfcHJpY2UgLSBncmlkX2Nvc3Q7XHJcbiAgICAgICAgICAgICAgICBncmlkX2VtcHR5X2luY29tZSArPSBlbXB0eV9pbmNvbWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhcl9pbmNvbWUgPSBOdW1iZXIoZ3JpZF9yb3dbOV0pICsgKGdyaWRfaG9sZCAtIE51bWJlcihncmlkX3Jvd1s4XSkpICogY2xlYXJfYXZnX3ByaWNlIC0gZ3JpZF9jb3N0O1xyXG4gICAgICAgICAgICAgICAgZ3JpZF9jbGVhcl9pbmNvbWUgKz0gY2xlYXJfaW5jb21lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyaWRfdG90YWxfY29zdCA9IE1hdGguY2VpbChncmlkX3RvdGFsX2Nvc3QpO1xyXG4gICAgICAgIGxldCBncmlkX2N1cnJlbnRfdmFsdWUgPSBNYXRoLmZsb29yKGdyaWRfdG90YWxfaG9sZCAqIHRoaXMuY3VycmVudF9wcmljZSk7XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX2FuYWx5c2lzLnB1c2goW2dyaWRfdHlwZSwgU3RyaW5nKGdyaWRfdG90YWxfaG9sZCksIFN0cmluZyhncmlkX3RvdGFsX2Nvc3QpLCBTdHJpbmcoZ3JpZF9jdXJyZW50X3ZhbHVlKSxcclxuICAgICAgICAgICAgICAgIEF2ZXJhZ2VQcmljZVN0cihncmlkX3RvdGFsX2Nvc3QsIGdyaWRfdG90YWxfaG9sZCwgcHJlY2lzaW9uKSwgdGhpcy5jdXJyZW50X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhncmlkX2N1cnJlbnRfdmFsdWUgLSBncmlkX3RvdGFsX2Nvc3QpLCBncmlkX2VtcHR5X2luY29tZS50b0ZpeGVkKDApLCBncmlkX2NsZWFyX2luY29tZS50b0ZpeGVkKDApLCBcclxuICAgICAgICAgICAgICAgIFByb3BvcnRpb25QY3RTdHIoZ3JpZF90b3RhbF9ob2xkLCB0b3RhbF9ob2xkLCAyKSwgUHJvcG9ydGlvblBjdFN0cihncmlkX3RvdGFsX2Nvc3QsIHRvdGFsX2Nvc3QsIDIpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgQ2FsY1RyYWRpbmdJbmNvbWUodGl0bGVfdHh0OiBzdHJpbmcsIHNsdW1wX3BjdDogbnVtYmVyLCBlbXB0eV9wcmljZTogbnVtYmVyLCBjbGVhcl9hdmdfcHJpY2U6IG51bWJlciwgY2xlYXJfcHJpY2U6IG51bWJlciwgbmVlZF9zbHVtcDogYm9vbGVhbiA9IHRydWUpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHRvdGFsX2Nvc3QgPSB0aGlzLnRvdGFsX2Nvc3Q7XHJcbiAgICAgICAgbGV0IHRvdGFsX2NvdW50ID0gdGhpcy50b3RhbF9ob2xkO1xyXG4gICAgICAgIGxldCBlbXB0eV9jb3N0ID0gdGhpcy50b3RhbF9jb3N0O1xyXG4gICAgICAgIGxldCBlbXB0eV9jb3VudCA9IHRoaXMudG90YWxfaG9sZDtcclxuICAgICAgICBsZXQgY2xlYXJfaW5jb21lX21heCA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsX3NlbGxfY29zdCA9IDA7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZS5mb3JFYWNoKChyb3c6QXJyYXk8c3RyaW5nPiwgaTpudW1iZXIpID0+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50cmFkaW5nX3RhYmxlW2ldWzBdLnN0YXJ0c1dpdGgoXCJcdTUyMjlcdTZEQTZcIikpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyX2luY29tZV9tYXggPSBjbGVhcl9pbmNvbWVfbWF4ICsgTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVtpXVs5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW2ldWzBdKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBlbXB0eV9jb3N0ID0gZW1wdHlfY29zdCAtIE51bWJlcihyb3dbOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVtcHR5X2NvdW50ID0gZW1wdHlfY291bnQgLSBOdW1iZXIocm93WzhdKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhcl9pbmNvbWVfbWF4ID0gY2xlYXJfaW5jb21lX21heCArIChOdW1iZXIocm93WzRdKSAtIE51bWJlcihyb3dbOF0pKSAqIGNsZWFyX2F2Z19wcmljZTtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbF9zZWxsX2Nvc3QgPSB0b3RhbF9zZWxsX2Nvc3QgKyBOdW1iZXIocm93WzldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgVG9OdW1iZXIocm93WzFdKSA+PSBzbHVtcF9wY3QgJiYgbmVlZF9zbHVtcClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsX2Nvc3QgPSB0b3RhbF9jb3N0ICsgTnVtYmVyKHJvd1s1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsX2NvdW50ID0gdG90YWxfY291bnQgKyBOdW1iZXIocm93WzRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5X2Nvc3QgPSBlbXB0eV9jb3N0ICsgTnVtYmVyKHJvd1s1XSkgLSBOdW1iZXIocm93WzldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlfY291bnQgPSBlbXB0eV9jb3VudCArIE51bWJlcihyb3dbNF0pIC0gTnVtYmVyKHJvd1s4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2luY29tZV9tYXggPSBjbGVhcl9pbmNvbWVfbWF4ICsgKE51bWJlcihyb3dbNF0pIC0gTnVtYmVyKHJvd1s4XSkpICogY2xlYXJfYXZnX3ByaWNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbF9zZWxsX2Nvc3QgPSB0b3RhbF9zZWxsX2Nvc3QgKyBOdW1iZXIocm93WzldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjbGVhcl9pbmNvbWVfbWF4ID0gTWF0aC5mbG9vcihjbGVhcl9pbmNvbWVfbWF4IC0gZW1wdHlfY29zdCk7XHJcbiAgICAgICAgLy8gW1wiXCIsIFwiXHU2MzAxXHU0RUQzXHU4MEExXHU2NTcwXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCIsIFwiXHU2MzAxXHU0RUQzXHU1NzQ3XHU0RUY3XCIsIFwiXHU1QjlFXHU5NjQ1XHU0RUY3XHU2ODNDXCIsIFwiXHU2MzAxXHU0RUQzXHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU4RDQ0XHU5MUQxXCIsIFwiXHU4RDI2XHU5NzYyXHU4RDQ0XHU5MUQxXCIsIFwiXHU2Mjk1XHU1MTY1XHU3NkM4XHU0RThGXCIsIFwiXHU2Mjk1XHU1MTY1XHU0RUQzXHU0RjREXCJdXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX2luY29tZS5wdXNoKHRoaXMuR2VuZXJhdGVJbmNvbWVSb3codGl0bGVfdHh0ICsgXCJcdTYzMDFcdTRFRDNcIiwgdG90YWxfY291bnQsIHRvdGFsX2Nvc3QsIHRoaXMudGFyZ2V0X3ByaWNlICogc2x1bXBfcGN0LCB0b3RhbF9jb3N0LCB0aGlzLnRvdGFsX2Nvc3QsIDApKTtcclxuICAgICAgICB0aGlzLnRyYWRpbmdfaW5jb21lLnB1c2godGhpcy5HZW5lcmF0ZUluY29tZVJvdyh0aXRsZV90eHQgKyBcIlx1NkUwNVx1NjgzQ1wiLCBlbXB0eV9jb3VudCwgZW1wdHlfY29zdCwgZW1wdHlfcHJpY2UsIHRvdGFsX2Nvc3QsIDAsIHRvdGFsX3NlbGxfY29zdCkpO1xyXG4gICAgICAgIHRoaXMudHJhZGluZ19pbmNvbWUucHVzaChbdGl0bGVfdHh0ICsgXCJcdTZFMDVcdTRFRDNcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCIsIGNsZWFyX3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSwgU3RyaW5nKGNsZWFyX2luY29tZV9tYXgpLCBTdHJpbmcodG90YWxfY29zdCksIFxyXG4gICAgICAgICAgICAgICAgICAgIFN0cmluZyh0b3RhbF9zZWxsX2Nvc3QgKyBlbXB0eV9jb3N0ICsgY2xlYXJfaW5jb21lX21heCksIFRvVHJhZGluZ0dhcCh0b3RhbF9jb3N0LCB0b3RhbF9zZWxsX2Nvc3QgKyBlbXB0eV9jb3N0ICsgY2xlYXJfaW5jb21lX21heCwgMiksIFwiLVwiXSk7XHJcbiAgICB9XHJcblxyXG4gICAgR2VuZXJhdGVDbGVhclJvdyhncmlkX25hbWU6IHN0cmluZywgaWR4OiBudW1iZXIsIGdyaWRfc3RlcF9wY3Q6IG51bWJlciwgc2VsbF9jb3VudDogbnVtYmVyKTogc3RyaW5nW11cclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgcHJpY2Vfc3RlcCA9IE1hdGguZmxvb3IoKDEwMCArIE1hdGguZmxvb3IoZ3JpZF9zdGVwX3BjdCAqIDEwMCkpICoqIGlkeCAvIDEwMCAqKiAoaWR4IC0xKSkgLyAxMDA7XHJcbiAgICAgICAgY29uc3Qgc2VsbF9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIHByaWNlX3N0ZXAsIHByZWNpc2lvbik7XHJcbiAgICAgICAgbGV0IGNsZWFyX2NvdW50ID0gdGhpcy5jbGVhcl9zZWxsX3JlY29yZC5nZXQoZ3JpZF9uYW1lICsgU3RyaW5nKGlkeCkpO1xyXG4gICAgICAgIGlmIChjbGVhcl9jb3VudCA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjbGVhcl9jb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZ3JpZF9uYW1lICsgU3RyaW5nKGlkeCksIFRvUGVyY2VudChwcmljZV9zdGVwKSwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgKHNlbGxfcHJpY2UgLSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJJR0dFUl9BRERfUE9JTlQpLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIHNlbGxfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLCBTdHJpbmcoc2VsbF9jb3VudCAtIGNsZWFyX2NvdW50KSwgU3RyaW5nKE1hdGguY2VpbChzZWxsX3ByaWNlICogKHNlbGxfY291bnQgLSBjbGVhcl9jb3VudCkpKSwgXCItXCIsIFwiK1wiICsgVG9QZXJjZW50KGdyaWRfc3RlcF9wY3QpXVxyXG4gICAgfVxyXG5cclxuICAgIEdlbmVyYXRlSW5jb21lUm93KGdyaWRfbmFtZTogc3RyaW5nLCB0b3RhbF9jb3VudDogbnVtYmVyLCB0b3RhbF9jb3N0OiBudW1iZXIsIGN1cnJlbnRfcHJpY2U6IG51bWJlciwgbWF4X2Nvc3Q6IG51bWJlciwgY3VycmVudF9jb3N0OiBudW1iZXIsIHNlbGxfdmFsdWU6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvLyBbXCJcIiwgXCJcdTYzMDFcdTRFRDNcdTgwQTFcdTY1NzBcIiwgXCJcdTUzNjBcdTc1MjhcdTY3MkNcdTkxRDFcIiwgXCJcdTYzMDFcdTRFRDNcdTkxRDFcdTk4OURcIiwgXCJcdTYzMDFcdTRFRDNcdTU3NDdcdTRFRjdcIiwgXCJcdTVCOUVcdTk2NDVcdTRFRjdcdTY4M0NcIiwgXCJcdTYzMDFcdTRFRDNcdTc2QzhcdTRFOEZcIiwgXCJcdTYyOTVcdTUxNjVcdThENDRcdTkxRDFcIiwgXCJcdThEMjZcdTk3NjJcdThENDRcdTkxRDFcIiwgXCJcdTYyOTVcdTUxNjVcdTc2QzhcdTRFOEZcIiwgXCJcdTYyOTVcdTUxNjVcdTRFRDNcdTRGNERcIl1cclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgY3VycmVudF92YWx1ZSA9IE15Rmxvb3IodG90YWxfY291bnQgKiBjdXJyZW50X3ByaWNlLCAxKTtcclxuICAgICAgICBjb25zdCB0b3RhbF9pbmNvbWUgPSBjdXJyZW50X3ZhbHVlIC0gdG90YWxfY29zdDtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSBUb1BlcmNlbnQoY3VycmVudF9jb3N0IC8gbWF4X2Nvc3QpO1xyXG4gICAgICAgIGlmIChjdXJyZW50X2Nvc3QgPT0gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gXCItXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZ3JpZF9uYW1lLCBTdHJpbmcodG90YWxfY291bnQpLCBTdHJpbmcodG90YWxfY29zdCksIFN0cmluZyhjdXJyZW50X3ZhbHVlKSwgKHRvdGFsX2Nvc3QgLyBNYXRoLm1heCh0b3RhbF9jb3VudCwgMSkpLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJpY2UudG9GaXhlZChwcmVjaXNpb24pLCBTdHJpbmcodG90YWxfaW5jb21lKSwgU3RyaW5nKG1heF9jb3N0KSwgIFN0cmluZyhzZWxsX3ZhbHVlICsgY3VycmVudF92YWx1ZSksIFRvVHJhZGluZ0dhcChtYXhfY29zdCwgdG90YWxfaW5jb21lICsgbWF4X2Nvc3QsIDIpLCBwb3NpdGlvbl07XHJcbiAgICB9XHJcblxyXG4gICAgQ2FsY0NsZWFyUHJpY2Uoc3RlcF9wY3Q6IG51bWJlciwgc3RlcF9pZHg6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgcHJpY2Vfc3RlcCA9IE1hdGguZmxvb3IoKDEwMCArIE1hdGguZmxvb3Ioc3RlcF9wY3QgKiAxMDApKSAqKiBzdGVwX2lkeCAvIDEwMCAqKiAoc3RlcF9pZHggLTEpKSAvIDEwMDtcclxuICAgICAgICByZXR1cm4gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgcHJpY2Vfc3RlcCwgcHJlY2lzaW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBJc05lZWRNb25pdG9yKHRhYmxlX2luZGV4OiBudW1iZXIsIGlzX3NlbGw6IGJvb2xlYW4sIGN1cnJlbnRfcHJpY2U6IG51bWJlciwgbWF4X3Jpc2VfcGN0OiBudW1iZXIpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKGlzX3NlbGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTg5ODFcdTYzMDJcdTUzNTZcdTUxRkFcdTc2RDFcdTYzQTdcdTUzNTVcclxuICAgICAgICAgICAgY29uc3Qgc2VsbF9wcmljZSA9IE51bWJlcih0aGlzLnRyYWRpbmdfdGFibGVbdGFibGVfaW5kZXhdWzddKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRfcHJpY2UgKiAoMS4wICsgbWF4X3Jpc2VfcGN0KSA+PSBzZWxsX3ByaWNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTg5ODFcdTYzMDJcdTRFNzBcdTUxNjVcdTc2RDFcdTYzQTdcdTUzNTVcclxuICAgICAgICAgICAgY29uc3QgYnV5X3ByaWNlID0gTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVt0YWJsZV9pbmRleF1bM10pO1xyXG4gICAgICAgICAgICBpZiAoYnV5X3ByaWNlIDwgdGhpcy50YXJnZXRfcHJpY2UgKiB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOSU1VTV9CVVlfUENUKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRfcHJpY2UgKiAoMS4wIC0gbWF4X3Jpc2VfcGN0KSA8PSBidXlfcHJpY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIElzRGlzYWJsZVJvdyh0YWJsZV9pbmRleDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHByaWNlX3BjdCA9IFRvTnVtYmVyKHRoaXMudHJhZGluZ190YWJsZVt0YWJsZV9pbmRleF1bMV0pO1xyXG4gICAgICAgIGlmIChwcmljZV9wY3QgPCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOSU1VTV9CVVlfUENUKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRmluZFRyYWRpbmdHcmlkUm93KGdyaWRfbmFtZTogc3RyaW5nKTogc3RyaW5nIFtdXHJcbiAgICB7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDx0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWRpbmdfdGFibGVbaWR4XVswXSA9PSBncmlkX25hbWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYWRpbmdfdGFibGVbaWR4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgU29ydFRyYWRpbmdUYWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGggPD0gMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlLnB1c2goW1wiXHU1MDVDXHU2QjYyXHU3RUJGXCIsIFwiMCVcIixdKTtcclxuICAgICAgICBsZXQgbW92ZV9pZHggPSAwO1xyXG4gICAgICAgIGxldCBtb3ZlX3JvdyA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTE7IGlkeDx0aGlzLnRyYWRpbmdfdGFibGUubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWRpbmdfdGFibGVbaWR4XVsxXSA9PSBcIjAlXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhpZHgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlX2lkeCA9IGlkeDtcclxuICAgICAgICAgICAgICAgIG1vdmVfcm93ID0gdGhpcy50cmFkaW5nX3RhYmxlW21vdmVfaWR4XTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkeDI9bW92ZV9pZHg7IGlkeDI8dGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aCAtIDE7IGlkeDIrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbaWR4Ml0gPSB0aGlzLnRyYWRpbmdfdGFibGVbaWR4MiArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9tb25pdG9yX3Jvd3MuaW5kZXhPZihpZHgyKzEpICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzW3RoaXMuYnV5X21vbml0b3Jfcm93cy5pbmRleE9mKGlkeDIrMSldID0gaWR4MjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmluZGV4T2YoaWR4MisxKSAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzW3RoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmluZGV4T2YoaWR4MisxKV0gPSBpZHgyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxsX21vbml0b3Jfcm93cy5pbmRleE9mKGlkeDIrMSkgIT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzW3RoaXMuc2VsbF9tb25pdG9yX3Jvd3MuaW5kZXhPZihpZHgyKzEpXSA9IGlkeDI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MuaW5kZXhPZihpZHgyKzEpICE9IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5pbmRleE9mKGlkeDIrMSldID0gaWR4MjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbdGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aC0xXSA9IG1vdmVfcm93O1xyXG4gICAgICAgICAgICAgICAgaWR4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCAiLypcclxuICAgIFx1N0Y1MVx1NjgzQ1x1N0I1Nlx1NzU2NVx1NzY4NFx1OEJBMVx1N0I5N1x1OTAzQlx1OEY5MVx1RkYwQ1x1NkEyMVx1NUYwRjFcdUZGMENcdTlFRDhcdThCQTRcdTZBMjFcdTVGMEZcclxuICAgIFx1NjMwOVx1NzE2N1x1NUMwRlx1NEUyRFx1NTkyN1x1NEUwRFx1NTQwQ1x1NzY4NFx1NjMwN1x1NUI5QVx1NkI2NVx1OEZEQlx1NTAzQ1xyXG4qL1xyXG5pbXBvcnQgeyBTR1JJRF9UWVBFX05BTUVfU1RSLCBNR1JJRF9UWVBFX05BTUVfU1RSLCBMR1JJRF9UWVBFX05BTUVfU1RSLCBQRVJGSVRfVFlQRV9OQU1FX1NUUiB9IGZyb20gXCIuL2xhbmdfc3RyXCI7XHJcbmltcG9ydCB7IE15Rmxvb3IsIE15Q2VpbCwgVG9QZXJjZW50LCBUb051bWJlciwgVG9UcmFkaW5nR2FwLCBGaXhlZFByaWNlLCBUb1BlcmNlbnRTdHIgfSBmcm9tIFwiLi9teW1hdGhcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52IH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xvZyB9IGZyb20gXCIuL3JlbW90ZV91dGlsXCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nIH0gZnJvbSBcIi4vZ3JpZF90cmFkaW5nXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRUcmFkaW5nTW9kZU9uZSBleHRlbmRzIEdyaWRUcmFkaW5nIFxyXG57XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luX2VudjogUGx1Z2luRW52KVxyXG4gICAge1xyXG4gICAgICAgIHN1cGVyKHBsdWdpbl9lbnYpXHJcbiAgICAgICAgdGhpcy5tb2RlX3R5cGUgPSBcIk9uZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRHcmlkVHJhZGluZyhkYXRhOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuUGFyc2VSYXdEYXRhKGRhdGEpIHx8IHRoaXMuaXNfZW1wdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgVXBkYXRlUmVtb3RlUHJpY2UocmVtb3RlX3ByaWNlOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA9IHJlbW90ZV9wcmljZTtcclxuICAgICAgICBpZiAodGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA+IDAgJiYgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSAhPSB0aGlzLmN1cnJlbnRfcHJpY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfcHJpY2UgPSB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdUYWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLmRpc2FibGVfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlID0gW11cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbMF0gPSBbXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTUzNTZcdTUxRkFcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRkRcdTY1NzBcIiwgXCJcdTUzNTZcdTUxRkFcdTkxRDFcdTk4OURcIiwgXCJcdTc2RjhcdTVCRjlcdThEQ0NcdTVFNDVcIiwgXCJcdTc2RjhcdTVCRjlcdTZEQThcdTVFNDVcIl07XHJcblxyXG4gICAgICAgIGNvbnN0IHNjb3VudCA9IE1hdGguZmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QgLyB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1QpO1xyXG4gICAgICAgIGNvbnN0IG1jb3VudCA9IE1hdGguZmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QgLyB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1QpO1xyXG4gICAgICAgIGNvbnN0IGxjb3VudCA9IE1hdGguZmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk1BWF9TTFVNUF9QQ1QgLyB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QpO1xyXG4gICAgICAgIGNvbnN0IG1heF9yaXNlX3BjdCA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfUklTRV9QQ1Q7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDw9c2NvdW50OyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtpZHggKyAxXSA9IHRoaXMuR2VuZXJhdGVPbmVSb3coU0dSSURfVFlQRV9OQU1FX1NUUiwgaWR4LCB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1QsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX1JFVEFJTl9DT1VOVCwgdGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX0FERF9QQ1QpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYnV5X2dyaWRfcmVjb3JkLmluY2x1ZGVzKHRoaXMudHJhZGluZ190YWJsZVtpZHggKyAxXVswXSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coaWR4ICsgMSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTVDMEZcdTdGNTFcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9idXkgPSB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93c1t0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKGxhc3RfYnV5IDwgc2NvdW50ICsgMSkgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9idXkgKyAxKTtcclxuICAgICAgICAgICAgbGV0IGxhc3Rfc2VsbCA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wb3AoKTtcclxuICAgICAgICAgICAgaWYgKGxhc3Rfc2VsbCkgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbCk7XHJcbiAgICAgICAgICAgIC8vaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICBpZiAoZmFsc2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9zID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX3MsIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTVDMEZcdTdGNTFcdTc2ODRcdTk5OTZcdTdGNTFcdTRFNzBcdTUxNjVcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RfYnV5ID0gMTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihmaXJzdF9idXksIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKGZpcnN0X2J1eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTE7IGlkeDw9bWNvdW50OyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtzY291bnQgKyAxICsgaWR4XSA9IHRoaXMuR2VuZXJhdGVPbmVSb3coTUdSSURfVFlQRV9OQU1FX1NUUiwgaWR4LCB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1QsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX1JFVEFJTl9DT1VOVCwgdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX0FERF9QQ1QpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMuYnV5X2dyaWRfcmVjb3JkLmluY2x1ZGVzKHRoaXMudHJhZGluZ190YWJsZVtzY291bnQgKyAxICsgaWR4XVswXSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goc2NvdW50ICsgMSArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChzY291bnQgKyAxICsgaWR4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NEUyRFx1N0Y1MVx1NEU3MFx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihzY291bnQgKyAxICsgaWR4LCBmYWxzZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKHNjb3VudCArIDEgKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhzY291bnQgKyAxICsgaWR4KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChzY291bnQgKyAxICsgaWR4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDAgJiYgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXSA+IHNjb3VudCArIDEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTUzNTZcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX20gPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9tLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5yZW1vdmUobGFzdF9zZWxsX20pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9tKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD1sY291bnQ7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlW3Njb3VudCArIDEgKyBtY291bnQgKyBpZHhdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyhMR1JJRF9UWVBFX05BTUVfU1RSLCBpZHgsIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfUkVUQUlOX0NPVU5ULCB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfQUREX1BDVCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW3Njb3VudCArIDEgKyBtY291bnQgKyBpZHhdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzY291bnQgKyAxICsgbWNvdW50ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKHNjb3VudCArIDEgKyBtY291bnQgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1OTI3XHU3RjUxXHU0RTcwXHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKHNjb3VudCArIDEgKyBtY291bnQsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goc2NvdW50ICsgMSArIG1jb3VudCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KHNjb3VudCArIDEgKyBtY291bnQgKyBpZHgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVfcm93cy5wdXNoKHNjb3VudCArIDEgKyBtY291bnQgKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMCAmJiB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdID4gc2NvdW50ICsgMSArIG1jb3VudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NTM1Nlx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfbCA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX2wsIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnJlbW92ZShsYXN0X3NlbGxfbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX2wpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdlbmVyYXRlT25lUm93KGdyaWRfbmFtZTogc3RyaW5nLCBpZHg6IG51bWJlciwgZ3JpZF9zdGVwX3BjdDogbnVtYmVyLCBncmlkX3JldGFpbl9jb3VudDogbnVtYmVyLCBncmlkX2FkZF9wY3Q6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJBRElOR19QUklDRV9QUkVDSVNJT047XHJcbiAgICAgICAgY29uc3QgYnV5X3ByaWNlX3N0ZXAgPSAxMDAgLSBpZHggKiBNYXRoLmZsb29yKGdyaWRfc3RlcF9wY3QgKiAxMDApO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIGJ1eV9wcmljZV9zdGVwIC8gMTAwLCBwcmVjaXNpb24pO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9jb3VudCA9IE15Rmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk9ORV9HUklEX0xJTUlUICogKDEgKyBpZHggKiBncmlkX2FkZF9wY3QpIC8gYnV5X3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKVxyXG5cclxuICAgICAgICBjb25zdCBzZWxsX3ByaWNlX3N0ZXAgPSBidXlfcHJpY2Vfc3RlcCArIE1hdGguZmxvb3IoZ3JpZF9zdGVwX3BjdCAqIDEwMCk7XHJcbiAgICAgICAgY29uc3Qgc2VsbF9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIHNlbGxfcHJpY2Vfc3RlcCAvIDEwMCwgcHJlY2lzaW9uKTtcclxuICAgICAgICBjb25zdCByZXRhaW5fY291bnQgPSAoc2VsbF9wcmljZSAtIGJ1eV9wcmljZSkgKiBidXlfY291bnQgKiBncmlkX3JldGFpbl9jb3VudDtcclxuICAgICAgICBjb25zdCBzZWxsX2NvdW50ID0gTXlGbG9vcigoc2VsbF9wcmljZSAqIGJ1eV9jb3VudCAtIHJldGFpbl9jb3VudCkgLyBzZWxsX3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtncmlkX25hbWUgKyBTdHJpbmcoaWR4KSwgVG9QZXJjZW50U3RyKGJ1eV9wcmljZV9zdGVwKSwgKGJ1eV9wcmljZSArIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLCBcclxuICAgICAgICAgICAgICAgIGJ1eV9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksIFN0cmluZyhidXlfY291bnQpLCBTdHJpbmcoTWF0aC5jZWlsKGJ1eV9wcmljZSAqIGJ1eV9jb3VudCkpLFxyXG4gICAgICAgICAgICAgICAgKHNlbGxfcHJpY2UgLSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJJR0dFUl9BRERfUE9JTlQpLnRvRml4ZWQocHJlY2lzaW9uKSwgc2VsbF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcoc2VsbF9jb3VudCksIFN0cmluZyhNYXRoLmNlaWwoc2VsbF9wcmljZSAqIHNlbGxfY291bnQpKSwgVG9UcmFkaW5nR2FwKHNlbGxfcHJpY2UsIGJ1eV9wcmljZSwgMSksXHJcbiAgICAgICAgICAgICAgICBUb1RyYWRpbmdHYXAoYnV5X3ByaWNlLCBzZWxsX3ByaWNlLCAxKV07XHJcbiAgICB9XHJcbn0iLCAiLypcclxuICAgIFx1N0Y1MVx1NjgzQ1x1N0I1Nlx1NzU2NVx1NzY4NFx1OEJBMVx1N0I5N1x1OTAzQlx1OEY5MVx1RkYwQ1x1NkEyMVx1NUYwRjJcclxuICAgIFx1NkEyMVx1NUYwRjFcdTc2ODRcdTU3RkFcdTc4NDBcdTRFMEFcdTkwMUFcdThGQzdcdTUyMDZcdTZCQjVcdTdCNTZcdTc1NjVcdTRGN0ZcdTVGOTdcdTVDMEZcdTdGNTFcdTc2ODRcdTZCNjVcdThGREJcdTUwM0NcdTY2RjRcdTUyQTBcdTU3NDdcdTg4NjFcclxuKi9cclxuaW1wb3J0IHsgU0dSSURfVFlQRV9OQU1FX1NUUiwgTUdSSURfVFlQRV9OQU1FX1NUUiwgTEdSSURfVFlQRV9OQU1FX1NUUiB9IGZyb20gXCIuL2xhbmdfc3RyXCI7XHJcbmltcG9ydCB7IE15Rmxvb3IsIE15Q2VpbCwgVG9QZXJjZW50LCBUb051bWJlciwgVG9UcmFkaW5nR2FwLCBGaXhlZFByaWNlIH0gZnJvbSBcIi4vbXltYXRoXCI7XHJcbmltcG9ydCB7IFBsdWdpbkVudiB9IGZyb20gXCIuL3BsdWdpbl9lbnZcIjtcclxuaW1wb3J0IHsgRGVidWdMb2cgfSBmcm9tIFwiLi9yZW1vdGVfdXRpbFwiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZyB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkVHJhZGluZ01vZGVUd28gZXh0ZW5kcyBHcmlkVHJhZGluZyBcclxue1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbl9lbnY6IFBsdWdpbkVudilcclxuICAgIHtcclxuICAgICAgICBzdXBlcihwbHVnaW5fZW52KVxyXG4gICAgICAgIHRoaXMubW9kZV90eXBlID0gXCJUd29cIjtcclxuICAgIH1cclxuXHJcbiAgICBJbml0R3JpZFRyYWRpbmcoZGF0YTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGlmICh0aGlzLlBhcnNlUmF3RGF0YShkYXRhKSB8fCB0aGlzLmlzX2VtcHR5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5pc19lbXB0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRHcmlkUGFyYW0oKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFN0b2NrVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ1JlY29yZCgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRIb2xkaW5nQW5hbHlzaXMoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0luY29tZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nQW5hbHlzaXMoKTtcclxuICAgICAgICAgICAgdGhpcy5Tb3J0VHJhZGluZ1RhYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFVwZGF0ZVJlbW90ZVByaWNlKHJlbW90ZV9wcmljZTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2UgPSByZW1vdGVfcHJpY2U7XHJcbiAgICAgICAgaWYgKHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2UgPiAwICYmIHRoaXMucmVtb3RlX2N1cnJlbnRfcHJpY2UgIT0gdGhpcy5jdXJyZW50X3ByaWNlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3ByaWNlID0gdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZTtcclxuICAgICAgICAgICAgdGhpcy5pc19lbXB0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRHcmlkUGFyYW0oKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ1RhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFN0b2NrVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ1JlY29yZCgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRIb2xkaW5nQW5hbHlzaXMoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0VHJhZGluZ0luY29tZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nQW5hbHlzaXMoKTtcclxuICAgICAgICAgICAgdGhpcy5Tb3J0VHJhZGluZ1RhYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEluaXRUcmFkaW5nVGFibGUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMudHJhZGluZ190YWJsZSA9IFtdXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlWzBdID0gW1wiXHU3RjUxXHU2ODNDXHU3OUNEXHU3QzdCXCIsIFwiXHU0RUY3XHU2ODNDXHU2ODYzXHU0RjREXCIsIFwiXHU0RTcwXHU1MTY1XHU4OUU2XHU1M0QxXHU0RUY3XCIsIFwiXHU0RTcwXHU1MTY1XHU0RUY3XHU2ODNDXCIsIFwiXHU0RTcwXHU1MTY1XHU0RUZEXHU2NTcwXCIsIFwiXHU0RTcwXHU1MTY1XHU5MUQxXHU5ODlEXCIsIFwiXHU1MzU2XHU1MUZBXHU4OUU2XHU1M0QxXHU0RUY3XCIsIFwiXHU1MzU2XHU1MUZBXHU0RUY3XHU2ODNDXCIsIFwiXHU1MzU2XHU1MUZBXHU0RUZEXHU2NTcwXCIsIFwiXHU1MzU2XHU1MUZBXHU5MUQxXHU5ODlEXCIsIFwiXHU3NkY4XHU1QkY5XHU4RENDXHU1RTQ1XCIsIFwiXHU3NkY4XHU1QkY5XHU2REE4XHU1RTQ1XCJdO1xyXG5cclxuICAgICAgICBjb25zdCBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfU0xVTVBfUENUKSAvIE1hdGgubG9nKDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QpKSArIDE7XHJcbiAgICAgICAgY29uc3QgbWF4X3Jpc2VfcGN0ID0gdGhpcy5ncmlkX3NldHRpbmdzLk1BWF9SSVNFX1BDVDtcclxuICAgICAgICAvLyBcdTVDMEZcdTdGNTFcclxuICAgICAgICBsZXQgaWR4ID0gMDtcclxuICAgICAgICBsZXQgbWF4X3NsdW1wX3BjdCA9IE1hdGgucm91bmQoKDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTUFYX1NMVU1QX1BDVCkgKiAxMDApO1xyXG4gICAgICAgIGxldCBzZWxsX3ByaWNlX3N0ZXAgPSAxICsgdGhpcy5ncmlkX3NldHRpbmdzLlNHUklEX1NURVBfUENUO1xyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxjb3VudDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRpID0gMTtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3Rfc3RlcCA9IE1hdGgucm91bmQoMTAwICogTWF0aC5wb3coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCwgaSkpO1xyXG4gICAgICAgICAgICBjb25zdCBzbHVtcF9wY3QgPSBNYXRoLnJvdW5kKDEwMCAqIE1hdGgucG93KDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QsIGkgKyAxKSk7XHJcbiAgICAgICAgICAgIGxldCBzdGVwX3BjdCA9IGZpcnN0X3N0ZXA7XHJcbiAgICAgICAgICAgIHdoaWxlIChzdGVwX3BjdCA+IHNsdW1wX3BjdCAmJiBzdGVwX3BjdCA+IG1heF9zbHVtcF9wY3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtpZHggKyAxXSA9IHRoaXMuR2VuZXJhdGVPbmVSb3coU0dSSURfVFlQRV9OQU1FX1NUUiwgaWR4LCBzdGVwX3BjdCAvIDEwMCwgc2VsbF9wcmljZV9zdGVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfUkVUQUlOX0NPVU5ULCB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfQUREX1BDVCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW2lkeCArIDFdWzBdKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5wdXNoKGlkeCArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKGlkeCArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNEaXNhYmxlUm93KGlkeCArIDEpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWxsX3ByaWNlX3N0ZXAgPSBzdGVwX3BjdCAvIDEwMDtcclxuICAgICAgICAgICAgICAgIHN0ZXBfcGN0ID0gTWF0aC5yb3VuZChmaXJzdF9zdGVwICogKDEgLSB0aSAqIHRoaXMuZ3JpZF9zZXR0aW5ncy5TR1JJRF9TVEVQX1BDVCkpO1xyXG4gICAgICAgICAgICAgICAgdGkrKztcclxuICAgICAgICAgICAgICAgIGlkeCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJ1eV90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1QzBGXHU3RjUxXHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RfYnV5ID0gdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChsYXN0X2J1eSA8IHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGgpIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKGxhc3RfYnV5ICsgMSk7XHJcbiAgICAgICAgICAgIGxldCBsYXN0X3NlbGwgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucG9wKCk7XHJcbiAgICAgICAgICAgIGlmIChsYXN0X3NlbGwpIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGwpO1xyXG4gICAgICAgICAgICAvL2lmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgaWYgKGZhbHNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfcyA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9zLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1QzBGXHU3RjUxXHU3Njg0XHU5OTk2XHU3RjUxXHU0RTcwXHU1MTY1XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0X2J1eSA9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IoZmlyc3RfYnV5LCBmYWxzZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChmaXJzdF9idXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFx1NEUyRFx1N0Y1MVxyXG4gICAgICAgIGxldCBzdGFydF9pbmRleCA9IHRoaXMudHJhZGluZ190YWJsZS5sZW5ndGg7XHJcbiAgICAgICAgaWR4ID0gMDtcclxuICAgICAgICBzZWxsX3ByaWNlX3N0ZXAgPSAxO1xyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxjb3VudDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRpID0gMjtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3Rfc3RlcCA9IE1hdGgucm91bmQoMTAwICogTWF0aC5wb3coMSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVCwgaSkpO1xyXG4gICAgICAgICAgICBjb25zdCBzbHVtcF9wY3QgPSBNYXRoLnJvdW5kKDEwMCAqIE1hdGgucG93KDEgLSB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfU1RFUF9QQ1QsIGkgKyAxKSk7XHJcbiAgICAgICAgICAgIGxldCBzdGVwX3BjdCA9IE1hdGgucm91bmQoZmlyc3Rfc3RlcCAqICgxIC0gdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX1NURVBfUENUKSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChzdGVwX3BjdCA+IHNsdW1wX3BjdCAmJiBzdGVwX3BjdCA+IG1heF9zbHVtcF9wY3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF0gPSB0aGlzLkdlbmVyYXRlT25lUm93KE1HUklEX1RZUEVfTkFNRV9TVFIsIGlkeCArIDEsIHN0ZXBfcGN0IC8gMTAwLCBzZWxsX3ByaWNlX3N0ZXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9SRVRBSU5fQ09VTlQsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NR1JJRF9BRERfUENUKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhzdGFydF9pbmRleCArIGlkeCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW3N0YXJ0X2luZGV4ICsgaWR4XVswXSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NEUyRFx1N0Y1MVx1NEU3MFx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3Ioc3RhcnRfaW5kZXggKyBpZHgsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsbF9wcmljZV9zdGVwID0gc3RlcF9wY3QgLyAxMDA7XHJcbiAgICAgICAgICAgICAgICBzdGVwX3BjdCA9IE1hdGgucm91bmQoZmlyc3Rfc3RlcCAqICgxIC0gdGkgKiB0aGlzLmdyaWRfc2V0dGluZ3MuTUdSSURfU1RFUF9QQ1QpKTtcclxuICAgICAgICAgICAgICAgIHRpKys7XHJcbiAgICAgICAgICAgICAgICBpZHgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDAgJiYgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXSA+PSBzdGFydF9pbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NTM1Nlx1NTM1NVx1NzZEMVx1NjNBN1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0X3NlbGxfbSA9IHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3IobGFzdF9zZWxsX20sIHRydWUsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnJlbW92ZShsYXN0X3NlbGxfbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFx1NTkyN1x1N0Y1MVxyXG4gICAgICAgIHN0YXJ0X2luZGV4ID0gdGhpcy50cmFkaW5nX3RhYmxlLmxlbmd0aDtcclxuICAgICAgICBpZHggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxjb3VudDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2VsbF9wcmljZV9zdGVwID0gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLnBvdygxIC0gdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENULCBpKSkgLyAxMDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZXBfcGN0ID0gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLnBvdygxIC0gdGhpcy5ncmlkX3NldHRpbmdzLkxHUklEX1NURVBfUENULCBpICsgMSkpO1xyXG4gICAgICAgICAgICBpZiAoc3RlcF9wY3QgPiBtYXhfc2x1bXBfcGN0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbc3RhcnRfaW5kZXggKyBpZHhdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyhMR1JJRF9UWVBFX05BTUVfU1RSLCBpZHggKyAxLCBzdGVwX3BjdCAvIDEwMCwgc2VsbF9wcmljZV9zdGVwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfUkVUQUlOX0NPVU5ULCB0aGlzLmdyaWRfc2V0dGluZ3MuTEdSSURfQUREX1BDVCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coc3RhcnRfaW5kZXggKyBpZHgpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV5X2dyaWRfcmVjb3JkLmluY2x1ZGVzKHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF1bMF0pKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTU5MjdcdTdGNTFcdTRFNzBcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKHN0YXJ0X2luZGV4ICsgaWR4LCBmYWxzZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlkeCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMCAmJiB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdID49IHN0YXJ0X2luZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1MzU2XHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9sID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfbCwgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucmVtb3ZlKGxhc3Rfc2VsbF9sKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgR2VuZXJhdGVPbmVSb3coZ3JpZF9uYW1lOiBzdHJpbmcsIGlkeDogbnVtYmVyLCBidXlfcHJpY2Vfc3RlcDogbnVtYmVyLCBzZWxsX3ByaWNlX3N0ZXA6IG51bWJlciwgZ3JpZF9yZXRhaW5fY291bnQ6IG51bWJlciwgZ3JpZF9hZGRfcGN0OiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIGJ1eV9wcmljZV9zdGVwLCBwcmVjaXNpb24pO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9jb3VudCA9IE15Rmxvb3IodGhpcy5ncmlkX3NldHRpbmdzLk9ORV9HUklEX0xJTUlUICogKDEgKyBpZHggKiBncmlkX2FkZF9wY3QpIC8gYnV5X3ByaWNlLCB0aGlzLmdyaWRfc2V0dGluZ3MuTUlOX0JBVENIX0NPVU5UKVxyXG5cclxuICAgICAgICBjb25zdCBzZWxsX3ByaWNlID0gRml4ZWRQcmljZSh0aGlzLnRhcmdldF9wcmljZSwgc2VsbF9wcmljZV9zdGVwLCBwcmVjaXNpb24pO1xyXG4gICAgICAgIGNvbnN0IHJldGFpbl9jb3VudCA9IChzZWxsX3ByaWNlIC0gYnV5X3ByaWNlKSAqIGJ1eV9jb3VudCAqIGdyaWRfcmV0YWluX2NvdW50O1xyXG4gICAgICAgIGNvbnN0IHNlbGxfY291bnQgPSBNeUZsb29yKChzZWxsX3ByaWNlICogYnV5X2NvdW50IC0gcmV0YWluX2NvdW50KSAvIHNlbGxfcHJpY2UsIHRoaXMuZ3JpZF9zZXR0aW5ncy5NSU5fQkFUQ0hfQ09VTlQpO1xyXG5cclxuICAgICAgICByZXR1cm4gW2dyaWRfbmFtZSArIFN0cmluZyhpZHgpLCBUb1BlcmNlbnQoYnV5X3ByaWNlX3N0ZXApLCAoYnV5X3ByaWNlICsgdGhpcy5ncmlkX3NldHRpbmdzLlRSSUdHRVJfQUREX1BPSU5UKS50b0ZpeGVkKHByZWNpc2lvbiksIFxyXG4gICAgICAgICAgICAgICAgYnV5X3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSwgU3RyaW5nKGJ1eV9jb3VudCksIFN0cmluZyhNYXRoLmNlaWwoYnV5X3ByaWNlICogYnV5X2NvdW50KSksXHJcbiAgICAgICAgICAgICAgICAoc2VsbF9wcmljZSAtIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLCBzZWxsX3ByaWNlLnRvRml4ZWQocHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIFN0cmluZyhzZWxsX2NvdW50KSwgU3RyaW5nKE1hdGguY2VpbChzZWxsX3ByaWNlICogc2VsbF9jb3VudCkpLCBUb1RyYWRpbmdHYXAoc2VsbF9wcmljZSwgYnV5X3ByaWNlLCAxKSxcclxuICAgICAgICAgICAgICAgIFRvVHJhZGluZ0dhcChidXlfcHJpY2UsIHNlbGxfcHJpY2UsIDEpXTtcclxuICAgIH1cclxuXHJcbn0iLCAiLypcclxuICAgIFx1N0Y1MVx1NjgzQ1x1N0I1Nlx1NzU2NVx1NzY4NFx1OEJBMVx1N0I5N1x1OTAzQlx1OEY5MVx1RkYwQ1x1NkEyMVx1NUYwRjNcclxuICAgIFx1NzI3OVx1NkI4QVx1NTM4Nlx1NTNGMlx1NTM5Rlx1NTZFMFx1NUUyNlx1Njc2NVx1NzY4NFx1NEUwMFx1NEU5Qlx1N0Y1MVx1NjgzQ1x1N0I1Nlx1NzU2NVx1RkYwQ1x1OTcwMFx1ODk4MVx1NjI0Qlx1NTJBOFx1OEJCRVx1N0Y2RVx1N0Y1MVx1NjgzQ1x1NkJDRlx1NEUyQVx1NjgzQ1x1NUI1MFx1NzY4NFx1NkI2NVx1OEZEQlx1NTAzQ1xyXG4qL1xyXG5cclxuaW1wb3J0IHsgTXlGbG9vciwgTXlDZWlsLCBUb1BlcmNlbnQsIFRvTnVtYmVyLCBUb1RyYWRpbmdHYXAsIEZpeGVkUHJpY2UgfSBmcm9tIFwiLi9teW1hdGhcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52IH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZyB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkVHJhZGluZ01vZGVUaHJlZSBleHRlbmRzIEdyaWRUcmFkaW5nIFxyXG57XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHBsdWdpbl9lbnY6IFBsdWdpbkVudilcclxuICAgIHtcclxuICAgICAgICBzdXBlcihwbHVnaW5fZW52KVxyXG4gICAgICAgIHRoaXMubW9kZV90eXBlID0gXCJUaHJlZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIEluaXRHcmlkVHJhZGluZyhkYXRhOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuUGFyc2VSYXdEYXRhKGRhdGEpIHx8IHRoaXMuaXNfZW1wdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgVXBkYXRlUmVtb3RlUHJpY2UocmVtb3RlX3ByaWNlOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA9IHJlbW90ZV9wcmljZTtcclxuICAgICAgICBpZiAodGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSA+IDAgJiYgdGhpcy5yZW1vdGVfY3VycmVudF9wcmljZSAhPSB0aGlzLmN1cnJlbnRfcHJpY2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRfcHJpY2UgPSB0aGlzLnJlbW90ZV9jdXJyZW50X3ByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLmlzX2VtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEdyaWRQYXJhbSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5Jbml0U3RvY2tUYWJsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nUmVjb3JkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdEhvbGRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLkluaXRUcmFkaW5nSW5jb21lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuSW5pdFRyYWRpbmdBbmFseXNpcygpO1xyXG4gICAgICAgICAgICB0aGlzLlNvcnRUcmFkaW5nVGFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5pdFRyYWRpbmdUYWJsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MgPSBbXVxyXG4gICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzID0gW11cclxuICAgICAgICB0aGlzLmRpc2FibGVfcm93cyA9IFtdXHJcbiAgICAgICAgdGhpcy50cmFkaW5nX3RhYmxlID0gW11cclxuICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbMF0gPSBbXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTUzNTZcdTUxRkFcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRkRcdTY1NzBcIiwgXCJcdTUzNTZcdTUxRkFcdTkxRDFcdTk4OURcIiwgXCJcdTc2RjhcdTVCRjlcdThEQ0NcdTVFNDVcIiwgXCJcdTc2RjhcdTVCRjlcdTZEQThcdTVFNDVcIl07XHJcblxyXG4gICAgICAgIGNvbnN0IG1heF9yaXNlX3BjdCA9IHRoaXMuZ3JpZF9zZXR0aW5ncy5NQVhfUklTRV9QQ1Q7XHJcbiAgICAgICAgbGV0IGdyaWRfc2VsbF9wY3QgPSAxLjAgKyB0aGlzLmdyaWRfc2V0dGluZ3MuU0dSSURfU1RFUF9QQ1RcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMuc2dyaWRfc3RlcF90YWJsZS5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGdyaWRfYnV5X3BjdCA9IFRvTnVtYmVyKHRoaXMuc2dyaWRfc3RlcF90YWJsZVtpZHhdWzFdKVxyXG4gICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbaWR4ICsgMV0gPSB0aGlzLkdlbmVyYXRlT25lUm93KHRoaXMuc2dyaWRfc3RlcF90YWJsZVtpZHhdWzBdLCBncmlkX2J1eV9wY3QsIGdyaWRfc2VsbF9wY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHRoaXMuc2dyaWRfc3RlcF90YWJsZVtpZHhdWzJdKSwgTnVtYmVyKHRoaXMuc2dyaWRfc3RlcF90YWJsZVtpZHhdWzNdKSk7XHJcbiAgICAgICAgICAgIGdyaWRfc2VsbF9wY3QgPSBncmlkX2J1eV9wY3Q7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coaWR4ICsgMSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYnV5X2dyaWRfcmVjb3JkLmluY2x1ZGVzKHRoaXMudHJhZGluZ190YWJsZVtpZHggKyAxXVswXSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goaWR4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChpZHggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NUMwRlx1N0Y1MVxyXG4gICAgICAgICAgICBjb25zdCBsYXN0X2J1eSA9IHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzW3RoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGFzdF9idXkgPCB0aGlzLnNncmlkX3N0ZXBfdGFibGUubGVuZ3RoKSB0aGlzLmJ1eV9tb25pdG9yX3Jvd3MucHVzaChsYXN0X2J1eSArIDEpO1xyXG4gICAgICAgICAgICBsZXQgbGFzdF9zZWxsID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnBvcCgpO1xyXG4gICAgICAgICAgICBpZiAobGFzdF9zZWxsKSB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsKTtcclxuICAgICAgICAgICAgLy9pZiAodGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgIGlmIChmYWxzZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX3MgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfcywgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGxfbW9uaXRvcl9yb3dzLnB1c2gobGFzdF9zZWxsX3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIyNFx1NjVBRFx1NjYyRlx1NTQyNlx1NjMwMlx1NUMwRlx1N0Y1MVx1NzY4NFx1OTk5Nlx1N0Y1MVx1NEU3MFx1NTE2NVxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdF9idXkgPSAxO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGZpcnN0X2J1eSwgZmFsc2UsIHRoaXMuY3VycmVudF9wcmljZSwgbWF4X3Jpc2VfcGN0KSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goZmlyc3RfYnV5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc3RhcnRfaW5kZXggPSB0aGlzLnNncmlkX3N0ZXBfdGFibGUubGVuZ3RoICsgMTtcclxuICAgICAgICBncmlkX3NlbGxfcGN0ID0gMS4wICsgdGhpcy5ncmlkX3NldHRpbmdzLk1HUklEX1NURVBfUENUO1xyXG4gICAgICAgIGZvciAobGV0IGlkeD0wOyBpZHg8dGhpcy5tZ3JpZF9zdGVwX3RhYmxlLmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgZ3JpZF9idXlfcGN0ID0gVG9OdW1iZXIodGhpcy5tZ3JpZF9zdGVwX3RhYmxlW2lkeF1bMV0pXHJcbiAgICAgICAgICAgIHRoaXMudHJhZGluZ190YWJsZVtzdGFydF9pbmRleCArIGlkeF0gPSB0aGlzLkdlbmVyYXRlT25lUm93KHRoaXMubWdyaWRfc3RlcF90YWJsZVtpZHhdWzBdLCBncmlkX2J1eV9wY3QsIGdyaWRfc2VsbF9wY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyKHRoaXMubWdyaWRfc3RlcF90YWJsZVtpZHhdWzJdKSwgTnVtYmVyKHRoaXMubWdyaWRfc3RlcF90YWJsZVtpZHhdWzNdKSk7XHJcbiAgICAgICAgICAgIGdyaWRfc2VsbF9wY3QgPSBncmlkX2J1eV9wY3Q7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLklzRGlzYWJsZVJvdyhzdGFydF9pbmRleCArIGlkeCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZV9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1eV9ncmlkX3JlY29yZC5pbmNsdWRlcyh0aGlzLnRyYWRpbmdfdGFibGVbc3RhcnRfaW5kZXggKyBpZHhdWzBdKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXlfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucHVzaChzdGFydF9pbmRleCArIGlkeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTRFMkRcdTdGNTFcdTRFNzBcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLklzTmVlZE1vbml0b3Ioc3RhcnRfaW5kZXggKyBpZHgsIGZhbHNlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idXlfbW9uaXRvcl9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoID4gMCAmJiB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdID49IHN0YXJ0X2luZGV4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1MzU2XHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3Rfc2VsbF9tID0gdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzW3RoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuSXNOZWVkTW9uaXRvcihsYXN0X3NlbGxfbSwgdHJ1ZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MucmVtb3ZlKGxhc3Rfc2VsbF9tKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF9tb25pdG9yX3Jvd3MucHVzaChsYXN0X3NlbGxfbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhcnRfaW5kZXggPSB0aGlzLnNncmlkX3N0ZXBfdGFibGUubGVuZ3RoICsgdGhpcy5tZ3JpZF9zdGVwX3RhYmxlLmxlbmd0aCArIDE7XHJcbiAgICAgICAgZ3JpZF9zZWxsX3BjdCA9IDEuMCArIHRoaXMuZ3JpZF9zZXR0aW5ncy5MR1JJRF9TVEVQX1BDVDtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MDsgaWR4PHRoaXMubGdyaWRfc3RlcF90YWJsZS5sZW5ndGg7IGlkeCsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGdyaWRfYnV5X3BjdCA9IFRvTnVtYmVyKHRoaXMubGdyaWRfc3RlcF90YWJsZVtpZHhdWzFdKVxyXG4gICAgICAgICAgICB0aGlzLnRyYWRpbmdfdGFibGVbc3RhcnRfaW5kZXggKyBpZHhdID0gdGhpcy5HZW5lcmF0ZU9uZVJvdyh0aGlzLmxncmlkX3N0ZXBfdGFibGVbaWR4XVswXSwgZ3JpZF9idXlfcGN0LCBncmlkX3NlbGxfcGN0LFxyXG4gICAgICAgICAgICAgICAgICAgIE51bWJlcih0aGlzLmxncmlkX3N0ZXBfdGFibGVbaWR4XVsyXSksIE51bWJlcih0aGlzLmxncmlkX3N0ZXBfdGFibGVbaWR4XVszXSkpO1xyXG4gICAgICAgICAgICBncmlkX3NlbGxfcGN0ID0gZ3JpZF9idXlfcGN0O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc0Rpc2FibGVSb3coc3RhcnRfaW5kZXggKyBpZHgpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5idXlfZ3JpZF9yZWNvcmQuaW5jbHVkZXModGhpcy50cmFkaW5nX3RhYmxlW3N0YXJ0X2luZGV4ICsgaWR4XVswXSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV5X3RyaWdnZXJlZF9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLnB1c2goc3RhcnRfaW5kZXggKyBpZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1MjI0XHU2NUFEXHU2NjJGXHU1NDI2XHU2MzAyXHU1OTI3XHU3RjUxXHU0RTcwXHU1MzU1XHU3NkQxXHU2M0E3XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKHN0YXJ0X2luZGV4ICsgaWR4LCBmYWxzZSwgdGhpcy5jdXJyZW50X3ByaWNlLCBtYXhfcmlzZV9wY3QpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnV5X21vbml0b3Jfcm93cy5wdXNoKHN0YXJ0X2luZGV4ICsgaWR4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5sZW5ndGggPiAwICYmIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93c1t0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3MubGVuZ3RoIC0gMV0gPj0gc3RhcnRfaW5kZXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcdTUyMjRcdTY1QURcdTY2MkZcdTU0MjZcdTYzMDJcdTUzNTZcdTUzNTVcdTc2RDFcdTYzQTdcclxuICAgICAgICAgICAgY29uc3QgbGFzdF9zZWxsX2wgPSB0aGlzLnNlbGxfdHJpZ2dlcmVkX3Jvd3NbdGhpcy5zZWxsX3RyaWdnZXJlZF9yb3dzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5Jc05lZWRNb25pdG9yKGxhc3Rfc2VsbF9sLCB0cnVlLCB0aGlzLmN1cnJlbnRfcHJpY2UsIG1heF9yaXNlX3BjdCkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsbF90cmlnZ2VyZWRfcm93cy5yZW1vdmUobGFzdF9zZWxsX2wpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxsX21vbml0b3Jfcm93cy5wdXNoKGxhc3Rfc2VsbF9sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZW5lcmF0ZU9uZVJvdyhncmlkX25hbWU6IHN0cmluZywgZ3JpZF9idXlfcGN0OiBudW1iZXIsIGdyaWRfc2VsbF9wY3Q6IG51bWJlciwgZ3JpZF9hZGRfcGN0OiBudW1iZXIsIGdyaWRfcmV0YWluX2NvdW50OiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gdGhpcy5ncmlkX3NldHRpbmdzLlRSQURJTkdfUFJJQ0VfUFJFQ0lTSU9OO1xyXG4gICAgICAgIGNvbnN0IGJ1eV9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIGdyaWRfYnV5X3BjdCwgcHJlY2lzaW9uKTtcclxuICAgICAgICBjb25zdCBidXlfY291bnQgPSBNeUZsb29yKHRoaXMuZ3JpZF9zZXR0aW5ncy5PTkVfR1JJRF9MSU1JVCAqICgxICsgZ3JpZF9hZGRfcGN0KSAvIGJ1eV9wcmljZSwgdGhpcy5ncmlkX3NldHRpbmdzLk1JTl9CQVRDSF9DT1VOVClcclxuXHJcbiAgICAgICAgY29uc3Qgc2VsbF9wcmljZSA9IEZpeGVkUHJpY2UodGhpcy50YXJnZXRfcHJpY2UsIGdyaWRfc2VsbF9wY3QsIHByZWNpc2lvbik7XHJcbiAgICAgICAgY29uc3QgcmV0YWluX2NvdW50ID0gKHNlbGxfcHJpY2UgLSBidXlfcHJpY2UpICogYnV5X2NvdW50ICogZ3JpZF9yZXRhaW5fY291bnQ7XHJcbiAgICAgICAgY29uc3Qgc2VsbF9jb3VudCA9IE15Rmxvb3IoKHNlbGxfcHJpY2UgKiBidXlfY291bnQgLSByZXRhaW5fY291bnQpIC8gc2VsbF9wcmljZSwgdGhpcy5ncmlkX3NldHRpbmdzLk1JTl9CQVRDSF9DT1VOVCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbZ3JpZF9uYW1lLCBUb1BlcmNlbnQoZ3JpZF9idXlfcGN0KSwgKGJ1eV9wcmljZSArIHRoaXMuZ3JpZF9zZXR0aW5ncy5UUklHR0VSX0FERF9QT0lOVCkudG9GaXhlZChwcmVjaXNpb24pLCBcclxuICAgICAgICAgICAgICAgIGJ1eV9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksIFN0cmluZyhidXlfY291bnQpLCBTdHJpbmcoTWF0aC5jZWlsKGJ1eV9wcmljZSAqIGJ1eV9jb3VudCkpLFxyXG4gICAgICAgICAgICAgICAgKHNlbGxfcHJpY2UgLSB0aGlzLmdyaWRfc2V0dGluZ3MuVFJJR0dFUl9BRERfUE9JTlQpLnRvRml4ZWQocHJlY2lzaW9uKSwgc2VsbF9wcmljZS50b0ZpeGVkKHByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcoc2VsbF9jb3VudCksIFN0cmluZyhNYXRoLmNlaWwoc2VsbF9wcmljZSAqIHNlbGxfY291bnQpKSwgVG9UcmFkaW5nR2FwKHNlbGxfcHJpY2UsIGJ1eV9wcmljZSwgMSksXHJcbiAgICAgICAgICAgICAgICBUb1RyYWRpbmdHYXAoYnV5X3ByaWNlLCBzZWxsX3ByaWNlLCAxKV07XHJcbiAgICB9XHJcblxyXG59IiwgIi8qXHJcbiAgICBQbHVnaW4gcnVudGltZSBkYXRhXHJcbiovXHJcblxyXG5pbXBvcnQgeyBQbHVnaW5CYXNlU2V0dGluZ3MsIEdyaWRUcmFkaW5nU2V0dGluZ3MsIFBhY2tTZXR0aW5ncywgVW5wYWNrU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZyB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ1wiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xvZyB9IGZyb20gXCIuL3JlbW90ZV91dGlsXCI7XHJcbmltcG9ydCB7IEdyaWRUcmFkaW5nTW9kZU9uZSB9IGZyb20gXCIuL2dyaWRfdHJhZGluZ19tMVwiO1xyXG5pbXBvcnQgeyBHcmlkVHJhZGluZ01vZGVUd28gfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdfbTJcIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmdNb2RlVGhyZWUgfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdfbTNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBVUERBVEVfU1RPQ0tfU0VUVElORyA9IFwidXBkYXRlX3N0b2NrX3NldHRpbmdcIjtcclxuZXhwb3J0IGNvbnN0IEZFVENIX0NVUlJFTlRfUFJJQ0UgPSBcImZldGNoX2N1cnJlbnRfcHJpY2VcIjtcclxuXHJcbnR5cGUgQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBsdWdpbkVudlxyXG57XHJcbiAgICBpc19zZXR0aW5nc19jaGFuZ2VkOiBib29sZWFuO1xyXG4gICAgYmFzZV9zZXR0aW5nczogUGx1Z2luQmFzZVNldHRpbmdzO1xyXG4gICAgZ3JpZF9zZXR0aW5nczogR3JpZFRyYWRpbmdTZXR0aW5ncztcclxuXHJcbiAgICBncmlkX3RyYWRpbmdfZGljdDogTWFwPHN0cmluZywgR3JpZFRyYWRpbmc+O1xyXG4gICAgc3RvY2tfcmVtb3RlX3ByaWNlX2RpY3Q6IE1hcDxzdHJpbmcsIG51bWJlcj47XHJcbiAgICBldmVudF9jYWxsYmFja19kaWN0OiBNYXA8c3RyaW5nLCBNYXA8bnVtYmVyLCBDYWxsYmFjaz4+XHJcbiAgICBfZXZlbnRfZ3VpZDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmlzX3NldHRpbmdzX2NoYW5nZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJhc2Vfc2V0dGluZ3MgPSBuZXcgUGx1Z2luQmFzZVNldHRpbmdzKCk7XHJcbiAgICAgICAgdGhpcy5ncmlkX3NldHRpbmdzID0gbmV3IEdyaWRUcmFkaW5nU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLmdyaWRfdHJhZGluZ19kaWN0ID0gbmV3IE1hcDxzdHJpbmcsIEdyaWRUcmFkaW5nPjtcclxuICAgICAgICB0aGlzLnN0b2NrX3JlbW90ZV9wcmljZV9kaWN0ID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj47XHJcbiAgICAgICAgdGhpcy5ldmVudF9jYWxsYmFja19kaWN0ID0gbmV3IE1hcDxzdHJpbmcsIE1hcDxudW1iZXIsIENhbGxiYWNrPj47XHJcbiAgICAgICAgdGhpcy5fZXZlbnRfZ3VpZCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0QVBJTGlzZW5jZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5iYXNlX3NldHRpbmdzLkRBVEFfQVBJX0xJQ0VOQ0U7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0U3RvY2tSZW1vdGVQcmljZShzdG9ja19ubzogc3RyaW5nKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSB0aGlzLnN0b2NrX3JlbW90ZV9wcmljZV9kaWN0LmdldChzdG9ja19ubyk7XHJcbiAgICAgICAgaWYgKHByaWNlICE9IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmljZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBHZXRHcmlkVHJhZGluZ1R5cGVCeVN0cmluZyhtb2RlOiBzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKG1vZGUgPT0gXCJtb2RlX3R3b1wiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9EZWJ1Z0xvZyhcIkdldEdyaWRUcmFkaW5nVHlwZUJ5U3RyaW5nIHJldHVybiBUd28gXCIsIG1vZGUpXHJcbiAgICAgICAgICAgIHJldHVybiBHcmlkVHJhZGluZ01vZGVUd287XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2RlID09IFwibW9kZV90aHJlZVwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9EZWJ1Z0xvZyhcIkdldEdyaWRUcmFkaW5nVHlwZUJ5U3RyaW5nIHJldHVybiBUaHJlZSBcIiwgbW9kZSlcclxuICAgICAgICAgICAgcmV0dXJuIEdyaWRUcmFkaW5nTW9kZVRocmVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBcdTlFRDhcdThCQTRcdTRGN0ZcdTc1MjhcdTZBMjFcdTVGMEYxXHJcbiAgICAgICAgLy9EZWJ1Z0xvZyhcIkdldEdyaWRUcmFkaW5nVHlwZUJ5U3RyaW5nIHJldHVybiBPbmUgXCIsIG1vZGUpXHJcbiAgICAgICAgcmV0dXJuIEdyaWRUcmFkaW5nTW9kZU9uZTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRBbmRHZW5HcmlkVHJhZGluZyhncmlkX25hbWU6IHN0cmluZywgbW9kZTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBncmlkX3RyYWRpbmcgPSB0aGlzLmdyaWRfdHJhZGluZ19kaWN0LmdldChncmlkX25hbWUpXHJcbiAgICAgICAgY29uc3QgdHJhZGluZ19tb2RlID0gdGhpcy5HZXRHcmlkVHJhZGluZ1R5cGVCeVN0cmluZyhtb2RlKVxyXG4gICAgICAgIGlmIChncmlkX3RyYWRpbmcgaW5zdGFuY2VvZiB0cmFkaW5nX21vZGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JpZF90cmFkaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBncmlkX3RyYWRpbmcgPSBuZXcgdHJhZGluZ19tb2RlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZ3JpZF90cmFkaW5nX2RpY3Quc2V0KGdyaWRfbmFtZSwgZ3JpZF90cmFkaW5nKTtcclxuICAgICAgICByZXR1cm4gZ3JpZF90cmFkaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIFVuc2VyaWFsaXplZFNldHRpbmdzKGRhdGE6IHN0cmluZylcclxuICAgIHtcclxuICAgICAgICBjb25zdCBsaW5lcyA9IGRhdGEuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA8PSAwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFVucGFja1NldHRpbmdzKHRoaXMuYmFzZV9zZXR0aW5ncywgbGluZXMpO1xyXG4gICAgICAgIFVucGFja1NldHRpbmdzKHRoaXMuZ3JpZF9zZXR0aW5ncywgbGluZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIFNlcmlhbGl6ZWRTZXR0aW5ncygpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gUGFja1NldHRpbmdzKHRoaXMuYmFzZV9zZXR0aW5ncykgKyBQYWNrU2V0dGluZ3ModGhpcy5ncmlkX3NldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBQdWJsaXNoRXZlbnQoZXZlbnRfbmFtZTogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJQdWJsaXNoRXZlbnQ6IFwiLCBldmVudF9uYW1lKTtcclxuICAgICAgICBjb25zdCBjYl9kaWN0ID0gdGhpcy5ldmVudF9jYWxsYmFja19kaWN0LmdldChldmVudF9uYW1lKVxyXG4gICAgICAgIGlmIChjYl9kaWN0ID09IHVuZGVmaW5lZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgW2d1aWQsIGV2ZW50X2NiXSBvZiBjYl9kaWN0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHJ5XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vRGVidWdMb2coXCJUcmlnZ2VyRXZlbnRDYiBndWlkOiBcIiwgZ3VpZCwgXCIgY2I6IFwiLCBldmVudF9jYi5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50X2NiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2goZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFN1YnNjcmliZUV2ZW50KGV2ZW50X25hbWU6IHN0cmluZywgZXZlbnRfY2I6IENhbGxiYWNrKTogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgZ3VpZCA9IHRoaXMuR2VuR1VJRCgpO1xyXG4gICAgICAgIGxldCBjYl9kaWN0ID0gdGhpcy5ldmVudF9jYWxsYmFja19kaWN0LmdldChldmVudF9uYW1lKTtcclxuICAgICAgICBpZiAoY2JfZGljdCA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYl9kaWN0ID0gbmV3IE1hcDxudW1iZXIsIENhbGxiYWNrPjtcclxuICAgICAgICAgICAgdGhpcy5ldmVudF9jYWxsYmFja19kaWN0LnNldChldmVudF9uYW1lLCBjYl9kaWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2JfZGljdC5zZXQoZ3VpZCwgZXZlbnRfY2IpO1xyXG4gICAgICAgIC8vRGVidWdMb2coXCJTdWJzY3JpYmVFdmVudDogXCIsIGV2ZW50X25hbWUsIFwiIGd1aWQ6IFwiLCBndWlkLCBcIiBjYjogXCIsIGV2ZW50X2NiLm5hbWUpO1xyXG4gICAgICAgIHJldHVybiBndWlkO1xyXG4gICAgfVxyXG5cclxuICAgIFVuc3Vic2NyaWJlRXZlbnQoZXZlbnRfbmFtZTogc3RyaW5nLCBldmVudF9ndWlkOiBudW1iZXIpOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY2JfZGljdCA9IHRoaXMuZXZlbnRfY2FsbGJhY2tfZGljdC5nZXQoZXZlbnRfbmFtZSlcclxuICAgICAgICBpZiAoY2JfZGljdCA9PSB1bmRlZmluZWQgfHwgIWNiX2RpY3QuaGFzKGV2ZW50X2d1aWQpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL0RlYnVnTG9nKFwiVW5zdWJzY3JpYmVFdmVudDogXCIsIGV2ZW50X25hbWUsIFwiIGd1aWQ6IFwiLCBldmVudF9ndWlkKTtcclxuICAgICAgICByZXR1cm4gY2JfZGljdC5kZWxldGUoZXZlbnRfZ3VpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgR2VuR1VJRCgpOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICB0aGlzLl9ldmVudF9ndWlkKys7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50X2d1aWQ7XHJcbiAgICB9XHJcbn1cclxuIiwgIi8qXHJcbiAgICBcdTU5MDRcdTc0MDZcdTY0Q0RcdTRGNUNcdTYzMDdcdTRFRTRcdUZGMENcdThEMUZcdThEMjNcdTg5RTNcdTY3OTBcdTUxODVcdTVCQjlcdTVFNzZcdTc1MUZcdTYyMTBcdTY4M0NcdTVGMEZcdTUzMTZcdTdFRDNcdTY3OUNcclxuKi9cclxuXHJcbmltcG9ydCB7IHN1YnNjcmliZSB9IGZyb20gXCJkaWFnbm9zdGljc19jaGFubmVsXCI7XHJcbmltcG9ydCB7IElzTnVtZXJpYyB9IGZyb20gXCIuL215bWF0aFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRDb21tYW5kXHJcbntcclxuICAgIGNvbW1hbmQ6IHN0cmluZztcclxuICAgIGNvbW1hbmRfdHlwZTogc3RyaW5nO1xyXG4gICAgY29tbWFuZF9wYXJhbTE6IHN0cmluZztcclxuICAgIGNvbW1hbmRfcGFyYW0yOiBhbnk7IFxyXG4gICAgZGF0YV9yZXN1bHRfc3RyOiBzdHJpbmc7XHJcbiAgICBkYXRhX3Jlc3VsdF9udW06IG51bWJlcjtcclxuICAgIGVycm9yX2NvZGU6IG51bWJlcjtcclxuICAgIGVycm9yX21zZzogc3RyaW5nO1xyXG4gICAgcmF3X2NvbW1hbmRfdGV4dDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmNvbW1hbmQgPSBcIm5vbmVcIjtcclxuICAgICAgICB0aGlzLmNvbW1hbmRfdHlwZSA9IFwiZ3JpZFwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRXhjdXRlR3JpZENvbW1hbmQoY21kX3N0cjogc3RyaW5nKTogR3JpZENvbW1hbmRcclxue1xyXG4gICAgY29uc3Qgc3RycyA9IGNtZF9zdHIuc3BsaXQoXCIgXCIpO1xyXG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBHcmlkQ29tbWFuZCgpO1xyXG4gICAgY29tbWFuZC5jb21tYW5kID0gc3Ryc1swXTtcclxuICAgIGNvbW1hbmQucmF3X2NvbW1hbmRfdGV4dCA9IGNtZF9zdHI7XHJcbiAgICBpZiAoY29tbWFuZC5jb21tYW5kID09IFwiYWRkX3JlY29yZFwiKVxyXG4gICAge1xyXG4gICAgICAgIGNvbW1hbmQuY29tbWFuZF9wYXJhbTEgPSBzdHJzWzFdO1xyXG4gICAgICAgIEFkZEdyaWRSZWNvcmQoY29tbWFuZCk7XHJcbiAgICB9XHJcbiAgICBpZiAoY29tbWFuZC5jb21tYW5kID09IFwiZGVsX3JlY29yZFwiKVxyXG4gICAge1xyXG4gICAgICAgIGNvbW1hbmQuY29tbWFuZF9wYXJhbTEgPSBzdHJzWzFdO1xyXG4gICAgICAgIERlbEdyaWRSZWNvcmQoY29tbWFuZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29tbWFuZDtcclxufVxyXG5cclxuZnVuY3Rpb24gQWRkR3JpZFJlY29yZChjb21tYW5kOiBHcmlkQ29tbWFuZClcclxue1xyXG4gICAgY29uc3Qgc3ViX3N0cnMgPSBjb21tYW5kLmNvbW1hbmRfcGFyYW0xLnNwbGl0KFwiLFwiKTtcclxuICAgIGlmIChzdWJfc3Rycy5sZW5ndGggIT0gNSlcclxuICAgIHtcclxuICAgICAgICBjb21tYW5kLmVycm9yX2NvZGUgPSAtMTtcclxuICAgICAgICBjb21tYW5kLmVycm9yX21zZyA9IFwiaW52YWxpZCBwYXJhbVwiXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHN1Yl9zdHJzWzBdICE9IFwiQlVZXCIgJiYgc3ViX3N0cnNbMF0gIT0gXCJTRUxMXCIgJiYgc3ViX3N0cnNbMF0gIT0gXCJTSEFSRVwiKVxyXG4gICAge1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfY29kZSA9IC0xO1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfbXNnID0gXCJpbnZhbGlkIHBhcmFtXCJcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIXN1Yl9zdHJzWzJdLnN0YXJ0c1dpdGgoXCJcdTVDMEZcdTdGNTFcIikgJiYgIXN1Yl9zdHJzWzJdLnN0YXJ0c1dpdGgoXCJcdTRFMkRcdTdGNTFcIikgJiYgIXN1Yl9zdHJzWzJdLnN0YXJ0c1dpdGgoXCJcdTU5MjdcdTdGNTFcIikgJiYgIXN1Yl9zdHJzWzJdLnN0YXJ0c1dpdGgoXCJcdTdFQTJcdTUyMjlcIikgJiYgIXN1Yl9zdHJzWzJdLnN0YXJ0c1dpdGgoXCJcdTUyMjlcdTZEQTZcIikpXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9jb2RlID0gLTE7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9tc2cgPSBcImludmFsaWQgcGFyYW1cIlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbW1hbmQuZXJyb3JfY29kZSA9IDA7XHJcbiAgICBjb21tYW5kLmRhdGFfcmVzdWx0X3N0ciA9IFwiXFxuXCIgKyBjb21tYW5kLmNvbW1hbmRfcGFyYW0xO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIERlbEdyaWRSZWNvcmQoY29tbWFuZDogR3JpZENvbW1hbmQpXHJcbntcclxuICAgIGlmIChJc051bWVyaWMoY29tbWFuZC5jb21tYW5kX3BhcmFtMSkpXHJcbiAgICB7XHJcbiAgICAgICAgY29tbWFuZC5lcnJvcl9jb2RlID0gMDtcclxuICAgICAgICBjb21tYW5kLmRhdGFfcmVzdWx0X251bSA9IE51bWJlcihjb21tYW5kLmNvbW1hbmRfcGFyYW0xKVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfY29kZSA9IC0xO1xyXG4gICAgICAgIGNvbW1hbmQuZXJyb3JfbXNnID0gXCJpbnZhbGlkIHBhcmFtXCI7XHJcbiAgICB9XHJcbn0iLCAiLypcclxuICAgIFx1N0Y1MVx1NjgzQ1x1N0I1Nlx1NzU2NVx1NzY4NFx1NjAzQlx1ODlDOFx1ODlDNlx1NTZGRVxyXG4qL1xyXG5pbXBvcnQgeyBUZXh0RmlsZVZpZXcsIFdvcmtzcGFjZUxlYWYsIFRGaWxlLCBURm9sZGVyLCBWYXVsdCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBHUklEX0NPTE9SX1NUT0NLX09WRVJWSUVXLCBHUklEX0NPTE9SX1RBQkxFX1RJVExFLCBHUklEX0NPTE9SX0JVWV9PVkVSVklFVywgR1JJRF9DT0xPUl9TRUxMX09WRVJWSUVXIH0gZnJvbSBcIi4vc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgR3JpZFRyYWRpbmcgfSBmcm9tIFwiLi9ncmlkX3RyYWRpbmdcIjtcclxuaW1wb3J0IHsgUGx1Z2luRW52LCBGRVRDSF9DVVJSRU5UX1BSSUNFIH0gZnJvbSBcIi4vcGx1Z2luX2VudlwiO1xyXG5pbXBvcnQgeyBTdHJpbmdQbHVzLCBUb1BlcmNlbnQsIFRvVHJhZGluZ0dhcCwgUHJvcG9ydGlvblBjdFN0ciB9IGZyb20gXCIuL215bWF0aFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9HVE8gPSBcImd0by12aWV3XCJcclxuXHJcbmV4cG9ydCBjbGFzcyBHVE9WaWV3IGV4dGVuZHMgVGV4dEZpbGVWaWV3XHJcbntcclxuICAgIGRhdGE6IHN0cmluZztcclxuICAgIHZhdWx0OiBWYXVsdDtcclxuICAgIHBsdWdpbl9lbnY6IFBsdWdpbkVudjtcclxuICAgIHJlZnJlc2hfZXZlbnRfZ3VpZDogbnVtYmVyO1xyXG5cclxuICAgIGRlYnVnX2xvZzogc3RyaW5nIFtdW107XHJcbiAgICBzdG9ja19vdmVydmlldzogc3RyaW5nIFtdW107XHJcbiAgICBjdXN0b21fc3RvY2tfb3ZlcnZpZXc6IHN0cmluZyBbXVtdO1xyXG4gICAgc3RvY2tfZmlsbGVkX292ZXJ2aWV3OiBzdHJpbmcgW11bXTtcclxuICAgIGluY29tZV9vdmVydmlldzogc3RyaW5nIFtdW107XHJcbiAgICBob2xkaW5nX292ZXJ2aWV3OiBzdHJpbmcgW11bXTtcclxuXHJcbiAgICBvdmVydmlld190aXRsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBvdmVydmlld190YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBjdXN0b21fdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgY3VzdG9tX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGZpbGxlZF90aWxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGZpbGxlZF90YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBpbmNvbWVfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgaW5jb21lX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuICAgIGhvbGRpbmdfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgaG9sZGluZ190YWJsZV9lbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBkZWJ1Z19sb2dfdGl0bGVfZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgZGVidWdfbG9nX3RhYmxlX2VsOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCB2YXVsdDogVmF1bHQsIHBsdWdpbl9lbnY6IFBsdWdpbkVudilcclxuICAgIHtcclxuICAgICAgICBzdXBlcihsZWFmKTtcclxuICAgICAgICB0aGlzLnZhdWx0ID0gdmF1bHQ7XHJcbiAgICAgICAgdGhpcy5wbHVnaW5fZW52ID0gcGx1Z2luX2VudjtcclxuICAgICAgICB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA9IC0xO1xyXG5cclxuICAgICAgICB0aGlzLmRlYnVnX2xvZyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfb3ZlcnZpZXcgPSBbXTtcclxuICAgICAgICB0aGlzLmN1c3RvbV9zdG9ja19vdmVydmlldyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3ID0gW107XHJcbiAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgUmVhZEN1c3RvbVN0b2NrKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXcgPSBbW1wiXHU3Qjc5XHU3ODAxXHU3QzdCXHU1NzhCXCIsIFwiXHU1MzYwXHU3NTI4XHU2NzJDXHU5MUQxXCIsIFwiXHU2MzAxXHU0RUQzXHU5MUQxXHU5ODlEXCIsIFwiXHU2MzAxXHU0RUQzXHU3NkM4XHU0RThGXCIsIFwiXHU2RTA1XHU2ODNDXHU3NkM4XHU1MjI5XCIsIFwiXHU2RTA1XHU0RUQzXHU3NkM4XHU1MjI5XCIsIFwiXHU2MzAxXHU0RUQzXHU1MzYwXHU2QkQ0XCIsIFwiXHU2NzJDXHU5MUQxXHU1MzYwXHU2QkQ0XCJdXVxyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1NjAzQlx1OTg5RFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1NUMwRlx1N0Y1MVwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1NEUyRFx1N0Y1MVwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1NTkyN1x1N0Y1MVwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1N0QyRlx1NzlFRlwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ19vdmVydmlldy5wdXNoKFtcIlx1ODg2NVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3ID0gW1tcIlwiLCBcIlx1NTM2MFx1NzUyOFx1NjcyQ1x1OTFEMVwiLCBcIlx1NjMwMVx1NEVEM1x1OTFEMVx1OTg5RFwiLCBcIlx1NjMwMVx1NEVEM1x1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1OEQ0NFx1OTFEMVwiLCBcIlx1OEQyNlx1OTc2Mlx1OEQ0NFx1OTFEMVwiLCBcIlx1NjI5NVx1NTE2NVx1NzZDOFx1NEU4RlwiLCBcIlx1NjI5NVx1NTE2NVx1NEVEM1x1NEY0RFwiXV07XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTdEMkZcdTc5RUZcdTdCNzlcdTc4MDFcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NUY1M1x1NTI0RFx1NjMwMVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU1RjUzXHU1MjREXHU2RTA1XHU2ODNDXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiLVwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTVGNTNcdTUyNERcdTZFMDVcdTRFRDNcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NTZERVx1OEMwM1x1NjMwMVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU1NkRFXHU4QzAzXHU2RTA1XHU2ODNDXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiLVwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTU2REVcdThDMDNcdTZFMDVcdTc2RDhcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICB0aGlzLmluY29tZV9vdmVydmlldy5wdXNoKFtcIlx1NjcwMFx1NTkyN1x1NjMwMVx1NEVEM1wiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xyXG4gICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3LnB1c2goW1wiXHU2NzAwXHU1OTI3XHU2RTA1XHU2ODNDXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiLVwiXSk7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfb3ZlcnZpZXcucHVzaChbXCJcdTY3MDBcdTU5MjdcdTZFMDVcdTc2RDhcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIiwgXCItXCJdKTtcclxuICAgICAgICBjb25zdCBzdG9ja190YWJsZTogc3RyaW5nIFtdW10gPSBbW0dSSURfQ09MT1JfVEFCTEVfVElUTEUsIFwiXHU2ODA3XHU3Njg0XHU0RUUzXHU1M0Y3XCIsIFwiXHU2ODA3XHU3Njg0XHU1NDBEXHU3OUYwXCIsIFwiXHU5OTk2XHU3RjUxXHU3NkVFXHU2ODA3XHU0RUY3XCIsIFwiXHU1RjUzXHU1MjREXHU0RUY3XHU2ODNDXCIsIFwiXHU0RUY3XHU2ODNDXHU3NjdFXHU1MjA2XHU0RjREXCIsIFwiXHU2MzAxXHU0RUQzXHU4MEExXHU2NTcwXCIsIFwiXHU2RDg4XHU4MDE3XHU2NzJDXHU5MUQxXCIsIFwiXHU3NkM4XHU0RThGXHU2QkQ0XHU3Mzg3XCIsIFwiXHU1NkRFXHU4QzAzXHU0RUQzXHU0RjREXCJdXTtcclxuICAgICAgICBsZXQgYnV5X3RhYmxlOiBzdHJpbmcgW11bXSA9IFtbR1JJRF9DT0xPUl9UQUJMRV9USVRMRSwgXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdThERERcdTYyMTBcdTRFQTRcdTRFRjdcIl1dO1xyXG4gICAgICAgIGxldCBzZWxsX3RhYmxlOiBzdHJpbmcgW11bXSA9IFtbR1JJRF9DT0xPUl9UQUJMRV9USVRMRSwgXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTUzNTZcdTUxRkFcdTg5RTZcdTUzRDFcdTRFRjdcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRkRcdTY1NzBcIiwgXCJcdTUzNTZcdTUxRkFcdTkxRDFcdTk4OURcIiwgXCJcdThERERcdTYyMTBcdTRFQTRcdTRFRjdcIl1dO1xyXG4gICAgICAgIGxldCBwYXNzaXZlX3RhYmxlOiBzdHJpbmcgW11bXSA9IFtbR1JJRF9DT0xPUl9UQUJMRV9USVRMRSwgXCJcdTY4MDdcdTc2ODRcdTRFRTNcdTUzRjdcIiwgXCJcdTY4MDdcdTc2ODRcdTU0MERcdTc5RjBcIiwgXCJcdTdGNTFcdTY4M0NcdTc5Q0RcdTdDN0JcIiwgXCJcdTRFRjdcdTY4M0NcdTY4NjNcdTRGNERcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRjdcdTY4M0NcIiwgXCJcdTRFNzBcdTUxNjVcdTRFRkRcdTY1NzBcIiwgXCJcdTRFNzBcdTUxNjVcdTkxRDFcdTk4OURcIiwgXCJcdTVGNTNcdTUyNERcdTRFRjdcdTY4M0NcIiwgXCJcdTVGNTNcdTUyNERcdThEQ0NcdTVFNDVcIiwgXCJcdTUzNTZcdTUxRkFcdTRFRjdcdTY4M0NcIiwgXCJcdTUzNTZcdTUxRkFcdTZEQThcdTVFNDVcIl1dO1xyXG4gICAgICAgIGxldCBhY3RpdmVfdGFibGU6IHN0cmluZyBbXVtdID0gW1tHUklEX0NPTE9SX1RBQkxFX1RJVExFLCBcIlx1NjgwN1x1NzY4NFx1NEVFM1x1NTNGN1wiLCBcIlx1NjgwN1x1NzY4NFx1NTQwRFx1NzlGMFwiLCBcIlx1N0Y1MVx1NjgzQ1x1NzlDRFx1N0M3QlwiLCBcIlx1NEVBNFx1NjYxM1x1NjVFNVx1NjcxRlwiLCBcIlx1NEU3MFx1NTE2NVx1NEVGN1x1NjgzQ1wiLCBcIlx1NEU3MFx1NTE2NVx1NEVGRFx1NjU3MFwiLCBcIlx1NEU3MFx1NTE2NVx1OTFEMVx1OTg5RFwiLCBcIlx1NUY1M1x1NTI0RFx1NEVGN1x1NjgzQ1wiLCBcIlx1NjMwMVx1NEVEM1x1NjUzNlx1NzZDQVwiLCBcIlx1NTM1Nlx1NTFGQVx1NEVGRFx1NjU3MFwiLCBcIlx1N0QyRlx1NzlFRlx1N0I3OVx1NzgwMVwiXV07XHJcbiAgICAgICAgY29uc3QgZ3JpZF9mb2xkZXIgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCgnR3JpZFRyYWRpbmcnKTtcclxuICAgICAgICBsZXQgZ3JpZF9maWxlX25hbWVzOiBzdHJpbmcgW10gPSBbXTtcclxuICAgICAgICBpZiAoZ3JpZF9mb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXg9MDsgaW5kZXggPCBncmlkX2ZvbGRlci5jaGlsZHJlbi5sZW5ndGg7IGluZGV4KyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRfZmlsZSA9IGdyaWRfZm9sZGVyLmNoaWxkcmVuW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChncmlkX2ZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJiBncmlkX2ZpbGUubmFtZS5lbmRzV2l0aChcIi5ndHZcIikpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZF9maWxlX25hbWVzLnB1c2goZ3JpZF9maWxlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyaWRfZmlsZV9uYW1lcy5zb3J0KCk7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTA7IGlkeDxncmlkX2ZpbGVfbmFtZXMubGVuZ3RoOyBpZHgrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyaWRfdHJhZGluZyA9IHRoaXMucGx1Z2luX2Vudi5ncmlkX3RyYWRpbmdfZGljdC5nZXQoZ3JpZF9maWxlX25hbWVzW2lkeF0pO1xyXG4gICAgICAgICAgICBpZiAoZ3JpZF90cmFkaW5nIGluc3RhbmNlb2YgR3JpZFRyYWRpbmcgJiYgZ3JpZF90cmFkaW5nLklzU3RvY2soKSAmJiAhZ3JpZF90cmFkaW5nLmlzX2RlYnVnKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBncmlkX3RyYWRpbmcuSW5pdFRyYWRpbmdPdmVydmlldygpXHJcbiAgICAgICAgICAgICAgICBzdG9ja190YWJsZS5wdXNoKGdyaWRfdHJhZGluZy5zdG9ja19vdmVydmlldyk7XHJcbiAgICAgICAgICAgICAgICBidXlfdGFibGUgPSBidXlfdGFibGUuY29uY2F0KGdyaWRfdHJhZGluZy5zdG9ja19idXlfb3ZlcnZpZXcpO1xyXG4gICAgICAgICAgICAgICAgc2VsbF90YWJsZSA9IHNlbGxfdGFibGUuY29uY2F0KGdyaWRfdHJhZGluZy5zdG9ja19zZWxsX292ZXJ2aWV3KTtcclxuICAgICAgICAgICAgICAgIHBhc3NpdmVfdGFibGUgPSBwYXNzaXZlX3RhYmxlLmNvbmNhdChncmlkX3RyYWRpbmcuc3RvY2tfcGFzc2l2ZV9maWxsZWRfcmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZV90YWJsZSA9IGFjdGl2ZV90YWJsZS5jb25jYXQoZ3JpZF90cmFkaW5nLnN0b2NrX2FjdGl2ZV9maWxsZWRfcmVjb3JkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWRpbmdfaW5jb21lID0gZ3JpZF90cmFkaW5nLnRyYWRpbmdfaW5jb21lO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaWR4PTE7IGlkeDw9MTA7IGlkeCsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bMV0gPSBTdHJpbmdQbHVzKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bMV0sIHRyYWRpbmdfaW5jb21lW2lkeF1bMl0sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bMl0gPSBTdHJpbmdQbHVzKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bMl0sIHRyYWRpbmdfaW5jb21lW2lkeF1bM10sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bM10gPSBTdHJpbmdQbHVzKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bM10sIHRyYWRpbmdfaW5jb21lW2lkeF1bNl0sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNF0gPSBTdHJpbmdQbHVzKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNF0sIHRyYWRpbmdfaW5jb21lW2lkeF1bN10sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNV0gPSBTdHJpbmdQbHVzKHRoaXMuaW5jb21lX292ZXJ2aWV3W2lkeF1bNV0sIHRyYWRpbmdfaW5jb21lW2lkeF1bOF0sIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhZGluZ19ob2xkaW5nID0gZ3JpZF90cmFkaW5nLmhvbGRpbmdfYW5hbHlzaXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD02OyBpZHgrKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVsxXSA9IFN0cmluZ1BsdXModGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bMV0sIHRyYWRpbmdfaG9sZGluZ1tpZHhdWzJdLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVsyXSA9IFN0cmluZ1BsdXModGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bMl0sIHRyYWRpbmdfaG9sZGluZ1tpZHhdWzNdLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVszXSA9IFN0cmluZ1BsdXModGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bM10sIHRyYWRpbmdfaG9sZGluZ1tpZHhdWzZdLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs0XSA9IFN0cmluZ1BsdXModGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bNF0sIHRyYWRpbmdfaG9sZGluZ1tpZHhdWzddLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs1XSA9IFN0cmluZ1BsdXModGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bNV0sIHRyYWRpbmdfaG9sZGluZ1tpZHhdWzhdLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY3VycmVudF9jb3N0ID0gTnVtYmVyKHRoaXMuaW5jb21lX292ZXJ2aWV3WzJdWzFdKTtcclxuICAgICAgICBsZXQgY3VycmVudF9ob2xkID0gTnVtYmVyKHRoaXMuaW5jb21lX292ZXJ2aWV3WzJdWzJdKTtcclxuICAgICAgICBmb3IgKGxldCBpZHg9MTsgaWR4PD0xMDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzZdID0gVG9QZXJjZW50KE51bWJlcih0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzNdKSAvIE51bWJlcih0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzRdKSwgMik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzddICE9IFwiLVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzddID0gVG9QZXJjZW50KGN1cnJlbnRfY29zdCAvIE51bWJlcih0aGlzLmluY29tZV9vdmVydmlld1tpZHhdWzRdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaWR4PTE7IGlkeDw9NjsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVs2XSA9IFByb3BvcnRpb25QY3RTdHIoTnVtYmVyKHRoaXMuaG9sZGluZ19vdmVydmlld1tpZHhdWzJdKSwgY3VycmVudF9ob2xkLCAyKTtcclxuICAgICAgICAgICAgdGhpcy5ob2xkaW5nX292ZXJ2aWV3W2lkeF1bN10gPSBQcm9wb3J0aW9uUGN0U3RyKE51bWJlcih0aGlzLmhvbGRpbmdfb3ZlcnZpZXdbaWR4XVsxXSksIGN1cnJlbnRfY29zdCwgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VzdG9tX3N0b2NrX292ZXJ2aWV3ID0gWy4uLnN0b2NrX3RhYmxlLCAuLi5idXlfdGFibGUsIC4uLnNlbGxfdGFibGVdO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfZmlsbGVkX292ZXJ2aWV3ID0gWy4uLnBhc3NpdmVfdGFibGUsIC4uLmFjdGl2ZV90YWJsZV07XHJcbiAgICB9XHJcblxyXG4gICAgU3VtdXBBbGxTdG9jaygpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5zdG9ja19vdmVydmlldyA9IFtdO1xyXG4gICAgICAgIGxldCBzdG9ja19jb3VudDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgYnV5X21vbml0b3JfY291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHNlbGxfbW9uaXRvcl9jb3VudDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgXzNfYnV5X2Nvc3Q6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IF81X2J1eV9jb3N0OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCB0b3RhbF9idXlfY29zdDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgXzNfc2VsbF9nYWluOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBfNV9zZWxsX2dhaW46IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsX3NlbGxfZ2FpbjogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgZm9yKGxldCBpZHg9MDsgaWR4PHRoaXMuY3VzdG9tX3N0b2NrX292ZXJ2aWV3Lmxlbmd0aDsgaWR4KyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBzdG9jayA9IHRoaXMuY3VzdG9tX3N0b2NrX292ZXJ2aWV3W2lkeF07XHJcbiAgICAgICAgICAgIGlmIChzdG9ja1swXSA9PSBHUklEX0NPTE9SX1NUT0NLX09WRVJWSUVXKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdG9ja19jb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdG9ja1swXSA9PSBHUklEX0NPTE9SX1NFTExfT1ZFUlZJRVcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNlbGxfbW9uaXRvcl9jb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgdG90YWxfc2VsbF9nYWluICs9IE51bWJlcihzdG9ja1s4XSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFkaW5nX2dhcCA9IE51bWJlcihzdG9ja1s5XS5yZXBsYWNlKFwiJVwiLCBcIlwiKS5yZXBsYWNlKFwiK1wiLCBcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhZGluZ19nYXAgPCAzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF8zX3NlbGxfZ2FpbiArPSBOdW1iZXIoc3RvY2tbOF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRyYWRpbmdfZ2FwIDwgNSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfNV9zZWxsX2dhaW4gKz0gTnVtYmVyKHN0b2NrWzhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RvY2tbMF0gPT0gR1JJRF9DT0xPUl9CVVlfT1ZFUlZJRVcpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJ1eV9tb25pdG9yX2NvdW50Kys7XHJcbiAgICAgICAgICAgICAgICB0b3RhbF9idXlfY29zdCArPSBOdW1iZXIoc3RvY2tbOF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhZGluZ19nYXAgPSBOdW1iZXIoc3RvY2tbOV0ucmVwbGFjZShcIiVcIiwgXCJcIikucmVwbGFjZShcIitcIiwgXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCB0cmFkaW5nX2dhcCA+IC0zKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIF8zX2J1eV9jb3N0ICs9IE51bWJlcihzdG9ja1s4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHJhZGluZ19nYXAgPiAtNSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBfNV9idXlfY29zdCArPSBOdW1iZXIoc3RvY2tbOF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RvY2tfb3ZlcnZpZXcucHVzaChbXCJcdTY4MDdcdTc2ODRcdTYwM0JcdTY1NzBcIiwgXCJcdTUzNTZcdTUxRkFcdTc2RDFcdTYzQTdcIiwgXCJcdTRFNzBcdTUxNjVcdTc2RDFcdTYzQTdcIiwgXCJcdTRFNzBcdTUxNjVcdTYwM0JcdTk4OURcIiwgXCItMyVcdTUxODVcdTRFNzBcdTUxNjVcdTYwM0JcdTk4OURcIiwgXCItNSVcdTUxODVcdTRFNzBcdTUxNjVcdTYwM0JcdTk4OURcIiwgXCIrMyVcdTUxODVcdTUzNTZcdTUxRkFcdTYwM0JcdTk4OURcIiwgXCIrNSVcdTUxODVcdTUzNTZcdTUxRkFcdTYwM0JcdTk4OURcIl0pO1xyXG4gICAgICAgIHRoaXMuc3RvY2tfb3ZlcnZpZXcucHVzaChbU3RyaW5nKHN0b2NrX2NvdW50KSwgU3RyaW5nKHNlbGxfbW9uaXRvcl9jb3VudCksIFN0cmluZyhidXlfbW9uaXRvcl9jb3VudCksIFN0cmluZyh0b3RhbF9idXlfY29zdCksIFN0cmluZyhfM19idXlfY29zdCksIFN0cmluZyhfNV9idXlfY29zdCksIFN0cmluZyhfM19zZWxsX2dhaW4pLCBTdHJpbmcoXzVfc2VsbF9nYWluKV0pO1xyXG4gICAgfVxyXG5cclxuICAgIERlYnVnTG9nKGxldmVsOiBzdHJpbmcsIGxvZ19zdHI6IHN0cmluZywgZXh0cmFfaW5mbzogc3RyaW5nKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nLnB1c2goW2xldmVsLCBsb2dfc3RyLCBleHRyYV9pbmZvXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Vmlld0RhdGEoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRWaWV3RGF0YShkYXRhOiBzdHJpbmcsIGNsZWFyOiBib29sZWFuKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5SZWZyZXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9HVE87XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uT3BlbigpOiBQcm9taXNlPHZvaWQ+IFxyXG4gICAge1xyXG4gICAgICAgIGxldCBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLm92ZXJ2aWV3X3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5vdmVydmlld190YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmhvbGRpbmdfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGl0bGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmluY29tZV90YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmN1c3RvbV90aXRsZV9lbCA9IGRpdi5jcmVhdGVFbChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tX3RhYmxlX2VsID0gZGl2LmNyZWF0ZUVsKFwidGFibGVcIik7XHJcblxyXG4gICAgICAgIGRpdiA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuZmlsbGVkX3RpbGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmZpbGxlZF90YWJsZV9lbCA9IGRpdi5jcmVhdGVFbChcInRhYmxlXCIpO1xyXG5cclxuICAgICAgICBkaXYgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImRpdlwiKVxyXG4gICAgICAgIHRoaXMuZGVidWdfbG9nX3RpdGxlX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICAgICAgdGhpcy5kZWJ1Z19sb2dfdGFibGVfZWwgPSBkaXYuY3JlYXRlRWwoXCJ0YWJsZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoX2V2ZW50X2d1aWQgPSB0aGlzLnBsdWdpbl9lbnYuU3Vic2NyaWJlRXZlbnQoRkVUQ0hfQ1VSUkVOVF9QUklDRSwgKCk9PnRoaXMuUmVmcmVzaCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgb25DbG9zZSgpOiBQcm9taXNlPHZvaWQ+XHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTsgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbl9lbnYuVW5zdWJzY3JpYmVFdmVudChGRVRDSF9DVVJSRU5UX1BSSUNFLCB0aGlzLnJlZnJlc2hfZXZlbnRfZ3VpZCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaF9ldmVudF9ndWlkID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFJlZnJlc2goKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuUmVhZEN1c3RvbVN0b2NrKCk7XHJcbiAgICAgICAgdGhpcy5TdW11cEFsbFN0b2NrKCk7XHJcbiAgICAgICAgLy8gXHU2ODA3XHU3Njg0XHU2MDNCXHU4OUM4XHJcbiAgICAgICAgdGhpcy5vdmVydmlld190aXRsZV9lbC5zZXRUZXh0KFwiXHU3RjUxXHU2ODNDXHU2MDNCXHU4OUM4XCIpO1xyXG4gICAgICAgIHRoaXMub3ZlcnZpZXdfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZSh0aGlzLm92ZXJ2aWV3X3RhYmxlX2VsLCB0aGlzLnN0b2NrX292ZXJ2aWV3LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIFx1NjMwMVx1NEVEM1x1NTIwNlx1Njc5MFxyXG4gICAgICAgIHRoaXMuaG9sZGluZ190aXRsZV9lbC5zZXRUZXh0KFwiXHU2MzAxXHU0RUQzXHU1MjA2XHU2NzkwXCIpO1xyXG4gICAgICAgIHRoaXMuaG9sZGluZ190YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKHRoaXMuaG9sZGluZ190YWJsZV9lbCwgdGhpcy5ob2xkaW5nX292ZXJ2aWV3LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIFx1NzZDOFx1NEU4Rlx1NjAzQlx1ODlDOFxyXG4gICAgICAgIHRoaXMuaW5jb21lX3RpdGxlX2VsLnNldFRleHQoXCJcdTc2QzhcdTRFOEZcdTYwM0JcdTg5QzhcIik7XHJcbiAgICAgICAgdGhpcy5pbmNvbWVfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZSh0aGlzLmluY29tZV90YWJsZV9lbCwgdGhpcy5pbmNvbWVfb3ZlcnZpZXcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8gXHU2ODA3XHU3Njg0XHU0RkUxXHU2MDZGXHJcbiAgICAgICAgdGhpcy5jdXN0b21fdGl0bGVfZWwuc2V0VGV4dChcIlx1NjIxMVx1NzY4NFx1N0Y1MVx1NjgzQ1wiKTtcclxuICAgICAgICB0aGlzLmN1c3RvbV90YWJsZV9lbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheVRhYmxlKHRoaXMuY3VzdG9tX3RhYmxlX2VsLCB0aGlzLmN1c3RvbV9zdG9ja19vdmVydmlldywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIFx1ODg2NVx1NEVEMy9cdTUyQTBcdTRFRDNcdTRGRTFcdTYwNkZcclxuICAgICAgICB0aGlzLmZpbGxlZF90aWxlX2VsLnNldFRleHQoXCJcdTg4NjVcdTRFRDNcdTRGRTFcdTYwNkZcIik7XHJcbiAgICAgICAgdGhpcy5maWxsZWRfdGFibGVfZWwuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLkRpc3BsYXlUYWJsZSh0aGlzLmZpbGxlZF90YWJsZV9lbCwgdGhpcy5zdG9ja19maWxsZWRfb3ZlcnZpZXcsIHRydWUpO1xyXG5cclxuICAgICAgICAvLyBcdThDMDNcdThCRDVcdTRGRTFcdTYwNkZcclxuICAgICAgICAvLyB0aGlzLmRlYnVnX2xvZ190aXRsZV9lbC5zZXRUZXh0KFwiXHU4QzAzXHU4QkQ1XHU2NUU1XHU1RkQ3XCIpO1xyXG4gICAgICAgIC8vIHRoaXMuZGVidWdfbG9nX3RhYmxlX2VsLmVtcHR5KCk7XHJcbiAgICAgICAgLy8gdGhpcy5EaXNwbGF5VGFibGUodGhpcy5kZWJ1Z19sb2dfdGFibGVfZWwsIHRoaXMuZGVidWdfbG9nLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgRGlzcGxheVRhYmxlKHRhYmxlX2VsOiBIVE1MRWxlbWVudCwgdGFibGU6IHN0cmluZ1tdW10sIGlzX2NvbG9yOiBib29sZWFuKVxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHRhYmxlX2JvZHkgPSB0YWJsZV9lbC5jcmVhdGVFbChcInRib2R5XCIpO1xyXG4gICAgICAgIHRhYmxlLmZvckVhY2goKHJvdywgaSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB0YWJsZV9yb3cgPSB0YWJsZV9ib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgICBcclxuICAgICAgICAgICAgcm93LmZvckVhY2goKGNlbGwsIGopID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc19jb2xvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVfcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBjZWxsLCBhdHRyOiB7XCJiZ0NvbG9yXCI6IHRhYmxlW2ldWzBdLCBcImFsaWduXCI6IFwicmlnaHRcIn19KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGVfcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBjZWxsLCBhdHRyOiB7XCJhbGlnblwiOiBcInJpZ2h0XCJ9fSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwgIi8qXHJcbiAgICBDb3JyZWxhdGlvbjogXHU3NkY4XHU1MTczXHU2MDI3XHU3Q0ZCXHU2NTcwXHU4OUM2XHU1NkZFXHJcbiAgICBcdTVDNTVcdTc5M0FcdTU5MUFcdTRFMkFcdTY4MDdcdTc2ODRcdTRFMjRcdTRFMjRcdTk1RjRcdTc2ODRcdTZEQThcdThEQ0NcdThENzBcdTUyQkZcdTc2RjhcdTUxNzNcdTYwMjdcclxuKi9cclxuXHJcbmltcG9ydCB7IFRleHRGaWxlVmlldywgV29ya3NwYWNlTGVhZiwgVEZpbGUsIFRGb2xkZXIsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NPUiA9IFwiY29yLXZpZXdcIlxyXG5cclxuZXhwb3J0IGNsYXNzIENvclZpZXcgZXh0ZW5kcyBUZXh0RmlsZVZpZXdcclxue1xyXG4gICAgZGF0YV9lbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZilcclxuICAgIHtcclxuICAgICAgICBzdXBlcihsZWFmKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gVklFV19UWVBFX0NPUjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRWaWV3RGF0YSgpOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZpZXdEYXRhKGRhdGE6IHN0cmluZywgY2xlYXI6IGJvb2xlYW4pOiB2b2lkIFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5SZWZyZXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IFwiXCI7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBvbk9wZW4oKTogUHJvbWlzZTx2b2lkPiBcclxuICAgIHtcclxuICAgICAgICBsZXQgZGl2ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5kYXRhX2VsID0gZGl2LmNyZWF0ZUVsKFwiaDFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uQ2xvc2UoKTogUHJvbWlzZTx2b2lkPlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVmcmVzaCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5kYXRhX2VsLnNldFRleHQodGhpcy5kYXRhKTtcclxuICAgIH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFxREEsV0FBTyxlQUFlLFNBQVMsY0FBYyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQzVELFlBQVEsTUFBTTtBQUVkLFFBQUlBO0FBQUE7QUFBQSxNQUFxQixXQUFZO0FBQ2pDLGlCQUFTQSxPQUFNO0FBQ1gsZUFBSyxjQUFjO0FBQ25CLGVBQUssZ0JBQWdCO0FBQ3JCLGVBQUssU0FBUyxJQUFJLFdBQVcsQ0FBQztBQUM5QixlQUFLLFVBQVUsSUFBSSxZQUFZLEVBQUU7QUFDakMsZUFBSyxXQUFXLElBQUksV0FBVyxLQUFLLFNBQVMsR0FBRyxFQUFFO0FBQ2xELGVBQUssWUFBWSxJQUFJLFlBQVksS0FBSyxTQUFTLEdBQUcsRUFBRTtBQUNwRCxlQUFLLE1BQU07QUFBQSxRQUNmO0FBQ0EsUUFBQUEsS0FBSSxVQUFVLFNBQVUsS0FBSyxLQUFLO0FBQzlCLGNBQUksUUFBUSxRQUFRO0FBQUUsa0JBQU07QUFBQSxVQUFPO0FBQ25DLGlCQUFPLEtBQUssY0FDUCxNQUFNLEVBQ04sVUFBVSxHQUFHLEVBQ2IsSUFBSSxHQUFHO0FBQUEsUUFDaEI7QUFDQSxRQUFBQSxLQUFJLGVBQWUsU0FBVSxLQUFLLEtBQUs7QUFDbkMsY0FBSSxRQUFRLFFBQVE7QUFBRSxrQkFBTTtBQUFBLFVBQU87QUFDbkMsaUJBQU8sS0FBSyxjQUNQLE1BQU0sRUFDTixlQUFlLEdBQUcsRUFDbEIsSUFBSSxHQUFHO0FBQUEsUUFDaEI7QUFDQSxRQUFBQSxLQUFJLE9BQU8sU0FBVSxHQUFHO0FBQ3BCLGNBQUksS0FBS0EsS0FBSTtBQUNiLGNBQUksS0FBS0EsS0FBSTtBQUNiLGNBQUk7QUFDSixjQUFJO0FBQ0osY0FBSTtBQUNKLGNBQUk7QUFDSixlQUFLLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHO0FBQ3ZCLHFCQUFTLElBQUk7QUFDYixnQkFBSSxFQUFFLENBQUM7QUFDUCxpQkFBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRztBQUN2QixpQkFBRyxTQUFTLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxJQUFJLEVBQUk7QUFDdkMscUJBQU87QUFDUCxpQkFBRyxTQUFTLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxJQUFJLEVBQUk7QUFDdkMscUJBQU87QUFBQSxZQUNYO0FBQUEsVUFDSjtBQUNBLGlCQUFPLEdBQUcsS0FBSyxFQUFFO0FBQUEsUUFDckI7QUFDQSxRQUFBQSxLQUFJLFlBQVksU0FBVSxHQUFHLEdBQUc7QUFDNUIsY0FBSSxJQUFJLEVBQUUsQ0FBQztBQUNYLGNBQUksSUFBSSxFQUFFLENBQUM7QUFDWCxjQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsY0FBSSxJQUFJLEVBQUUsQ0FBQztBQUVYLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxXQUFXO0FBQzFDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxRQUFRO0FBQ3hDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxXQUFXO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBRS9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxZQUFZO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxXQUFXO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxZQUFZO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxZQUFZO0FBQzNDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxJQUFJO0FBQy9CLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxhQUFhO0FBQzdDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxXQUFXO0FBQzFDLGVBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxJQUFJO0FBQzlCLGdCQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxhQUFhO0FBQzVDLGVBQUssS0FBSyxLQUFLLE1BQU0s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QUMsZ0JBQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3BFLFNBQUssaUJBQWlCLEtBQUssQ0FBQyxnQkFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDcEUsU0FBSyxpQkFBaUIsS0FBSyxDQUFDLGdCQUFNLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNwRSxTQUFLLGlCQUFpQixLQUFLLENBQUMsZ0JBQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3BFLFNBQUssaUJBQWlCLEtBQUssQ0FBQyxnQkFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDcEUsU0FBSyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsNEJBQVEsMEJBQU0sQ0FBQztBQUNwRixTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJBQVEsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3JFLFNBQUssZ0JBQWdCLEtBQUssQ0FBQyw0QkFBUSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDckUsU0FBSyxnQkFBZ0IsS0FBSyxDQUFDLDRCQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNyRSxTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJBQVEsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDO0FBQ3JFLFNBQUssZ0JBQWdCLEtBQUssQ0FBQyw0QkFBUSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLENBQUM7QUFDckUsU0FBSyxnQkFBZ0IsS0FBSyxDQUFDLDRCQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUNyRSxTQUFLLGdCQUFnQixLQUFLLENBQUMsNEJB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QUFXLHFCQUNwQjtBQUNJLFdBQUssT0FBTyxtQkFBbUI7QUFDL0IsV0FBSyxXQUFXLHNCQUFzQjtBQUFBLElBQzFDO0FBQ0EsVUFBTSxLQUFLO0FBQUEsRUFDZjtBQUFBLEVBRUEsVUFBZ0I7QUFHWixTQUFLLFlBQVksTUFBTTtBQUV2QixTQUFLLFlBQVksU0FBUyxJQUFJLEVBQUUsUUFBUSxpQkFBaUI7QUFFekQsVUFBTSxXQUFXLEtBQUssWUFBWSxTQUFTLEtBQUs7QUFDaEQsYUFBUyxTQUFTLElBQUksRUFBRSxRQUFRLDBCQUFNO0FBQ3RDLFFBQUk7QUFDSixTQUFLLFFBQVEsS0FBSyxXQUFXLGVBQzdCO0FBQ0ksWUFBTSxXQUFXLGFBQWEsSUFBSSxJQUFJO0FBQ3RDLFVBQUksWUFBWSxRQUNoQjtBQUNJLGNBQU0sVUFBVSxJQUFJLHlCQUFRLFFBQVEsRUFBRSxRQUFRLFFBQVE7QUFDdEQsZ0JBQVEsUUFBUSxDQUFDLFdBQVcsY0FBWSxTQUFTO0FBQzdDLG9CQUFVLFNBQVMsT0FBTyxnQkFBZ0IsS0FBSyxXQUFXLGVBQWUsV0FBVyxDQUFDLENBQUM7QUFDdEYsb0JBQVUsU0FBUyxDQUFDLFVBQWtCO0FBQ2xDLDRCQUFnQixLQUFLLFdBQVcsZUFBZSxhQUFhLEtBQUs7QUFDakUsaUJBQUssV0FBVyxzQkFBc0I7QUFBQSxVQUMxQyxDQUFDO0FBQUEsUUFDTCxDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFFQSxVQUFNLFdBQVcsS0FBSyxZQUFZLFNBQVMsS0FBSztBQUNoRCxhQUFTLFNBQVMsSUFBSSxFQUFFLFFBQVEsMEJBQU07QUFDdEMsUUFBSTtBQUNKLFNBQUssT0FBTyxLQUFLLFdBQVcsZUFDNUI7QUFDSSxZQUFNLFdBQVcsYUFBYSxJQUFJLEdBQUc7QUFDckMsVUFBSSxZQUFZLFFBQ2hCO0FBQ0ksY0FBTSxVQUFVLElBQUkseUJBQVEsUUFBUSxFQUFFLFFBQVEsUUFBUTtBQUN0RCxnQkFBUSxRQUFRLENBQUMsV0FBVyxjQUFZLFFBQVE7QUFDNUMsbUJBQVMscUJBQXFCLFdBQVc7QUFDekMsb0JBQVUsU0FBUyxPQUFPLGdCQUFnQixLQUFLLFdBQVcsZUFBZSxXQUFXLENBQUMsQ0FBQztBQUN0RixvQkFBVSxTQUFTLENBQUMsVUFBa0I7QUFDOUIsNEJBQWdCLEtBQUssV0FBVyxlQUFlLGFBQWEsT0FBTyxLQUFLLENBQUM7QUFDekUscUJBQVMscUJBQXFCLGFBQWEsZ0JBQWdCLEtBQUssV0FBVyxlQUFlLFdBQVcsQ0FBQztBQUN0RyxpQkFBSyxXQUFXLHNCQUFzQjtBQUFBLFVBQzlDLENBQUM7QUFBQSxRQUNMLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFsiTWQ1IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAic3RycyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaWR4IiwgImltcG9ydF9vYnNpZGlhbiIsICJpbmRleCJdCn0K
